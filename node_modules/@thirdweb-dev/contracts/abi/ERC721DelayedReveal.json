{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "name": "TokenURIRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "encryptDecrypt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encryptedData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "getRevealURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        }
      ],
      "name": "isEncryptedBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b506040516200354038038062003540833981016040819052620000349162000276565b848484848483836002620000498382620003ba565b506003620000588282620003ba565b5060008055505060016010556200006f8562000094565b62000084826001600160801b038316620000e6565b5050505050505050505062000486565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6127108111156200012f5760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b604482015260640160405180910390fd5b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b80516001600160a01b0381168114620001a957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d657600080fd5b81516001600160401b0380821115620001f357620001f3620001ae565b604051601f8301601f19908116603f011681019082821181831017156200021e576200021e620001ae565b81604052838152602092508660208588010111156200023c57600080fd5b600091505b8382101562000260578582018301518183018401529082019062000241565b6000602085830101528094505050505092915050565b600080600080600060a086880312156200028f57600080fd5b6200029a8662000191565b60208701519095506001600160401b0380821115620002b857600080fd5b620002c689838a01620001c4565b95506040880151915080821115620002dd57600080fd5b50620002ec88828901620001c4565b935050620002fd6060870162000191565b60808701519092506001600160801b03811681146200031b57600080fd5b809150509295509295909350565b600181811c908216806200033e57607f821691505b6020821081036200035f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003b5576000816000526020600020601f850160051c81016020861015620003905750805b601f850160051c820191505b81811015620003b1578281556001016200039c565b5050505b505050565b81516001600160401b03811115620003d657620003d6620001ae565b620003ee81620003e7845462000329565b8462000365565b602080601f8311600181146200042657600084156200040d5750858301515b600019600386901b1c1916600185901b178555620003b1565b600085815260208120601f198616915b82811015620004575788860151825594840194600190910190840162000436565b5085821015620004765787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6130aa80620004966000396000f3fe6080604052600436106101c55760003560e01c806383040532116100f357806383040532146104885780638da5cb5b146104b8578063938e3d7b146104cd57806395d89b41146104ed5780639bcf7a15146105025780639fc4d68f14610522578063a05112fc14610542578063a22cb46514610562578063aad3ec9614610582578063ac9650d814610595578063acd083f8146105c2578063b24f2d39146105d7578063b88d4fde14610602578063c87b56dd14610622578063ce80564214610642578063d37c353b14610662578063e715032214610682578063e8a3d485146106a2578063e985e9c5146106b757600080fd5b806301ffc9a7146101ca57806306fdde03146101ff578063081812fc14610221578063095ea7b31461025957806313af40351461027b57806318160ddd1461029b57806323b872dd146102be5780632419f51b146102de5780632a55205a146102fe5780632f92023a1461033d5780633b1475a71461035c57806342842e0e1461037157806342966c6814610391578063492e224b146103b15780634cc157df146103d1578063600dd5ea146104135780636352211e1461043357806363b45e2d1461045357806370a0823114610468575b600080fd5b3480156101d657600080fd5b506101ea6101e5366004612578565b610700565b60405190151581526020015b60405180910390f35b34801561020b57600080fd5b5061021461076d565b6040516101f691906125e5565b34801561022d57600080fd5b5061024161023c3660046125f8565b6107ff565b6040516001600160a01b0390911681526020016101f6565b34801561026557600080fd5b5061027961027436600461262d565b610843565b005b34801561028757600080fd5b50610279610296366004612657565b6108c9565b3480156102a757600080fd5b50600154600054035b6040519081526020016101f6565b3480156102ca57600080fd5b506102796102d9366004612672565b610902565b3480156102ea57600080fd5b506102b06102f93660046125f8565b61090d565b34801561030a57600080fd5b5061031e6103193660046126ae565b61097b565b604080516001600160a01b0390931683526020830191909152016101f6565b34801561034957600080fd5b5061027961035836600461262d565b5050565b34801561036857600080fd5b50600f546102b0565b34801561037d57600080fd5b5061027961038c366004612672565b6109b8565b34801561039d57600080fd5b506102796103ac3660046125f8565b6109d3565b3480156103bd57600080fd5b506101ea6103cc3660046125f8565b6109de565b3480156103dd57600080fd5b506103f16103ec3660046125f8565b610a04565b604080516001600160a01b03909316835261ffff9091166020830152016101f6565b34801561041f57600080fd5b5061027961042e36600461262d565b610a6f565b34801561043f57600080fd5b5061024161044e3660046125f8565b610a9d565b34801561045f57600080fd5b50600c546102b0565b34801561047457600080fd5b506102b0610483366004612657565b610aaf565b34801561049457600080fd5b506101ea6104a33660046125f8565b600e6020526000908152604090205460ff1681565b3480156104c457600080fd5b50610241610afd565b3480156104d957600080fd5b506102796104e836600461277b565b610b0c565b3480156104f957600080fd5b50610214610b39565b34801561050e57600080fd5b5061027961051d3660046127c3565b610b48565b34801561052e57600080fd5b5061021461053d366004612830565b610b77565b34801561054e57600080fd5b5061021461055d3660046125f8565b610cf7565b34801561056e57600080fd5b5061027961057d36600461287b565b610d91565b61027961059036600461262d565b610e26565b3480156105a157600080fd5b506105b56105b03660046128b7565b610f42565b6040516101f6919061292b565b3480156105ce57600080fd5b506000546102b0565b3480156105e357600080fd5b50600a546001600160a01b03811690600160a01b900461ffff166103f1565b34801561060e57600080fd5b5061027961061d3660046129af565b6110a7565b34801561062e57600080fd5b5061021461063d3660046125f8565b6110f8565b34801561064e57600080fd5b5061021461065d366004612830565b611167565b34801561066e57600080fd5b506102b061067d366004612a16565b61120a565b34801561068e57600080fd5b5061021461069d366004612a8f565b6112a2565b3480156106ae57600080fd5b50610214611317565b3480156106c357600080fd5b506101ea6106d2366004612aea565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b03198316148061073157506380ac58cd60e01b6001600160e01b03198316145b8061074c5750635b5e139f60e01b6001600160e01b03198316145b8061076757506001600160e01b0319821663152a902d60e11b145b92915050565b60606002805461077c90612b1d565b80601f01602080910402602001604051908101604052809291908181526020018280546107a890612b1d565b80156107f55780601f106107ca576101008083540402835291602001916107f5565b820191906000526020600020905b8154815290600101906020018083116107d857829003601f168201915b5050505050905090565b600061080a82611324565b610827576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061084e82610a9d565b9050806001600160a01b0316836001600160a01b0316036108825760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216146108b95761089c81336106d2565b6108b9576040516367d9dca160e11b815260040160405180910390fd5b6108c483838361134f565b505050565b6108d16113ab565b6108f65760405162461bcd60e51b81526004016108ed90612b57565b60405180910390fd5b6108ff816113ce565b50565b6108c4838383611420565b6000610918600c5490565b82106109565760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016108ed565b600c828154811061096957610969612b7f565b90600052602060002001549050919050565b60008060008061098a86610a04565b90945084925061ffff1690506127106109a38287612bab565b6109ad9190612bd8565b925050509250929050565b6108c4838383604051806020016040528060008152506110a7565b6108ff8160016115fa565b600081815260116020526040812080548291906109fa90612b1d565b9050119050919050565b6000818152600b60209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252829115610a4b5780516020820151610a65565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610a776113ab565b610a935760405162461bcd60e51b81526004016108ed90612b57565b61035882826117a9565b6000610aa88261182d565b5192915050565b60006001600160a01b038216610ad8576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6009546001600160a01b031690565b610b146113ab565b610b305760405162461bcd60e51b81526004016108ed90612b57565b6108ff81611947565b60606003805461077c90612b1d565b610b506113ab565b610b6c5760405162461bcd60e51b81526004016108ed90612b57565b6108c4838383611a23565b600083815260116020526040812080546060929190610b9590612b1d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc190612b1d565b8015610c0e5780601f10610be357610100808354040283529160200191610c0e565b820191906000526020600020905b815481529060010190602001808311610bf157829003601f168201915b505050505090508051600003610c5a5760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81d1bc81c995d99585b607a1b60448201526064016108ed565b60008082806020019051810190610c719190612bec565b91509150610c808287876112a2565b93508084878746604051602001610c9a9493929190612c6c565b6040516020818303038152906040528051906020012014610ced5760405162461bcd60e51b815260206004820152600d60248201526c496e636f7272656374206b657960981b60448201526064016108ed565b5050509392505050565b60116020526000908152604090208054610d1090612b1d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3c90612b1d565b8015610d895780601f10610d5e57610100808354040283529160200191610d89565b820191906000526020600020905b815481529060010190602001808311610d6c57829003601f168201915b505050505081565b336001600160a01b03831603610dba5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600260105403610e785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108ed565b6002601055600f54600054610e8e908390612c95565b1115610edc5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e000060448201526064016108ed565b6000610ee88383611aca565b905080836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de685604051610f3091815260200190565b60405180910390a45050600160105550565b6060816001600160401b03811115610f5c57610f5c6126d0565b604051908082528060200260200182016040528015610f8f57816020015b6060815260200190600190039081610f7a5790505b509050336000805b8481101561109e57811561101657610ff430878784818110610fbb57610fbb612b7f565b9050602002810190610fcd9190612ca8565b86604051602001610fe093929190612cee565b604051602081830303815290604052611ad7565b84828151811061100657611006612b7f565b6020026020010181905250611096565b6110783087878481811061102c5761102c612b7f565b905060200281019061103e9190612ca8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ad792505050565b84828151811061108a5761108a612b7f565b60200260200101819052505b600101610f97565b50505092915050565b6110b2848484611420565b6110c4836001600160a01b0316611b03565b156110f2576110d584848484611b12565b6110f2576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060600061110583611bfe565b509050600061111384611d03565b905061111e826109de565b1561114c57806040516020016111349190612d0f565b60405160208183030381529060405292505050919050565b8061115685611e64565b604051602001611134929190612d34565b60606111716113ab565b61118d5760405162461bcd60e51b81526004016108ed90612b57565b60006111988561090d565b90506111a5818585610b77565b91506111c08160405180602001604052806000815250611f64565b6111ca8183611f7c565b847f6df1d8db2a036436ffe0b2d1833f2c5f1e624818dfce2578c0faa4b83ef9998d836040516111fa91906125e5565b60405180910390a2509392505050565b6000811561128b5760008061122184860186612d63565b91509150815160001415801561123657508015155b156112885761128888600f5461124c9190612c95565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f6492505050565b50505b6112988686868686612021565b9695505050505050565b8251604080518083016020019091528181529060005b8181101561130e5760008585836040516020016112d793929190612da7565b60408051601f19818403018152919052805160209182012088840182015118858401820152611307915082612c95565b90506112b8565b50509392505050565b60088054610d1090612b1d565b6000805482108015610767575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006113b5610afd565b6001600160a01b0316336001600160a01b031614905090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061142b8261182d565b9050836001600160a01b031681600001516001600160a01b0316146114625760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480611480575061148085336106d2565b8061149b575033611490846107ff565b6001600160a01b0316145b9050806114bb57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166114e257604051633a954ecd60e21b815260040160405180910390fd5b6114ee6000848761134f565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166115c15760005482146115c157805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061305583398151915260405160405180910390a45050505050565b60006116058361182d565b8051909150821561166b576000336001600160a01b038316148061162e575061162e82336106d2565b8061164957503361163e866107ff565b6001600160a01b0316145b90508061166957604051632ce44b5f60e11b815260040160405180910390fd5b505b6116776000858361134f565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b17855591890180845292208054919490911661177157600054821461177157805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020613055833981519152908390a4505060018054810190555050565b6127108111156117cb5760405162461bcd60e51b81526004016108ed90612db9565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561192e57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529061192c5780516001600160a01b0316156118c3579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611927579392505050565b6118c3565b505b604051636f96cda160e11b815260040160405180910390fd5b60006008805461195690612b1d565b80601f016020809104026020016040519081016040528092919081815260200182805461198290612b1d565b80156119cf5780601f106119a4576101008083540402835291602001916119cf565b820191906000526020600020905b8154815290600101906020018083116119b257829003601f168201915b5050505050905081600890816119e59190612e32565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611a17929190612ef1565b60405180910390a15050565b612710811115611a455760405162461bcd60e51b81526004016108ed90612db9565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b600054610767838361212e565b6060611afc838360405180606001604052806027815260200161302e60279139612148565b9392505050565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611b47903390899088908890600401612f1f565b6020604051808303816000875af1925050508015611b82575060408051601f3d908101601f19168201909252611b7f91810190612f52565b60015b611be0573d808015611bb0576040519150601f19603f3d011682016040523d82523d6000602084013e611bb5565b606091505b508051600003611bd8576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6000806000611c0c600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015611c5c57602002820191906000526020600020905b815481526020019060010190808311611c48575b5050505050905060005b82811015611cc857818181518110611c8057611c80612b7f565b6020026020010151861015611cb657809350818181518110611ca457611ca4612b7f565b60200260200101519450505050915091565b611cc1600182612c95565b9050611c66565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b60448201526064016108ed565b60606000611d10600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015611d6057602002820191906000526020600020905b815481526020019060010190808311611d4c575b5050505050905060005b82811015611cc857818181518110611d8457611d84612b7f565b6020026020010151851015611e5257600d6000838381518110611da957611da9612b7f565b602002602001015181526020019081526020016000208054611dca90612b1d565b80601f0160208091040260200160405190810160405280929190818152602001828054611df690612b1d565b8015611e435780601f10611e1857610100808354040283529160200191611e43565b820191906000526020600020905b815481529060010190602001808311611e2657829003601f168201915b50505050509350505050919050565b611e5d600182612c95565b9050611d6a565b606081600003611e8b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611eb55780611e9f81612f6f565b9150611eae9050600a83612bd8565b9150611e8f565b6000816001600160401b03811115611ecf57611ecf6126d0565b6040519080825280601f01601f191660200182016040528015611ef9576020820181803683370190505b5090505b8415611bf657611f0e600183612f88565b9150611f1b600a86612f9b565b611f26906030612c95565b60f81b818381518110611f3b57611f3b612b7f565b60200101906001600160f81b031916908160001a905350611f5d600a86612bd8565b9450611efd565b60008281526011602052604090206108c48282612e32565b6000828152600e602052604090205460ff1615611fca5760405162461bcd60e51b815260206004820152600c60248201526b2130ba31b410333937bd32b760a11b60448201526064016108ed565b6000828152600d60205260409020611fe28282612e32565b507f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c61200d836121b6565b604080519182526020820185905201611a17565b600061202b6113ab565b6120475760405162461bcd60e51b81526004016108ed90612b57565b8560000361207f5760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b60448201526064016108ed565b6000600f5490506120c7818888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122c692505050565b600f919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d60016120fd8a84612c95565b6121079190612f88565b8888888860405161211c959493929190612fd8565b60405180910390a25095945050505050565b61035882826040518060200160405280600081525061232a565b6060600080856001600160a01b0316856040516121659190613011565b600060405180830381855af49150503d80600081146121a0576040519150601f19603f3d011682016040523d82523d6000602084013e6121a5565b606091505b5091509150611298868383876124c6565b6000806121c2600c5490565b90506000600c80548060200260200160405190810160405280929190818152602001828054801561221257602002820191906000526020600020905b8154815260200190600101908083116121fe575b5050505050905060005b8281101561228b5781818151811061223657612236612b7f565b602002602001015185036122835780156122785781612256600183612f88565b8151811061226657612266612b7f565b60200260200101519350505050919050565b506000949350505050565b60010161221c565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818985d18da1259608a1b60448201526064016108ed565b6000806122d38486612c95565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d602052604090209092508291506123218482612e32565b50935093915050565b6000546001600160a01b03841661235357604051622e076360e81b815260040160405180910390fd5b826000036123745760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b429093169290920291909117905581908185019061240d90611b03565b15612483575b60405182906001600160a01b03881690600090600080516020613055833981519152908290a461244c6000878480600101955087611b12565b612469576040516368d2bf6b60e11b815260040160405180910390fd5b80821061241357826000541461247e57600080fd5b6124b6565b5b6040516001830192906001600160a01b03881690600090600080516020613055833981519152908290a4808210612484575b5060009081556110f29085838684565b6060831561253357825160000361252c576124e085611b03565b61252c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ed565b5081611bf6565b611bf683838151156125485781518083602001fd5b8060405162461bcd60e51b81526004016108ed91906125e5565b6001600160e01b0319811681146108ff57600080fd5b60006020828403121561258a57600080fd5b8135611afc81612562565b60005b838110156125b0578181015183820152602001612598565b50506000910152565b600081518084526125d1816020860160208601612595565b601f01601f19169290920160200192915050565b602081526000611afc60208301846125b9565b60006020828403121561260a57600080fd5b5035919050565b80356001600160a01b038116811461262857600080fd5b919050565b6000806040838503121561264057600080fd5b61264983612611565b946020939093013593505050565b60006020828403121561266957600080fd5b611afc82612611565b60008060006060848603121561268757600080fd5b61269084612611565b925061269e60208501612611565b9150604084013590509250925092565b600080604083850312156126c157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561270e5761270e6126d0565b604052919050565b60006001600160401b0382111561272f5761272f6126d0565b50601f01601f191660200190565b600061275061274b84612716565b6126e6565b905082815283838301111561276457600080fd5b828260208301376000602084830101529392505050565b60006020828403121561278d57600080fd5b81356001600160401b038111156127a357600080fd5b8201601f810184136127b457600080fd5b611bf68482356020840161273d565b6000806000606084860312156127d857600080fd5b8335925061269e60208501612611565b60008083601f8401126127fa57600080fd5b5081356001600160401b0381111561281157600080fd5b60208301915083602082850101111561282957600080fd5b9250929050565b60008060006040848603121561284557600080fd5b8335925060208401356001600160401b0381111561286257600080fd5b61286e868287016127e8565b9497909650939450505050565b6000806040838503121561288e57600080fd5b61289783612611565b9150602083013580151581146128ac57600080fd5b809150509250929050565b600080602083850312156128ca57600080fd5b82356001600160401b03808211156128e157600080fd5b818501915085601f8301126128f557600080fd5b81358181111561290457600080fd5b8660208260051b850101111561291957600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561298257603f198886030184526129708583516125b9565b94509285019290850190600101612954565b5092979650505050505050565b600082601f8301126129a057600080fd5b611afc8383356020850161273d565b600080600080608085870312156129c557600080fd5b6129ce85612611565b93506129dc60208601612611565b92506040850135915060608501356001600160401b038111156129fe57600080fd5b612a0a8782880161298f565b91505092959194509250565b600080600080600060608688031215612a2e57600080fd5b8535945060208601356001600160401b0380821115612a4c57600080fd5b612a5889838a016127e8565b90965094506040880135915080821115612a7157600080fd5b50612a7e888289016127e8565b969995985093965092949392505050565b600080600060408486031215612aa457600080fd5b83356001600160401b0380821115612abb57600080fd5b612ac78783880161298f565b94506020860135915080821115612add57600080fd5b5061286e868287016127e8565b60008060408385031215612afd57600080fd5b612b0683612611565b9150612b1460208401612611565b90509250929050565b600181811c90821680612b3157607f821691505b602082108103612b5157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761076757610767612b95565b634e487b7160e01b600052601260045260246000fd5b600082612be757612be7612bc2565b500490565b60008060408385031215612bff57600080fd5b82516001600160401b03811115612c1557600080fd5b8301601f81018513612c2657600080fd5b8051612c3461274b82612716565b818152866020838501011115612c4957600080fd5b612c5a826020830160208601612595565b60209590950151949694955050505050565b60008551612c7e818460208a01612595565b820184868237909301918252506020019392505050565b8082018082111561076757610767612b95565b6000808335601e19843603018112612cbf57600080fd5b8301803591506001600160401b03821115612cd957600080fd5b60200191503681900382131561282957600080fd5b8284823760609190911b6001600160601b0319169101908152601401919050565b60008251612d21818460208701612595565b600360fc1b920191825250600101919050565b60008351612d46818460208801612595565b835190830190612d5a818360208801612595565b01949350505050565b60008060408385031215612d7657600080fd5b82356001600160401b03811115612d8c57600080fd5b612d988582860161298f565b95602094909401359450505050565b82848237909101908152602001919050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b601f8211156108c4576000816000526020600020601f850160051c81016020861015612e0b5750805b601f850160051c820191505b81811015612e2a57828155600101612e17565b505050505050565b81516001600160401b03811115612e4b57612e4b6126d0565b612e5f81612e598454612b1d565b84612de2565b602080601f831160018114612e945760008415612e7c5750858301515b600019600386901b1c1916600185901b178555612e2a565b600085815260208120601f198616915b82811015612ec357888601518255948401946001909101908401612ea4565b5085821015612ee15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000612f0460408301856125b9565b8281036020840152612f1681856125b9565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611298908301846125b9565b600060208284031215612f6457600080fd5b8151611afc81612562565b600060018201612f8157612f81612b95565b5060010190565b8181038181111561076757610767612b95565b600082612faa57612faa612bc2565b500690565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000612ff2606083018688612faf565b8281036040840152613005818587612faf565b98975050505050505050565b60008251613023818460208701612595565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209a9e40e4026caf8460e0c54de7f81772727688860d9f3641603544d492f3b56764736f6c63430008170033",
    "sourceMap": "979:3795:12:-:0;;;1258:253;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1446:13;1461:5;1468:7;1477:17;1496:11;1461:5;1468:7;1883:5:25;:13;1461:5:12;1883::25;:13;:::i;:::-;-1:-1:-1;1906:7:25;:17;1916:7;1906;:17;:::i;:::-;-1:-1:-1;2119:7:25;1933:13;:31;-1:-1:-1;;202:1:220;307:7;:22;2660:26:14::1;2672:13:::0;2660:11:::1;:26::i;:::-;2696:56;2721:17:::0;-1:-1:-1;;;;;2696:56:14;::::1;:24;:56::i;:::-;2453:306:::0;;;;;1258:253:12;;;;;979:3795;;1421:172:70;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;4865:2:821;3549:25:77;;;4847:21:821;4904:2;4884:18;;;4877:30;-1:-1:-1;;;4923:18:821;;;4916:45;4978:18;;3549:25:77;;;;;;;3509:76;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;5153:25:821;;;3689:46:77;;5141:2:821;5126:18;3689:46:77;;;;;;;3408:334;;:::o;14:177:821:-;93:13;;-1:-1:-1;;;;;135:31:821;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:844;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:821;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:821;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;914:3;907:4;902:2;894:6;890:15;886:26;883:35;880:55;;;931:1;928;921:12;880:55;953:1;944:10;;963:133;977:2;974:1;971:9;963:133;;;1065:14;;;1061:23;;1055:30;1034:14;;;1030:23;;1023:63;988:10;;;;963:133;;;1140:1;1133:4;1128:2;1120:6;1116:15;1112:26;1105:37;1160:6;1151:15;;;;;;328:844;;;;:::o;1177:901::-;1303:6;1311;1319;1327;1335;1388:3;1376:9;1367:7;1363:23;1359:33;1356:53;;;1405:1;1402;1395:12;1356:53;1428:40;1458:9;1428:40;:::i;:::-;1512:2;1497:18;;1491:25;1418:50;;-1:-1:-1;;;;;;1565:14:821;;;1562:34;;;1592:1;1589;1582:12;1562:34;1615:61;1668:7;1659:6;1648:9;1644:22;1615:61;:::i;:::-;1605:71;;1722:2;1711:9;1707:18;1701:25;1685:41;;1751:2;1741:8;1738:16;1735:36;;;1767:1;1764;1757:12;1735:36;;1790:63;1845:7;1834:8;1823:9;1819:24;1790:63;:::i;:::-;1780:73;;;1872:49;1917:2;1906:9;1902:18;1872:49;:::i;:::-;1964:3;1949:19;;1943:26;1862:59;;-1:-1:-1;;;;;;1998:31:821;;1988:42;;1978:70;;2044:1;2041;2034:12;1978:70;2067:5;2057:15;;;1177:901;;;;;;;;:::o;2083:380::-;2162:1;2158:12;;;;2205;;;2226:61;;2280:4;2272:6;2268:17;2258:27;;2226:61;2333:2;2325:6;2322:14;2302:18;2299:38;2296:161;;2379:10;2374:3;2370:20;2367:1;2360:31;2414:4;2411:1;2404:15;2442:4;2439:1;2432:15;2296:161;;2083:380;;;:::o;2594:543::-;2696:2;2691:3;2688:11;2685:446;;;2732:1;2756:5;2753:1;2746:16;2800:4;2797:1;2787:18;2870:2;2858:10;2854:19;2851:1;2847:27;2841:4;2837:38;2906:4;2894:10;2891:20;2888:47;;;-1:-1:-1;2929:4:821;2888:47;2984:2;2979:3;2975:12;2972:1;2968:20;2962:4;2958:31;2948:41;;3039:82;3057:2;3050:5;3047:13;3039:82;;;3102:17;;;3083:1;3072:13;3039:82;;;3043:3;;;2685:446;2594:543;;;:::o;3313:1345::-;3433:10;;-1:-1:-1;;;;;3455:30:821;;3452:56;;;3488:18;;:::i;:::-;3517:97;3607:6;3567:38;3599:4;3593:11;3567:38;:::i;:::-;3561:4;3517:97;:::i;:::-;3669:4;;3726:2;3715:14;;3743:1;3738:663;;;;4445:1;4462:6;4459:89;;;-1:-1:-1;4514:19:821;;;4508:26;4459:89;-1:-1:-1;;3270:1:821;3266:11;;;3262:24;3258:29;3248:40;3294:1;3290:11;;;3245:57;4561:81;;3708:944;;3738:663;2541:1;2534:14;;;2578:4;2565:18;;-1:-1:-1;;3774:20:821;;;3892:236;3906:7;3903:1;3900:14;3892:236;;;3995:19;;;3989:26;3974:42;;4087:27;;;;4055:1;4043:14;;;;3922:19;;3892:236;;;3896:3;4156:6;4147:7;4144:19;4141:201;;;4217:19;;;4211:26;-1:-1:-1;;4300:1:821;4296:14;;;4312:3;4292:24;4288:37;4284:42;4269:58;4254:74;;4141:201;-1:-1:-1;;;;;4388:1:821;4372:14;;;4368:22;4355:36;;-1:-1:-1;3313:1345:821:o;5007:177::-;979:3795:12;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "979:3795:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3051:444:14;;;;;;;;;;-1:-1:-1;3051:444:14;;;;;:::i;:::-;;:::i;:::-;;;565:14:821;;558:22;540:41;;528:2;513:18;3051:444:14;;;;;;;;6129:98:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;7615:200::-;;;;;;;;;;-1:-1:-1;7615:200:25;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:821;;;1679:51;;1667:2;1652:18;7615:200:25;1533:203:821;7162:392:25;;;;;;;;;;-1:-1:-1;7162:392:25;;;;;:::i;:::-;;:::i;:::-;;1133:173:70;;;;;;;;;;-1:-1:-1;1133:173:70;;;;;:::i;:::-;;:::i;2282:306:25:-;;;;;;;;;;-1:-1:-1;2541:12:25;;2335:7;2525:13;:28;2282:306;;;2515:25:821;;;2503:2;2488:18;2282:306:25;2369:177:821;8454:134:25;;;;;;;;;;-1:-1:-1;8454:134:25;;;;;:::i;:::-;;:::i;2029:203:54:-;;;;;;;;;;-1:-1:-1;2029:203:54;;;;;:::i;:::-;;:::i;1421:325:77:-;;;;;;;;;;-1:-1:-1;1421:325:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3329:32:821;;;3311:51;;3393:2;3378:18;;3371:34;;;;3284:18;1421:325:77;3137:274:821;6158:80:14;;;;;;;;;;-1:-1:-1;6158:80:14;;;;;:::i;:::-;;;;6681:112;;;;;;;;;;-1:-1:-1;6765:21:14;;6681:112;;8654:149:25;;;;;;;;;;-1:-1:-1;8654:149:25;;;;;:::i;:::-;;:::i;6512:87:14:-;;;;;;;;;;-1:-1:-1;6512:87:14;;;;;:::i;:::-;;:::i;3937:129:57:-;;;;;;;;;;-1:-1:-1;3937:129:57;;;;;:::i;:::-;;:::i;1986:381:77:-;;;;;;;;;;-1:-1:-1;1986:381:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3606:32:821;;;3588:51;;3687:6;3675:19;;;3670:2;3655:18;;3648:47;3561:18;1986:381:77;3416:285:821;3065:256:77;;;;;;;;;;-1:-1:-1;3065:256:77;;;;;:::i;:::-;;:::i;5944:123:25:-;;;;;;;;;;-1:-1:-1;5944:123:25;;;;;:::i;:::-;;:::i;1711:96:54:-;;;;;;;;;;-1:-1:-1;1785:8:54;:15;1711:96;;3370:203:25;;;;;;;;;;-1:-1:-1;3370:203:25;;;;;:::i;:::-;;:::i;954:43:54:-;;;;;;;;;;-1:-1:-1;954:43:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;871:86:70;;;;;;;;;;;;;:::i;1003:188:56:-;;;;;;;;;;-1:-1:-1;1003:188:56;;;;;:::i;:::-;;:::i;6291:102:25:-;;;;;;;;;;;;;:::i;4259:258:77:-;;;;;;;;;;-1:-1:-1;4259:258:77;;;;;:::i;:::-;;:::i;1383:534:57:-;;;;;;;;;;-1:-1:-1;1383:534:57;;;;;:::i;:::-;;:::i;568:46::-;;;;;;;;;;-1:-1:-1;568:46:57;;;;;:::i;:::-;;:::i;7882:282:25:-;;;;;;;;;;-1:-1:-1;7882:282:25;;;;;:::i;:::-;;:::i;5215:533:14:-;;;;;;:::i;:::-;;:::i;696:567:65:-;;;;;;;;;;-1:-1:-1;696:567:65;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6871:105:14:-;;;;;;;;;;-1:-1:-1;6930:7:14;6956:13;6871:105;;2477:144:77;;;;;;;;;;-1:-1:-1;2577:16:77;;-1:-1:-1;;;;;2577:16:77;;;-1:-1:-1;;;2602:10:77;;;;2477:144;;8869:343:25;;;;;;;;;;-1:-1:-1;8869:343:25;;;;;:::i;:::-;;:::i;1925:410:12:-;;;;;;;;;;-1:-1:-1;1925:410:12;;;;;:::i;:::-;;:::i;4168:413::-;;;;;;;;;;-1:-1:-1;4168:413:12;;;;;:::i;:::-;;:::i;3142:548::-;;;;;;;;;;-1:-1:-1;3142:548:12;;;;;:::i;:::-;;:::i;2409:1283:57:-;;;;;;;;;;-1:-1:-1;2409:1283:57;;;;;:::i;:::-;;:::i;565:34:56:-;;;;;;;;;;;;;:::i;8230:162:25:-;;;;;;;;;;-1:-1:-1;8230:162:25;;;;;:::i;:::-;-1:-1:-1;;;;;8350:25:25;;;8327:4;8350:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8230:162;3051:444:14;3154:4;-1:-1:-1;;;;;;;;;3189:25:14;;;;:100;;-1:-1:-1;;;;;;;;;;3264:25:14;;;3189:100;:175;;;-1:-1:-1;;;;;;;;;;3339:25:14;;;3189:175;:274;;;-1:-1:-1;;;;;;;3422:41:14;;-1:-1:-1;;;3422:41:14;3189:274;3170:293;3051:444;-1:-1:-1;;3051:444:14:o;6129:98:25:-;6183:13;6215:5;6208:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6129:98;:::o;7615:200::-;7683:7;7707:16;7715:7;7707;:16::i;:::-;7702:64;;7732:34;;-1:-1:-1;;;7732:34:25;;;;;;;;;;;7702:64;-1:-1:-1;7784:24:25;;;;:15;:24;;;;;;-1:-1:-1;;;;;7784:24:25;;7615:200::o;7162:392::-;7242:13;7258:24;7274:7;7258:15;:24::i;:::-;7242:40;;7302:5;-1:-1:-1;;;;;7296:11:25;:2;-1:-1:-1;;;;;7296:11:25;;7292:48;;7316:24;;-1:-1:-1;;;7316:24:25;;;;;;;;;;;7292:48;8974:10:14;-1:-1:-1;;;;;7355:21:25;;;7351:158;;7395:37;7412:5;8974:10:14;8230:162:25;:::i;7395:37::-;7390:119;;7459:35;;-1:-1:-1;;;7459:35:25;;;;;;;;;;;7390:119;7519:28;7528:2;7532:7;7541:5;7519:8;:28::i;:::-;7232:322;7162:392;;:::o;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;8454:134:25:-;8553:28;8563:4;8569:2;8573:7;8553:9;:28::i;2029:203:54:-;2093:7;2126:17;1785:8;:15;;1711:96;2126:17;2116:6;:27;2112:81;;2159:23;;-1:-1:-1;;;2159:23:54;;11669:2:821;2159:23:54;;;11651:21:821;11708:2;11688:18;;;11681:30;-1:-1:-1;;;11727:18:821;;;11720:43;11780:18;;2159:23:54;11467:337:821;2112:81:54;2209:8;2218:6;2209:16;;;;;;;;:::i;:::-;;;;;;;;;2202:23;;2029:203;;;:::o;1421:325:77:-;1540:16;1558:21;1592:17;1611:11;1626:31;1649:7;1626:22;:31::i;:::-;1591:66;;-1:-1:-1;1591:66:77;;-1:-1:-1;1591:66:77;;;-1:-1:-1;1733:6:77;1714:15;1591:66;1714:9;:15;:::i;:::-;1713:26;;;;:::i;:::-;1697:42;;1581:165;;1421:325;;;;;:::o;8654:149:25:-;8757:39;8774:4;8780:2;8784:7;8757:39;;;;;;;;;;;;:16;:39::i;6512:87:14:-;6571:21;6577:8;6587:4;6571:5;:21::i;3937:129:57:-;4002:4;4025:23;;;:13;:23;;;;;:30;;4002:4;;4025:23;:30;;;:::i;:::-;;;:34;4018:41;;3937:129;;;:::o;1986:381:77:-;2066:7;2130:29;;;:19;:29;;;;;;;;2093:66;;;;;;;;;;-1:-1:-1;;;;;2093:66:77;;;;;;;;;;;;;;;;2066:7;;2189:39;:171;;2305:25;;2339:19;;;;2189:171;;;2248:16;;-1:-1:-1;;;;;2248:16:77;;;-1:-1:-1;;;2273:10:77;;;;2189:171;2170:190;;;;;1986:381;;;:::o;3065:256::-;3177:20;:18;:20::i;:::-;3172:76;;3213:24;;-1:-1:-1;;;3213:24:77;;;;;;;:::i;3172:76::-;3258:56;3283:17;3302:11;3258:24;:56::i;5944:123:25:-;6008:7;6034:21;6047:7;6034:12;:21::i;:::-;:26;;5944:123;-1:-1:-1;;5944:123:25:o;3370:203::-;3434:7;-1:-1:-1;;;;;3457:19:25;;3453:60;;3485:28;;-1:-1:-1;;;3485:28:25;;;;;;;;;;;3453:60;-1:-1:-1;;;;;;3538:19:25;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3538:27:25;;3370:203::o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;1003:188:56:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:56;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;6291:102:25:-;6347:13;6379:7;6372:14;;;;;:::i;4259:258:77:-;4376:20;:18;:20::i;:::-;4371:76;;4412:24;;-1:-1:-1;;;4412:24:77;;;;;;;:::i;4371:76::-;4457:53;4483:8;4493:10;4505:4;4457:25;:53::i;1383:534:57:-;1502:17;1522:23;;;:13;:23;;;;;1502:43;;1465:25;;1502:17;1522:23;1502:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:4;:11;1574:1;1559:16;1555:74;;1591:27;;-1:-1:-1;;;1591:27:57;;12705:2:821;1591:27:57;;;12687:21:821;12744:2;12724:18;;;12717:30;-1:-1:-1;;;12763:18:821;;;12756:47;12820:18;;1591:27:57;12503:341:821;1555:74:57;1640:25;1667:22;1704:4;1693:34;;;;;;;;;;;;:::i;:::-;1639:88;;;;1759:34;1774:12;1788:4;;1759:14;:34::i;:::-;1738:56;;1878:14;1840:11;1853:4;;1859:13;1823:50;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1813:61;;;;;;:79;1805:105;;;;-1:-1:-1;;;1805:105:57;;14294:2:821;1805:105:57;;;14276:21:821;14333:2;14313:18;;;14306:30;-1:-1:-1;;;14352:18:821;;;14345:43;14405:18;;1805:105:57;14092:337:821;1805:105:57;1492:425;;;1383:534;;;;;:::o;568:46::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7882:282:25:-;8974:10:14;-1:-1:-1;;;;;7980:24:25;;;7976:54;;8013:17;;-1:-1:-1;;;8013:17:25;;;;;;;;;;;7976:54;8974:10:14;8041:32:25;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8041:42:25;;;;;;;;;;;;:53;;-1:-1:-1;;8041:53:25;;;;;;;;;;8109:48;;540:41:821;;;8041:42:25;;8974:10:14;8109:48:25;;513:18:821;8109:48:25;;;;;;;7882:282;;:::o;5215:533:14:-;245:1:220;548:7;;:19;540:63;;;;-1:-1:-1;;;540:63:220;;14636:2:821;540:63:220;;;14618:21:821;14675:2;14655:18;;;14648:30;14714:33;14694:18;;;14687:61;14765:18;;540:63:220;14434:355:821;540:63:220;245:1;678:7;:18;5351:21:14::1;::::0;5322:13:::1;::::0;:25:::1;::::0;5338:9;;5322:25:::1;:::i;:::-;:50;;5314:93;;;::::0;-1:-1:-1;;;5314:93:14;;15126:2:821;5314:93:14::1;::::0;::::1;15108:21:821::0;15165:2;15145:18;;;15138:30;15204:32;15184:18;;;15177:60;15254:18;;5314:93:14::1;14924:354:821::0;5314:93:14::1;5528:20;5551:44;5574:9;5585;5551:22;:44::i;:::-;5528:67;;5717:12;5706:9;-1:-1:-1::0;;;;;5680:61:14::1;5694:10;-1:-1:-1::0;;;;;5680:61:14::1;;5731:9;5680:61;;;;2515:25:821::0;;2503:2;2488:18;;2369:177;5680:61:14::1;;;;;;;;-1:-1:-1::0;;202:1:220;851:7;:22;-1:-1:-1;5215:533:14:o;696:567:65:-;756:22;812:4;-1:-1:-1;;;;;800:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:34:65;-1:-1:-1;8974:10:14;834:14:65;;922:311;942:15;;;922:311;;;982:11;978:245;;;1026:78;1063:4;1087;;1092:1;1087:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1096:6;1070:33;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1026:28;:78::i;:::-;1013:7;1021:1;1013:10;;;;;;;;:::i;:::-;;;;;;:91;;;;978:245;;;1156:52;1193:4;1200;;1205:1;1200:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1156:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1156:28:65;;-1:-1:-1;;;1156:52:65:i;:::-;1143:7;1151:1;1143:10;;;;;;;;:::i;:::-;;;;;;:65;;;;978:245;959:3;;922:311;;;;1242:14;;696:567;;;;:::o;8869:343:25:-;8992:28;9002:4;9008:2;9012:7;8992:9;:28::i;:::-;9034:15;:2;-1:-1:-1;;;;;9034:13:25;;:15::i;:::-;9030:176;;;9068:56;9099:4;9105:2;9109:7;9118:5;9068:30;:56::i;:::-;9063:143;;9151:40;;-1:-1:-1;;;9151:40:25;;;;;;;;;;;9063:143;8869:343;;;;:::o;1925:410:12:-;1999:13;2025:15;2046:21;2058:8;2046:11;:21::i;:::-;2024:43;;;2077:22;2102:21;2114:8;2102:11;:21::i;:::-;2077:46;;2138:25;2155:7;2138:16;:25::i;:::-;2134:195;;;2210:8;2193:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;2179:46;;;;1925:410;;;:::o;2134:195::-;2287:8;2297:19;:8;:17;:19::i;:::-;2270:47;;;;;;;;;:::i;4168:413::-;4256:25;4301:12;:10;:12::i;:::-;4293:39;;;;-1:-1:-1;;;4293:39:12;;;;;;;:::i;:::-;4343:15;4361:25;4379:6;4361:17;:25::i;:::-;4343:43;;4410:27;4423:7;4432:4;;4410:12;:27::i;:::-;4396:41;;4448:30;4466:7;4448:30;;;;;;;;;;;;:17;:30::i;:::-;4488:33;4500:7;4509:11;4488;:33::i;:::-;4554:6;4537:37;4562:11;4537:37;;;;;;:::i;:::-;;;;;;;;4283:298;4168:413;;;;;:::o;3142:548::-;3297:15;3328:16;;3324:293;;3361:25;;3414:35;;;;3425:5;3414:35;:::i;:::-;3360:89;;;;3467:12;:19;3490:1;3467:24;;:48;;;;-1:-1:-1;3495:20:12;;;3467:48;3463:144;;;3535:57;3577:7;3553:21;;:31;;;;:::i;:::-;3586:5;;3535:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3535:17:12;;-1:-1:-1;;;3535:57:12:i;:::-;3346:271;;3324:293;3634:49;3649:7;3658:17;;3677:5;;3634:14;:49::i;:::-;3627:56;3142:548;-1:-1:-1;;;;;;3142:548:12:o;2409:1283:57:-;2602:11;;2768:4;2762:11;;2862:19;;;2883:2;2858:28;2845:42;;;2933:22;;;2762:11;2585:14;3029:657;3053:6;3049:1;:10;3029:657;;;3135:12;3177:3;;3182:1;3160:24;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3160:24:57;;;;;;;;;3150:35;;3160:24;3150:35;;;;3373:21;;;;;3367:28;3461:13;3631:23;;;;;3624:38;3061:7;;-1:-1:-1;3387:1:57;3061:7;:::i;:::-;;;3029:657;;;;2523:1169;2409:1283;;;;;:::o;565:34:56:-;;;;;;;:::i;9458:172:25:-;9515:4;9578:13;;9568:7;:23;9538:85;;;;-1:-1:-1;;9596:20:25;;;;:11;:20;;;;;:27;-1:-1:-1;;;9596:27:25;;;;9595:28;;9458:172::o;18379:159::-;18459:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18459:29:25;-1:-1:-1;;;;;18459:29:25;;;;;;;;;18503:28;;18459:24;;18503:28;;;;;;;18379:159;;;:::o;8474:115:14:-;8538:4;8575:7;:5;:7::i;:::-;-1:-1:-1;;;;;8561:21:14;:10;-1:-1:-1;;;;;8561:21:14;;8554:28;;8474:115;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;13484:2052:25:-;13564:35;13602:21;13615:7;13602:12;:21::i;:::-;13564:59;;13660:4;-1:-1:-1;;;;;13638:26:25;:13;:18;;;-1:-1:-1;;;;;13638:26:25;;13634:67;;13673:28;;-1:-1:-1;;;13673:28:25;;;;;;;;;;;13634:67;13712:22;8974:10:14;-1:-1:-1;;;;;13738:20:25;;;;:72;;-1:-1:-1;13774:36:25;13791:4;8974:10:14;8230:162:25;:::i;13774:36::-;13738:124;;;-1:-1:-1;8974:10:14;13826:20:25;13838:7;13826:11;:20::i;:::-;-1:-1:-1;;;;;13826:36:25;;13738:124;13712:151;;13879:17;13874:66;;13905:35;;-1:-1:-1;;;13905:35:25;;;;;;;;;;;13874:66;-1:-1:-1;;;;;13954:16:25;;13950:52;;13979:23;;-1:-1:-1;;;13979:23:25;;;;;;;;;;;13950:52;14118:35;14135:1;14139:7;14148:4;14118:8;:35::i;:::-;-1:-1:-1;;;;;14443:18:25;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14443:31:25;;;-1:-1:-1;;;;;14443:31:25;;;-1:-1:-1;;14443:31:25;;;;;;;14488:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14488:29:25;;;;;;;;;;;14566:20;;;:11;:20;;;;;;14600:18;;-1:-1:-1;;;;;;14632:49:25;;;;-1:-1:-1;;;14665:15:25;14632:49;;;;;;;;;;14951:11;;15010:24;;;;;15052:13;;14566:20;;15010:24;;15052:13;15048:377;;15259:13;;15244:11;:28;15240:171;;15296:20;;15364:28;;;;-1:-1:-1;;;;;15338:54:25;-1:-1:-1;;;15338:54:25;-1:-1:-1;;;;;;15338:54:25;;;-1:-1:-1;;;;;15296:20:25;;15338:54;;;;15240:171;14419:1016;;;15469:7;15465:2;-1:-1:-1;;;;;15450:27:25;15459:4;-1:-1:-1;;;;;15450:27:25;-1:-1:-1;;;;;;;;;;;15450:27:25;;;;;;;;;13554:1982;;13484:2052;;;:::o;15913:2355::-;15992:35;16030:21;16043:7;16030:12;:21::i;:::-;16077:18;;15992:59;;-1:-1:-1;16106:284:25;;;;16139:22;8974:10:14;-1:-1:-1;;;;;16165:20:25;;;;:76;;-1:-1:-1;16205:36:25;16222:4;8974:10:14;8230:162:25;:::i;16205:36::-;16165:132;;;-1:-1:-1;8974:10:14;16261:20:25;16273:7;16261:11;:20::i;:::-;-1:-1:-1;;;;;16261:36:25;;16165:132;16139:159;;16318:17;16313:66;;16344:35;;-1:-1:-1;;;16344:35:25;;;;;;;;;;;16313:66;16125:265;16106:284;16513:35;16530:1;16534:7;16543:4;16513:8;:35::i;:::-;-1:-1:-1;;;;;16872:18:25;;;16838:31;16872:18;;;:12;:18;;;;;;;;16904:24;;-1:-1:-1;;;;;;;;;;16904:24:25;;;;;;;;;-1:-1:-1;;;;;;16904:24:25;;;;16942:29;;;;;16927:1;16942:29;;;;;;;;-1:-1:-1;;;;;;16942:29:25;;;;;;;;;;17101:20;;;:11;:20;;;;;;17135;;-1:-1:-1;;;;17202:15:25;17169:49;;;-1:-1:-1;;;17169:49:25;-1:-1:-1;;;;;;17169:49:25;;;;;;;;;;17232:22;-1:-1:-1;;;17232:22:25;;;17520:11;;;17579:24;;;;;17621:13;;16872:18;;17579:24;;17621:13;17617:377;;17828:13;;17813:11;:28;17809:171;;17865:20;;17933:28;;;;-1:-1:-1;;;;;17907:54:25;-1:-1:-1;;;17907:54:25;-1:-1:-1;;;;;;17907:54:25;;;-1:-1:-1;;;;;17865:20:25;;17907:54;;;;17809:171;-1:-1:-1;;18019:35:25;;18046:7;;-1:-1:-1;18042:1:25;;-1:-1:-1;;;;;;18019:35:25;;;-1:-1:-1;;;;;;;;;;;18019:35:25;18042:1;;18019:35;-1:-1:-1;;18237:12:25;:14;;;;;;-1:-1:-1;;15913:2355:25:o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;;;;;;:::i;3509:76::-;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;2515:25:821;;;3689:46:77;;2503:2:821;2488:18;3689:46:77;;;;;;;3408:334;;:::o;4713:1174:25:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;4823:7:25;4921:13;;4914:4;:20;4910:913;;;4958:31;4992:17;;;:11;:17;;;;;;;;;4958:51;;;;;;;;;-1:-1:-1;;;;;4958:51:25;;;;-1:-1:-1;;;4958:51:25;;-1:-1:-1;;;;;4958:51:25;;;;;;;;-1:-1:-1;;;4958:51:25;;;;;;;;;;;;;;5031:774;;5084:14;;-1:-1:-1;;;;;5084:28:25;;5080:107;;5151:9;4713:1174;-1:-1:-1;;;4713:1174:25:o;5080:107::-;-1:-1:-1;;;5547:6:25;5595:17;;;;:11;:17;;;;;;;;;5583:29;;;;;;;;;-1:-1:-1;;;;;5583:29:25;;;;;-1:-1:-1;;;5583:29:25;;-1:-1:-1;;;;;5583:29:25;;;;;;;;-1:-1:-1;;;5583:29:25;;;;;;;;;;;;;5646:28;5642:115;;5717:9;4713:1174;-1:-1:-1;;;4713:1174:25:o;5642:115::-;5504:279;;;4936:887;4910:913;5849:31;;-1:-1:-1;;;5849:31:25;;;;;;;;;;;1273:185:56;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1398:4;1384:11;:18;;;;;;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4619:332:77:-;4736:6;4729:4;:13;4725:69;;;4758:25;;-1:-1:-1;;;4758:25:77;;;;;;;:::i;4725:69::-;4836:49;;;;;;;;-1:-1:-1;;;;;4836:49:77;;;;;;;;;;;;;-1:-1:-1;4804:29:77;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4804:81:77;;;;;;;;;;;-1:-1:-1;4804:81:77;;;;;;;4901:43;;2515:25:821;;;4836:49:77;;4804:29;;4901:43;;2488:18:821;4901:43:77;;;;;;;4619:332;;;:::o;7740:226:14:-;7858:20;7905:13;7928:31;7938:9;7949;7928;:31::i;6671:198:289:-;6754:12;6785:77;6806:6;6814:4;6785:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6778:84;6671:198;-1:-1:-1;;;6671:198:289:o;1405:320::-;-1:-1:-1;;;;;1695:19:289;;:23;;;1405:320::o;19019:650:25:-;19197:72;;-1:-1:-1;;;19197:72:25;;19177:4;;-1:-1:-1;;;;;19197:36:25;;;;;:72;;8974:10:14;;19248:4:25;;19254:7;;19263:5;;19197:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19197:72:25;;;;;;;;-1:-1:-1;;19197:72:25;;;;;;;;;;;;:::i;:::-;;;19193:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19428:6;:13;19445:1;19428:18;19424:229;;19473:40;;-1:-1:-1;;;19473:40:25;;;;;;;;;;;19424:229;19613:6;19607:13;19598:6;19594:2;19590:15;19583:38;19193:470;-1:-1:-1;;;;;;19315:55:25;-1:-1:-1;;;19315:55:25;;-1:-1:-1;19193:470:25;19019:650;;;;;;:::o;2320:471:54:-;2382:15;2399:13;2424:25;2452:17;1785:8;:15;;1711:96;2452:17;2424:45;;2479:24;2506:8;2479:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2530:9;2525:224;2549:17;2545:1;:21;2525:224;;;2605:7;2613:1;2605:10;;;;;;;;:::i;:::-;;;;;;;2594:8;:21;2590:149;;;2643:1;2635:9;;2672:7;2680:1;2672:10;;;;;;;;:::i;:::-;;;;;;;2662:20;;2701:23;;;2320:471;;;:::o;2590:149::-;2568:6;2573:1;2568:6;;:::i;:::-;;;2525:224;;;-1:-1:-1;2759:25:54;;-1:-1:-1;;;2759:25:54;;21712:2:821;2759:25:54;;;21694:21:821;21751:2;21731:18;;;21724:30;-1:-1:-1;;;21770:18:821;;;21763:45;21825:18;;2759:25:54;21510:339:821;2905:390:54;2967:13;2992:25;3020:17;1785:8;:15;;1711:96;3020:17;2992:45;;3047:24;3074:8;3047:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3098:9;3093:161;3117:17;3113:1;:21;3093:161;;;3173:7;3181:1;3173:10;;;;;;;;:::i;:::-;;;;;;;3162:8;:21;3158:86;;;3210:7;:19;3218:7;3226:1;3218:10;;;;;;;;:::i;:::-;;;;;;;3210:19;;;;;;;;;;;3203:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2905:390;;;:::o;3158:86::-;3136:6;3141:1;3136:6;;:::i;:::-;;;3093:161;;303:703:298;359:13;576:5;585:1;576:10;572:51;;-1:-1:-1;;602:10:298;;;;;;;;;;;;-1:-1:-1;;;602:10:298;;;;;303:703::o;572:51::-;647:5;632:12;686:75;693:9;;686:75;;718:8;;;;:::i;:::-;;-1:-1:-1;740:10:298;;-1:-1:-1;748:2:298;740:10;;:::i;:::-;;;686:75;;;770:19;802:6;-1:-1:-1;;;;;792:17:298;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;792:17:298;;770:39;;819:150;826:10;;819:150;;852:11;862:1;852:11;;:::i;:::-;;-1:-1:-1;920:10:298;928:2;920:5;:10;:::i;:::-;907:24;;:2;:24;:::i;:::-;894:39;;877:6;884;877:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;877:56:298;;;;;;;;-1:-1:-1;947:11:298;956:2;947:11;;:::i;:::-;;;819:150;;678:140:57;771:23;;;;:13;:23;;;;;:40;797:14;771:23;:40;:::i;3907:246:54:-;3998:21;;;;:11;:21;;;;;;;;3997:22;3989:47;;;;-1:-1:-1;;;3989:47:54;;23794:2:821;3989:47:54;;;23776:21:821;23833:2;23813:18;;;23806:30;-1:-1:-1;;;23852:18:821;;;23845:42;23904:18;;3989:47:54;23592:336:821;3989:47:54;4046:17;;;;:7;:17;;;;;:28;4066:8;4046:17;:28;:::i;:::-;;4089:57;4109:26;4126:8;4109:16;:26::i;:::-;4089:57;;;24107:25:821;;;24163:2;24148:18;;24141:34;;;24080:18;4089:57:54;23933:248:821;1254:592:63;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:63;;;;;;;:::i;1436:70::-;1520:7;1531:1;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:63;;24388:2:821;1548:15:63;;;24370:21:821;24427:1;24407:18;;;24400:29;-1:-1:-1;;;24445:18:821;;;24438:35;24490:18;;1548:15:63;24186:328:821;1516:58:63;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:63;;-1:-1:-1;;;1669:55:63:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:63;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;9709:102:25:-;9777:27;9787:2;9791:8;9777:27;;;;;;;;;;;;:9;:27::i;7055:325:289:-;7196:12;7221;7235:23;7262:6;-1:-1:-1;;;;;7262:19:289;7282:4;7262:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7220:67;;;;7304:69;7331:6;7339:7;7348:10;7360:12;7304:26;:69::i;3363:459:54:-;3430:7;3449:25;3477:17;1785:8;:15;;1711:96;3477:17;3449:45;;3504:24;3531:8;3504:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3555:9;3550:231;3574:17;3570:1;:21;3550:231;;;3628:7;3636:1;3628:10;;;;;;;;:::i;:::-;;;;;;;3616:8;:22;3612:159;;3662:5;;3658:73;;3698:7;3706:5;3710:1;3706;:5;:::i;:::-;3698:14;;;;;;;;:::i;:::-;;;;;;;3691:21;;;;;3363:459;;;:::o;3658:73::-;-1:-1:-1;3755:1:54;;3363:459;-1:-1:-1;;;;3363:459:54:o;3612:159::-;3593:3;;3550:231;;;-1:-1:-1;3790:25:54;;-1:-1:-1;;;3790:25:54;;25796:2:821;3790:25:54;;;25778:21:821;25835:2;25815:18;;;25808:30;-1:-1:-1;;;25854:18:821;;;25847:45;25909:18;;3790:25:54;25594:339:821;4591:362:54;4741:25;;4805:24;4816:13;4805:8;:24;:::i;:::-;4877:8;:22;;;;;;;;;;;;;-1:-1:-1;4910:16:54;;;:7;4877:22;4910:16;;;;4795:34;;-1:-1:-1;4795:34:54;;-1:-1:-1;4910:36:54;4929:17;4910:16;:36;:::i;:::-;;4591:362;;;;;;:::o;10171:1678:25:-;10259:20;10282:13;-1:-1:-1;;;;;10309:16:25;;10305:48;;10334:19;;-1:-1:-1;;;10334:19:25;;;;;;;;;;;10305:48;10367:8;10379:1;10367:13;10363:44;;10389:18;;-1:-1:-1;;;10389:18:25;;;;;;;;;;;10363:44;-1:-1:-1;;;;;10750:16:25;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;10808:49:25;;-1:-1:-1;;;;;10750:44:25;;;;;;;10808:49;;;-1:-1:-1;;;;;;;;;10750:44:25;;;;;;10808:49;;;;;;;;;;;;;;;;10872:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;10921:66:25;;;-1:-1:-1;;;10971:15:25;10921:66;;;;;;;;;;;;;10872:25;;11065:23;;;;11107:15;;:13;:15::i;:::-;11103:618;;;11142:308;11172:38;;11197:12;;-1:-1:-1;;;;;11172:38:25;;;11189:1;;-1:-1:-1;;;;;;;;;;;11172:38:25;11189:1;;11172:38;11237:69;11276:1;11280:2;11284:14;;;;;;11300:5;11237:30;:69::i;:::-;11232:172;;11341:40;;-1:-1:-1;;;11341:40:25;;;;;;;;;;;11232:172;11445:3;11430:12;:18;11142:308;;11529:12;11512:13;;:29;11508:43;;11543:8;;;11508:43;11103:618;;;11590:117;11620:40;;11645:14;;;;;-1:-1:-1;;;;;11620:40:25;;;11637:1;;-1:-1:-1;;;;;;;;;;;11620:40:25;11637:1;;11620:40;11702:3;11687:12;:18;11590:117;;11103:618;-1:-1:-1;11734:13:25;:28;;;11782:60;;11815:2;11819:12;11833:8;11782:60;:::i;7668:628:289:-;7848:12;7876:7;7872:418;;;7903:10;:17;7924:1;7903:22;7899:286;;8118:18;8129:6;8118:10;:18::i;:::-;8110:60;;;;-1:-1:-1;;;8110:60:289;;26140:2:821;8110:60:289;;;26122:21:821;26179:2;26159:18;;;26152:30;26218:31;26198:18;;;26191:59;26267:18;;8110:60:289;25938:353:821;8110:60:289;-1:-1:-1;8205:10:289;8198:17;;7872:418;8246:33;8254:10;8266:12;8977:17;;:21;8973:379;;9205:10;9199:17;9261:15;9248:10;9244:2;9240:19;9233:44;8973:379;9328:12;9321:20;;-1:-1:-1;;;9321:20:289;;;;;;;;:::i;14:131:821:-;-1:-1:-1;;;;;;88:32:821;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:821;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:821;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:821:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:821;;1348:180;-1:-1:-1;1348:180:821:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:821;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:821:o;2178:186::-;2237:6;2290:2;2278:9;2269:7;2265:23;2261:32;2258:52;;;2306:1;2303;2296:12;2258:52;2329:29;2348:9;2329:29;:::i;2551:328::-;2628:6;2636;2644;2697:2;2685:9;2676:7;2672:23;2668:32;2665:52;;;2713:1;2710;2703:12;2665:52;2736:29;2755:9;2736:29;:::i;:::-;2726:39;;2784:38;2818:2;2807:9;2803:18;2784:38;:::i;:::-;2774:48;;2869:2;2858:9;2854:18;2841:32;2831:42;;2551:328;;;;;:::o;2884:248::-;2952:6;2960;3013:2;3001:9;2992:7;2988:23;2984:32;2981:52;;;3029:1;3026;3019:12;2981:52;-1:-1:-1;;3052:23:821;;;3122:2;3107:18;;;3094:32;;-1:-1:-1;2884:248:821:o;3706:127::-;3767:10;3762:3;3758:20;3755:1;3748:31;3798:4;3795:1;3788:15;3822:4;3819:1;3812:15;3838:275;3909:2;3903:9;3974:2;3955:13;;-1:-1:-1;;3951:27:821;3939:40;;-1:-1:-1;;;;;3994:34:821;;4030:22;;;3991:62;3988:88;;;4056:18;;:::i;:::-;4092:2;4085:22;3838:275;;-1:-1:-1;3838:275:821:o;4118:187::-;4167:4;-1:-1:-1;;;;;4192:6:821;4189:30;4186:56;;;4222:18;;:::i;:::-;-1:-1:-1;4288:2:821;4267:15;-1:-1:-1;;4263:29:821;4294:4;4259:40;;4118:187::o;4310:338::-;4375:5;4404:53;4420:36;4449:6;4420:36;:::i;:::-;4404:53;:::i;:::-;4395:62;;4480:6;4473:5;4466:21;4520:3;4511:6;4506:3;4502:16;4499:25;4496:45;;;4537:1;4534;4527:12;4496:45;4586:6;4581:3;4574:4;4567:5;4563:16;4550:43;4640:1;4633:4;4624:6;4617:5;4613:18;4609:29;4602:40;4310:338;;;;;:::o;4653:451::-;4722:6;4775:2;4763:9;4754:7;4750:23;4746:32;4743:52;;;4791:1;4788;4781:12;4743:52;4831:9;4818:23;-1:-1:-1;;;;;4856:6:821;4853:30;4850:50;;;4896:1;4893;4886:12;4850:50;4919:22;;4972:4;4964:13;;4960:27;-1:-1:-1;4950:55:821;;5001:1;4998;4991:12;4950:55;5024:74;5090:7;5085:2;5072:16;5067:2;5063;5059:11;5024:74;:::i;5109:322::-;5186:6;5194;5202;5255:2;5243:9;5234:7;5230:23;5226:32;5223:52;;;5271:1;5268;5261:12;5223:52;5307:9;5294:23;5284:33;;5336:38;5370:2;5359:9;5355:18;5336:38;:::i;5436:347::-;5487:8;5497:6;5551:3;5544:4;5536:6;5532:17;5528:27;5518:55;;5569:1;5566;5559:12;5518:55;-1:-1:-1;5592:20:821;;-1:-1:-1;;;;;5624:30:821;;5621:50;;;5667:1;5664;5657:12;5621:50;5704:4;5696:6;5692:17;5680:29;;5756:3;5749:4;5740:6;5732;5728:19;5724:30;5721:39;5718:59;;;5773:1;5770;5763:12;5718:59;5436:347;;;;;:::o;5788:477::-;5867:6;5875;5883;5936:2;5924:9;5915:7;5911:23;5907:32;5904:52;;;5952:1;5949;5942:12;5904:52;5988:9;5975:23;5965:33;;6049:2;6038:9;6034:18;6021:32;-1:-1:-1;;;;;6068:6:821;6065:30;6062:50;;;6108:1;6105;6098:12;6062:50;6147:58;6197:7;6188:6;6177:9;6173:22;6147:58;:::i;:::-;5788:477;;6224:8;;-1:-1:-1;6121:84:821;;-1:-1:-1;;;;5788:477:821:o;6493:347::-;6558:6;6566;6619:2;6607:9;6598:7;6594:23;6590:32;6587:52;;;6635:1;6632;6625:12;6587:52;6658:29;6677:9;6658:29;:::i;:::-;6648:39;;6737:2;6726:9;6722:18;6709:32;6784:5;6777:13;6770:21;6763:5;6760:32;6750:60;;6806:1;6803;6796:12;6750:60;6829:5;6819:15;;;6493:347;;;;;:::o;6845:626::-;6942:6;6950;7003:2;6991:9;6982:7;6978:23;6974:32;6971:52;;;7019:1;7016;7009:12;6971:52;7059:9;7046:23;-1:-1:-1;;;;;7129:2:821;7121:6;7118:14;7115:34;;;7145:1;7142;7135:12;7115:34;7183:6;7172:9;7168:22;7158:32;;7228:7;7221:4;7217:2;7213:13;7209:27;7199:55;;7250:1;7247;7240:12;7199:55;7290:2;7277:16;7316:2;7308:6;7305:14;7302:34;;;7332:1;7329;7322:12;7302:34;7385:7;7380:2;7370:6;7367:1;7363:14;7359:2;7355:23;7351:32;7348:45;7345:65;;;7406:1;7403;7396:12;7345:65;7437:2;7429:11;;;;;7459:6;;-1:-1:-1;6845:626:821;;-1:-1:-1;;;;6845:626:821:o;7476:801::-;7636:4;7665:2;7705;7694:9;7690:18;7735:2;7724:9;7717:21;7758:6;7793;7787:13;7824:6;7816;7809:22;7862:2;7851:9;7847:18;7840:25;;7924:2;7914:6;7911:1;7907:14;7896:9;7892:30;7888:39;7874:53;;7962:2;7954:6;7950:15;7983:1;7993:255;8007:6;8004:1;8001:13;7993:255;;;8100:2;8096:7;8084:9;8076:6;8072:22;8068:36;8063:3;8056:49;8128:40;8161:6;8152;8146:13;8128:40;:::i;:::-;8118:50;-1:-1:-1;8226:12:821;;;;8191:15;;;;8029:1;8022:9;7993:255;;;-1:-1:-1;8265:6:821;;7476:801;-1:-1:-1;;;;;;;7476:801:821:o;8282:221::-;8324:5;8377:3;8370:4;8362:6;8358:17;8354:27;8344:55;;8395:1;8392;8385:12;8344:55;8417:80;8493:3;8484:6;8471:20;8464:4;8456:6;8452:17;8417:80;:::i;8508:537::-;8603:6;8611;8619;8627;8680:3;8668:9;8659:7;8655:23;8651:33;8648:53;;;8697:1;8694;8687:12;8648:53;8720:29;8739:9;8720:29;:::i;:::-;8710:39;;8768:38;8802:2;8791:9;8787:18;8768:38;:::i;:::-;8758:48;;8853:2;8842:9;8838:18;8825:32;8815:42;;8908:2;8897:9;8893:18;8880:32;-1:-1:-1;;;;;8927:6:821;8924:30;8921:50;;;8967:1;8964;8957:12;8921:50;8990:49;9031:7;9022:6;9011:9;9007:22;8990:49;:::i;:::-;8980:59;;;8508:537;;;;;;;:::o;9050:786::-;9150:6;9158;9166;9174;9182;9235:2;9223:9;9214:7;9210:23;9206:32;9203:52;;;9251:1;9248;9241:12;9203:52;9287:9;9274:23;9264:33;;9348:2;9337:9;9333:18;9320:32;-1:-1:-1;;;;;9412:2:821;9404:6;9401:14;9398:34;;;9428:1;9425;9418:12;9398:34;9467:58;9517:7;9508:6;9497:9;9493:22;9467:58;:::i;:::-;9544:8;;-1:-1:-1;9441:84:821;-1:-1:-1;9632:2:821;9617:18;;9604:32;;-1:-1:-1;9648:16:821;;;9645:36;;;9677:1;9674;9667:12;9645:36;;9716:60;9768:7;9757:8;9746:9;9742:24;9716:60;:::i;:::-;9050:786;;;;-1:-1:-1;9050:786:821;;-1:-1:-1;9795:8:821;;9690:86;9050:786;-1:-1:-1;;;9050:786:821:o;9841:628::-;9929:6;9937;9945;9998:2;9986:9;9977:7;9973:23;9969:32;9966:52;;;10014:1;10011;10004:12;9966:52;10054:9;10041:23;-1:-1:-1;;;;;10124:2:821;10116:6;10113:14;10110:34;;;10140:1;10137;10130:12;10110:34;10163:49;10204:7;10195:6;10184:9;10180:22;10163:49;:::i;:::-;10153:59;;10265:2;10254:9;10250:18;10237:32;10221:48;;10294:2;10284:8;10281:16;10278:36;;;10310:1;10307;10300:12;10278:36;;10349:60;10401:7;10390:8;10379:9;10375:24;10349:60;:::i;10474:260::-;10542:6;10550;10603:2;10591:9;10582:7;10578:23;10574:32;10571:52;;;10619:1;10616;10609:12;10571:52;10642:29;10661:9;10642:29;:::i;:::-;10632:39;;10690:38;10724:2;10713:9;10709:18;10690:38;:::i;:::-;10680:48;;10474:260;;;;;:::o;10739:380::-;10818:1;10814:12;;;;10861;;;10882:61;;10936:4;10928:6;10924:17;10914:27;;10882:61;10989:2;10981:6;10978:14;10958:18;10955:38;10952:161;;11035:10;11030:3;11026:20;11023:1;11016:31;11070:4;11067:1;11060:15;11098:4;11095:1;11088:15;10952:161;;10739:380;;;:::o;11124:338::-;11326:2;11308:21;;;11365:2;11345:18;;;11338:30;-1:-1:-1;;;11399:2:821;11384:18;;11377:44;11453:2;11438:18;;11124:338::o;11809:127::-;11870:10;11865:3;11861:20;11858:1;11851:31;11901:4;11898:1;11891:15;11925:4;11922:1;11915:15;11941:127;12002:10;11997:3;11993:20;11990:1;11983:31;12033:4;12030:1;12023:15;12057:4;12054:1;12047:15;12073:168;12146:9;;;12177;;12194:15;;;12188:22;;12174:37;12164:71;;12215:18;;:::i;12246:127::-;12307:10;12302:3;12298:20;12295:1;12288:31;12338:4;12335:1;12328:15;12362:4;12359:1;12352:15;12378:120;12418:1;12444;12434:35;;12449:18;;:::i;:::-;-1:-1:-1;12483:9:821;;12378:120::o;12849:717::-;12937:6;12945;12998:2;12986:9;12977:7;12973:23;12969:32;12966:52;;;13014:1;13011;13004:12;12966:52;13047:9;13041:16;-1:-1:-1;;;;;13072:6:821;13069:30;13066:50;;;13112:1;13109;13102:12;13066:50;13135:22;;13188:4;13180:13;;13176:27;-1:-1:-1;13166:55:821;;13217:1;13214;13207:12;13166:55;13246:2;13240:9;13271:49;13287:32;13316:2;13287:32;:::i;13271:49::-;13343:2;13336:5;13329:17;13385:7;13378:4;13373:2;13369;13365:11;13361:22;13358:35;13355:55;;;13406:1;13403;13396:12;13355:55;13419:71;13487:2;13480:4;13473:5;13469:16;13462:4;13458:2;13454:13;13419:71;:::i;:::-;13554:4;13539:20;;;;13533:27;13509:5;;13533:27;;-1:-1:-1;;;;;12849:717:821:o;13571:516::-;13786:3;13824:6;13818:13;13840:66;13899:6;13894:3;13887:4;13879:6;13875:17;13840:66;:::i;:::-;13928:16;;13981:6;13973;13928:16;13953:35;14007:18;;;14034;;;-1:-1:-1;14076:4:821;14068:13;;13571:516;-1:-1:-1;;;13571:516:821:o;14794:125::-;14859:9;;;14880:10;;;14877:36;;;14893:18;;:::i;15283:521::-;15360:4;15366:6;15426:11;15413:25;15520:2;15516:7;15505:8;15489:14;15485:29;15481:43;15461:18;15457:68;15447:96;;15539:1;15536;15529:12;15447:96;15566:33;;15618:20;;;-1:-1:-1;;;;;;15650:30:821;;15647:50;;;15693:1;15690;15683:12;15647:50;15726:4;15714:17;;-1:-1:-1;15757:14:821;15753:27;;;15743:38;;15740:58;;;15794:1;15791;15784:12;15809:352;16020:6;16012;16007:3;15994:33;16115:2;16086:15;;;;-1:-1:-1;;;;;;16082:45:821;16046:16;;16071:57;;;16152:2;16144:11;;15809:352;-1:-1:-1;15809:352:821:o;16166:452::-;16398:3;16436:6;16430:13;16452:66;16511:6;16506:3;16499:4;16491:6;16487:17;16452:66;:::i;:::-;-1:-1:-1;;;16540:16:821;;16565:18;;;-1:-1:-1;16610:1:821;16599:13;;16166:452;-1:-1:-1;16166:452:821:o;16623:496::-;16802:3;16840:6;16834:13;16856:66;16915:6;16910:3;16903:4;16895:6;16891:17;16856:66;:::i;:::-;16985:13;;16944:16;;;;17007:70;16985:13;16944:16;17054:4;17042:17;;17007:70;:::i;:::-;17093:20;;16623:496;-1:-1:-1;;;;16623:496:821:o;17124:388::-;17201:6;17209;17262:2;17250:9;17241:7;17237:23;17233:32;17230:52;;;17278:1;17275;17268:12;17230:52;17318:9;17305:23;-1:-1:-1;;;;;17343:6:821;17340:30;17337:50;;;17383:1;17380;17373:12;17337:50;17406:49;17447:7;17438:6;17427:9;17423:22;17406:49;:::i;:::-;17396:59;17502:2;17487:18;;;;17474:32;;-1:-1:-1;;;;17124:388:821:o;17517:313::-;17728:6;17720;17715:3;17702:33;17754:16;;;17779:18;;;17821:2;17813:11;;17517:313;-1:-1:-1;17517:313:821:o;17835:339::-;18037:2;18019:21;;;18076:2;18056:18;;;18049:30;-1:-1:-1;;;18110:2:821;18095:18;;18088:45;18165:2;18150:18;;17835:339::o;18305:543::-;18407:2;18402:3;18399:11;18396:446;;;18443:1;18467:5;18464:1;18457:16;18511:4;18508:1;18498:18;18581:2;18569:10;18565:19;18562:1;18558:27;18552:4;18548:38;18617:4;18605:10;18602:20;18599:47;;;-1:-1:-1;18640:4:821;18599:47;18695:2;18690:3;18686:12;18683:1;18679:20;18673:4;18669:31;18659:41;;18750:82;18768:2;18761:5;18758:13;18750:82;;;18813:17;;;18794:1;18783:13;18750:82;;;18754:3;;;18305:543;;;:::o;19024:1345::-;19150:3;19144:10;-1:-1:-1;;;;;19169:6:821;19166:30;19163:56;;;19199:18;;:::i;:::-;19228:97;19318:6;19278:38;19310:4;19304:11;19278:38;:::i;:::-;19272:4;19228:97;:::i;:::-;19380:4;;19437:2;19426:14;;19454:1;19449:663;;;;20156:1;20173:6;20170:89;;;-1:-1:-1;20225:19:821;;;20219:26;20170:89;-1:-1:-1;;18981:1:821;18977:11;;;18973:24;18969:29;18959:40;19005:1;19001:11;;;18956:57;20272:81;;19419:944;;19449:663;18252:1;18245:14;;;18289:4;18276:18;;-1:-1:-1;;19485:20:821;;;19603:236;19617:7;19614:1;19611:14;19603:236;;;19706:19;;;19700:26;19685:42;;19798:27;;;;19766:1;19754:14;;;;19633:19;;19603:236;;;19607:3;19867:6;19858:7;19855:19;19852:201;;;19928:19;;;19922:26;-1:-1:-1;;20011:1:821;20007:14;;;20023:3;20003:24;19999:37;19995:42;19980:58;19965:74;;19852:201;-1:-1:-1;;;;;20099:1:821;20083:14;;;20079:22;20066:36;;-1:-1:-1;19024:1345:821:o;20374:383::-;20571:2;20560:9;20553:21;20534:4;20597:45;20638:2;20627:9;20623:18;20615:6;20597:45;:::i;:::-;20690:9;20682:6;20678:22;20673:2;20662:9;20658:18;20651:50;20718:33;20744:6;20736;20718:33;:::i;:::-;20710:41;20374:383;-1:-1:-1;;;;;20374:383:821:o;20762:489::-;-1:-1:-1;;;;;21031:15:821;;;21013:34;;21083:15;;21078:2;21063:18;;21056:43;21130:2;21115:18;;21108:34;;;21178:3;21173:2;21158:18;;21151:31;;;20956:4;;21199:46;;21225:19;;21217:6;21199:46;:::i;21256:249::-;21325:6;21378:2;21366:9;21357:7;21353:23;21349:32;21346:52;;;21394:1;21391;21384:12;21346:52;21426:9;21420:16;21445:30;21469:5;21445:30;:::i;21854:135::-;21893:3;21914:17;;;21911:43;;21934:18;;:::i;:::-;-1:-1:-1;21981:1:821;21970:13;;21854:135::o;21994:128::-;22061:9;;;22082:11;;;22079:37;;;22096:18;;:::i;22127:112::-;22159:1;22185;22175:35;;22190:18;;:::i;:::-;-1:-1:-1;22224:9:821;;22127:112::o;24519:267::-;24608:6;24603:3;24596:19;24660:6;24653:5;24646:4;24641:3;24637:14;24624:43;-1:-1:-1;24712:1:821;24687:16;;;24705:4;24683:27;;;24676:38;;;;24768:2;24747:15;;;-1:-1:-1;;24743:29:821;24734:39;;;24730:50;;24519:267::o;24791:506::-;25034:6;25023:9;25016:25;25077:2;25072;25061:9;25057:18;25050:30;24997:4;25103:62;25161:2;25150:9;25146:18;25138:6;25130;25103:62;:::i;:::-;25213:9;25205:6;25201:22;25196:2;25185:9;25181:18;25174:50;25241;25284:6;25276;25268;25241:50;:::i;:::-;25233:58;24791:506;-1:-1:-1;;;;;;;;24791:506:821:o;25302:287::-;25431:3;25469:6;25463:13;25485:66;25544:6;25539:3;25532:4;25524:6;25520:17;25485:66;:::i;:::-;25567:16;;;;;25302:287;-1:-1:-1;;25302:287:821:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "batchFrozen(uint256)": "83040532",
    "burn(uint256)": "42966c68",
    "claim(address,uint256)": "aad3ec96",
    "contractURI()": "e8a3d485",
    "encryptDecrypt(bytes,bytes)": "e7150322",
    "encryptedData(uint256)": "a05112fc",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRevealURI(uint256,bytes)": "9fc4d68f",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isEncryptedBatch(uint256)": "492e224b",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToClaim()": "acd083f8",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "reveal(uint256,bytes)": "ce805642",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256)": "2f92023a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"TokenURIRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encryptDecrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"getRevealURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"isEncryptedBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"DefaultRoyalty(address,uint256)\":{\"details\":\"Emitted when royalty info is updated.\"},\"MetadataFrozen()\":{\"details\":\"This event emits when the metadata of all tokens are frozen. While not currently supported by marketplaces, this event allows future indexing if desired.\"},\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"},\"RoyaltyForToken(uint256,address,uint256)\":{\"details\":\"Emitted when royalty recipient for tokenId is set\"},\"TokenURIRevealed(uint256,string)\":{\"details\":\"Emitted when tokens are revealed.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed\"},\"TokensLazyMinted(uint256,uint256,string,bytes)\":{\"details\":\"Emitted when tokens are lazy minted.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"claim(address,uint256)\":{\"details\":\"Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.                   The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of NFTs to mint.\",\"_receiver\":\"The recipient of the NFT to mint.\"}},\"encryptDecrypt(bytes,bytes)\":{\"details\":\"Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\",\"params\":{\"data\":\"Bytes of data to encrypt/decrypt.\",\"key\":\"Secure key used by caller for encryption/decryption.\"},\"returns\":{\"result\":\" Output after encryption/decryption of given data.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRevealURI(uint256,bytes)\":{\"details\":\"Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.\",\"params\":{\"_batchId\":\"ID of the batch for which URI is being revealed.\",\"_key\":\"Secure key used by caller/admin for encryption of baseURI.\"},\"returns\":{\"revealedURI\":\"Decrypted base URI.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isEncryptedBatch(uint256)\":{\"details\":\"Returns `true` if `_batchId`'s base URI is encrypted.\",\"params\":{\"_batchId\":\"ID of a batch of NFTs.\"}},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"reveal(uint256,bytes)\":{\"params\":{\"_index\":\"The ID for the batch of delayed-reveal NFTs to reveal.\",\"_key\":\"The key with which the base URI for the relevant batch of NFTs was encrypted.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"verifyClaim(address,uint256)\":{\"details\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"claim(address,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"encryptDecrypt(bytes,bytes)\":{\"notice\":\"Encrypt/decrypt data on chain.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRevealURI(uint256,bytes)\":{\"notice\":\"Returns revealed URI for a batch of NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isEncryptedBatch(uint256)\":{\"notice\":\"Returns whether the relvant batch of NFTs is subject to a delayed reveal.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToClaim()\":{\"notice\":\"The tokenId assigned to the next new NFT to be claimed.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"reveal(uint256,bytes)\":{\"notice\":\"Lets an authorized address reveal a batch of delayed reveal NFTs.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"},\"verifyClaim(address,uint256)\":{\"notice\":\"Checks a request to claim NFTs against a custom condition.\"}},\"notice\":\"BASE:      ERC721LazyMint      EXTENSION: DelayedReveal  The `ERC721DelayedReveal` contract uses the `ERC721LazyMint` contract, along with `DelayedReveal` extension.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed  NFTs, after the fact.  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721DelayedReveal.sol\":\"ERC721DelayedReveal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC721DelayedReveal.sol\":{\"keccak256\":\"0x15da7aaeebea825b46cae80bbef0e42dac5b2b37956bac522dcd6996f49ad71e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ec3479b1c2dfc2b82781c36179ee1e7be93ac60c27c8ff9488c251e5f134cea4\",\"dweb:/ipfs/QmRMpC2Jq3onRcBWAASE9Gjz9NnUUSKV48SxFfooMYwyRU\"]},\"contracts/base/ERC721LazyMint.sol\":{\"keccak256\":\"0xff15a7554830e2a0fcb20a11cb4356accee6b5773f5bd29281613466c4cf6ef9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://17d569dd1c7ea52ec448f975b35d3804f8bf9c0dff62eca82c43542916a8efb0\",\"dweb:/ipfs/QmbBcHyCbDE65DMqqMKeFmAAenQvViAA6RsMqQUkEDgCSn\"]},\"contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"contracts/eip/ERC721AVirtualApprove.sol\":{\"keccak256\":\"0x6547a787b5ac8032fddbee8d058d520ef8da5c5808b89d47b11bd5ff27d32afc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fde24fcc2b49c889651aac81bff6f1fa8786e55a6f65c1e3f052666dff71143\",\"dweb:/ipfs/QmW6YArfXiUzQsDZHoTeWsZYkrMmAVTpttnEsmYGqPzQWx\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6\",\"dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT\"]},\"contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf\",\"dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj\"]},\"contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"contracts/eip/interface/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365\",\"dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DelayedReveal.sol\":{\"keccak256\":\"0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3\",\"dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e\",\"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95\",\"dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox\"]},\"contracts/extension/interface/IClaimableERC721.sol\":{\"keccak256\":\"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929\",\"dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDelayedReveal.sol\":{\"keccak256\":\"0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138\",\"dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e\",\"dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd\"]},\"contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/lib/Address.sol\":{\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5\",\"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokenURIRevealed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "key",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "encryptDecrypt",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "result",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "encryptedData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRevealURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isEncryptedBatch",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reveal",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "claim(address,uint256)": {
            "details": "Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.                   The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of NFTs to mint.",
              "_receiver": "The recipient of the NFT to mint."
            }
          },
          "encryptDecrypt(bytes,bytes)": {
            "details": "Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain",
            "params": {
              "data": "Bytes of data to encrypt/decrypt.",
              "key": "Secure key used by caller for encryption/decryption."
            },
            "returns": {
              "result": " Output after encryption/decryption of given data."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRevealURI(uint256,bytes)": {
            "details": "Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.",
            "params": {
              "_batchId": "ID of the batch for which URI is being revealed.",
              "_key": "Secure key used by caller/admin for encryption of baseURI."
            },
            "returns": {
              "revealedURI": "Decrypted base URI."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "isEncryptedBatch(uint256)": {
            "details": "Returns `true` if `_batchId`'s base URI is encrypted.",
            "params": {
              "_batchId": "ID of a batch of NFTs."
            }
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "The encrypted base URI + provenance hash for the batch of NFTs being lazy minted."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "reveal(uint256,bytes)": {
            "params": {
              "_index": "The ID for the batch of delayed-reveal NFTs to reveal.",
              "_key": "The key with which the base URI for the relevant batch of NFTs was encrypted."
            }
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "verifyClaim(address,uint256)": {
            "details": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "claim(address,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "encryptDecrypt(bytes,bytes)": {
            "notice": "Encrypt/decrypt data on chain."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRevealURI(uint256,bytes)": {
            "notice": "Returns revealed URI for a batch of NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isEncryptedBatch(uint256)": {
            "notice": "Returns whether the relvant batch of NFTs is subject to a delayed reveal."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToClaim()": {
            "notice": "The tokenId assigned to the next new NFT to be claimed."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "reveal(uint256,bytes)": {
            "notice": "Lets an authorized address reveal a batch of delayed reveal NFTs."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          },
          "verifyClaim(address,uint256)": {
            "notice": "Checks a request to claim NFTs against a custom condition."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "lib/sstore2/=lib/dynamic-contracts/lib/sstore2/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC721DelayedReveal.sol": "ERC721DelayedReveal"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC721DelayedReveal.sol": {
        "keccak256": "0x15da7aaeebea825b46cae80bbef0e42dac5b2b37956bac522dcd6996f49ad71e",
        "urls": [
          "bzz-raw://ec3479b1c2dfc2b82781c36179ee1e7be93ac60c27c8ff9488c251e5f134cea4",
          "dweb:/ipfs/QmRMpC2Jq3onRcBWAASE9Gjz9NnUUSKV48SxFfooMYwyRU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/base/ERC721LazyMint.sol": {
        "keccak256": "0xff15a7554830e2a0fcb20a11cb4356accee6b5773f5bd29281613466c4cf6ef9",
        "urls": [
          "bzz-raw://17d569dd1c7ea52ec448f975b35d3804f8bf9c0dff62eca82c43542916a8efb0",
          "dweb:/ipfs/QmbBcHyCbDE65DMqqMKeFmAAenQvViAA6RsMqQUkEDgCSn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "contracts/eip/ERC721AVirtualApprove.sol": {
        "keccak256": "0x6547a787b5ac8032fddbee8d058d520ef8da5c5808b89d47b11bd5ff27d32afc",
        "urls": [
          "bzz-raw://1fde24fcc2b49c889651aac81bff6f1fa8786e55a6f65c1e3f052666dff71143",
          "dweb:/ipfs/QmW6YArfXiUzQsDZHoTeWsZYkrMmAVTpttnEsmYGqPzQWx"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa",
        "urls": [
          "bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6",
          "dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC721.sol": {
        "keccak256": "0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea",
        "urls": [
          "bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf",
          "dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345",
        "urls": [
          "bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365",
          "dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DelayedReveal.sol": {
        "keccak256": "0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242",
        "urls": [
          "bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3",
          "dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
        "urls": [
          "bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
          "dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501",
        "urls": [
          "bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95",
          "dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC721.sol": {
        "keccak256": "0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960",
        "urls": [
          "bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929",
          "dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDelayedReveal.sol": {
        "keccak256": "0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123",
        "urls": [
          "bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138",
          "dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d",
        "urls": [
          "bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e",
          "dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/lib/Address.sol": {
        "keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
        "urls": [
          "bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
          "dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/Strings.sol": {
        "keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
        "urls": [
          "bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
          "dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC721DelayedReveal.sol",
    "id": 4248,
    "exportedSymbols": {
      "Address": [
        64760
      ],
      "BatchMintMetadata": [
        17840
      ],
      "Context": [
        49279
      ],
      "ContractMetadata": [
        18093
      ],
      "DelayedReveal": [
        18252
      ],
      "ERC721A": [
        12340
      ],
      "ERC721DelayedReveal": [
        4247
      ],
      "ERC721LazyMint": [
        5085
      ],
      "IClaimableERC721": [
        33045
      ],
      "IContractMetadata": [
        33084
      ],
      "IDelayedReveal": [
        33115
      ],
      "IERC165": [
        13945
      ],
      "IERC2981": [
        14089
      ],
      "ILazyMint": [
        33463
      ],
      "IMulticall": [
        33577
      ],
      "IOwnable": [
        33834
      ],
      "IRoyalty": [
        34061
      ],
      "LazyMint": [
        20828
      ],
      "Multicall": [
        21206
      ],
      "Ownable": [
        21764
      ],
      "ReentrancyGuard": [
        47279
      ],
      "Royalty": [
        23031
      ],
      "Strings": [
        66084
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4736:12",
    "nodes": [
      {
        "id": 4050,
        "nodeType": "PragmaDirective",
        "src": "39:23:12",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 4051,
        "nodeType": "ImportDirective",
        "src": "86:30:12",
        "nodes": [],
        "absolutePath": "contracts/base/ERC721LazyMint.sol",
        "file": "./ERC721LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4248,
        "sourceUnit": 5086,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4052,
        "nodeType": "ImportDirective",
        "src": "118:40:12",
        "nodes": [],
        "absolutePath": "contracts/extension/DelayedReveal.sol",
        "file": "../extension/DelayedReveal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4248,
        "sourceUnit": 18253,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4247,
        "nodeType": "ContractDefinition",
        "src": "979:3795:12",
        "nodes": [
          {
            "id": 4060,
            "nodeType": "UsingForDirective",
            "src": "1047:26:12",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 4058,
              "name": "Strings",
              "nameLocations": [
                "1053:7:12"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66084,
              "src": "1053:7:12"
            },
            "typeName": {
              "id": 4059,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1065:7:12",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 4081,
            "nodeType": "FunctionDefinition",
            "src": "1258:253:12",
            "nodes": [],
            "body": {
              "id": 4080,
              "nodeType": "Block",
              "src": "1509:2:12",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4073,
                    "name": "_defaultAdmin",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4062,
                    "src": "1446:13:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 4074,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4064,
                    "src": "1461:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4075,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4066,
                    "src": "1468:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4076,
                    "name": "_royaltyRecipient",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4068,
                    "src": "1477:17:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 4077,
                    "name": "_royaltyBps",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4070,
                    "src": "1496:11:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  }
                ],
                "id": 4078,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4072,
                  "name": "ERC721LazyMint",
                  "nameLocations": [
                    "1431:14:12"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5085,
                  "src": "1431:14:12"
                },
                "nodeType": "ModifierInvocation",
                "src": "1431:77:12"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 4071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4062,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1287:13:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "1279:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4061,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1279:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4064,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1324:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "1310:19:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4063,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1310:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4066,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1353:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "1339:21:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4065,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1339:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4068,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "1378:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "1370:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4067,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1370:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4070,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "1413:11:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "1405:19:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4069,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1405:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1269:161:12"
            },
            "returnParameters": {
              "id": 4079,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1509:0:12"
            },
            "scope": 4247,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4129,
            "nodeType": "FunctionDefinition",
            "src": "1925:410:12",
            "nodes": [],
            "body": {
              "id": 4128,
              "nodeType": "Block",
              "src": "2014:321:12",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4091,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4091,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "2033:7:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 4128,
                      "src": "2025:15:12",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4090,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2025:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 4095,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4093,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4084,
                        "src": "2058:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4092,
                      "name": "_getBatchId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17631,
                      "src": "2046:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256,uint256)"
                      }
                    },
                    "id": 4094,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2046:21:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2024:43:12"
                },
                {
                  "assignments": [
                    4097
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4097,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "2091:8:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 4128,
                      "src": "2077:22:12",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 4096,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2077:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4101,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4099,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4084,
                        "src": "2114:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4098,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17682,
                      "src": "2102:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 4100,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2102:21:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2077:46:12"
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 4103,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4091,
                        "src": "2155:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4102,
                      "name": "isEncryptedBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18251,
                      "src": "2138:16:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 4104,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2138:25:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4126,
                    "nodeType": "Block",
                    "src": "2242:87:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4119,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4097,
                                  "src": "2287:8:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 4120,
                                      "name": "_tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4084,
                                      "src": "2297:8:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4121,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2306:8:12",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 65898,
                                    "src": "2297:17:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4122,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2297:19:12",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 4117,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2270:3:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4118,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2274:12:12",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2270:16:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4123,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2270:47:12",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4116,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2263:6:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4115,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2263:6:12",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4124,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2263:55:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4089,
                        "id": 4125,
                        "nodeType": "Return",
                        "src": "2256:62:12"
                      }
                    ]
                  },
                  "id": 4127,
                  "nodeType": "IfStatement",
                  "src": "2134:195:12",
                  "trueBody": {
                    "id": 4114,
                    "nodeType": "Block",
                    "src": "2165:71:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4109,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4097,
                                  "src": "2210:8:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 4110,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2220:3:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  }
                                ],
                                "expression": {
                                  "id": 4107,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2193:3:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4108,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2197:12:12",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2193:16:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2193:31:12",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4106,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2186:6:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4105,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2186:6:12",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4112,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2186:39:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4089,
                        "id": 4113,
                        "nodeType": "Return",
                        "src": "2179:46:12"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              4915
            ],
            "documentation": {
              "id": 4082,
              "nodeType": "StructuredDocumentation",
              "src": "1703:217:12",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "1934:8:12",
            "overrides": {
              "id": 4086,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1981:8:12"
            },
            "parameters": {
              "id": 4085,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4084,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1951:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4129,
                  "src": "1943:16:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4083,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1943:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1942:18:12"
            },
            "returnParameters": {
              "id": 4089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4088,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4129,
                  "src": "1999:13:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4087,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1999:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1998:15:12"
            },
            "scope": 4247,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4187,
            "nodeType": "FunctionDefinition",
            "src": "3142:548:12",
            "nodes": [],
            "body": {
              "id": 4186,
              "nodeType": "Block",
              "src": "3314:376:12",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4142,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4136,
                        "src": "3328:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "id": 4143,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3334:6:12",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3328:12:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 4144,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3343:1:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3328:16:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4178,
                  "nodeType": "IfStatement",
                  "src": "3324:293:12",
                  "trueBody": {
                    "id": 4177,
                    "nodeType": "Block",
                    "src": "3346:271:12",
                    "statements": [
                      {
                        "assignments": [
                          4147,
                          4149
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4147,
                            "mutability": "mutable",
                            "name": "encryptedURI",
                            "nameLocation": "3374:12:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 4177,
                            "src": "3361:25:12",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 4146,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3361:5:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 4149,
                            "mutability": "mutable",
                            "name": "provenanceHash",
                            "nameLocation": "3396:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 4177,
                            "src": "3388:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 4148,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3388:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4159,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 4152,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4136,
                              "src": "3425:5:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "components": [
                                {
                                  "id": 4154,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3433:5:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 4153,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3433:5:12",
                                    "typeDescriptions": {}
                                  }
                                },
                                {
                                  "id": 4156,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3440:7:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 4155,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3440:7:12",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "id": 4157,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3432:16:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            ],
                            "expression": {
                              "id": 4150,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "3414:3:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 4151,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3418:6:12",
                            "memberName": "decode",
                            "nodeType": "MemberAccess",
                            "src": "3414:10:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4158,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3414:35:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes32_$",
                            "typeString": "tuple(bytes memory,bytes32)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3360:89:12"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 4167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4163,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4160,
                                "name": "encryptedURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4147,
                                "src": "3467:12:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 4161,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3480:6:12",
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "3467:19:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 4162,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3490:1:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3467:24:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 4166,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 4164,
                              "name": "provenanceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4149,
                              "src": "3495:14:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "",
                              "id": 4165,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3513:2:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            },
                            "src": "3495:20:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3467:48:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4176,
                        "nodeType": "IfStatement",
                        "src": "3463:144:12",
                        "trueBody": {
                          "id": 4175,
                          "nodeType": "Block",
                          "src": "3517:90:12",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 4171,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 4169,
                                      "name": "nextTokenIdToLazyMint",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 20762,
                                      "src": "3553:21:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "id": 4170,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4132,
                                      "src": "3577:7:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "3553:31:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 4172,
                                    "name": "_data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4136,
                                    "src": "3586:5:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "id": 4168,
                                  "name": "_setEncryptedData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 18119,
                                  "src": "3535:17:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                                    "typeString": "function (uint256,bytes memory)"
                                  }
                                },
                                "id": 4173,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3535:57:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4174,
                              "nodeType": "ExpressionStatement",
                              "src": "3535:57:12"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4181,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4132,
                        "src": "3649:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4182,
                        "name": "_baseURIForTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4134,
                        "src": "3658:17:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4183,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4136,
                        "src": "3677:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "id": 4179,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3634:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721DelayedReveal_$4247_$",
                          "typeString": "type(contract super ERC721DelayedReveal)"
                        }
                      },
                      "id": 4180,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3640:8:12",
                      "memberName": "lazyMint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 20821,
                      "src": "3634:14:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function (uint256,string calldata,bytes calldata) returns (uint256)"
                      }
                    },
                    "id": 4184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3634:49:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4141,
                  "id": 4185,
                  "nodeType": "Return",
                  "src": "3627:56:12"
                }
              ]
            },
            "baseFunctions": [
              20821
            ],
            "documentation": {
              "id": 4130,
              "nodeType": "StructuredDocumentation",
              "src": "2523:614:12",
              "text": "  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\n  @param _amount           The number of NFTs to lazy mint.\n  @param _baseURIForTokens The placeholder base URI for the 'n' number of NFTs being lazy minted, where the\n                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\n  @param _data             The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\n  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together."
            },
            "functionSelector": "d37c353b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "3151:8:12",
            "overrides": {
              "id": 4138,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3279:8:12"
            },
            "parameters": {
              "id": 4137,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4132,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "3177:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4187,
                  "src": "3169:15:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4131,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3169:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4134,
                  "mutability": "mutable",
                  "name": "_baseURIForTokens",
                  "nameLocation": "3210:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4187,
                  "src": "3194:33:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4133,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3194:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4136,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "3252:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4187,
                  "src": "3237:20:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4135,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3237:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3159:104:12"
            },
            "returnParameters": {
              "id": 4141,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4140,
                  "mutability": "mutable",
                  "name": "batchId",
                  "nameLocation": "3305:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4187,
                  "src": "3297:15:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4139,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3297:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3296:17:12"
            },
            "scope": 4247,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4233,
            "nodeType": "FunctionDefinition",
            "src": "4168:413:12",
            "nodes": [],
            "body": {
              "id": 4232,
              "nodeType": "Block",
              "src": "4283:298:12",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 4199,
                          "name": "_canReveal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4246,
                          "src": "4301:10:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 4200,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4301:12:12",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a6564",
                        "id": 4201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4315:16:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        },
                        "value": "Not authorized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        }
                      ],
                      "id": 4198,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4293:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4202,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4293:39:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4203,
                  "nodeType": "ExpressionStatement",
                  "src": "4293:39:12"
                },
                {
                  "assignments": [
                    4205
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4205,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "4351:7:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 4232,
                      "src": "4343:15:12",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4204,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4343:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4209,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4207,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4190,
                        "src": "4379:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4206,
                      "name": "getBatchIdAtIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17570,
                      "src": "4361:17:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 4208,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4361:25:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4343:43:12"
                },
                {
                  "expression": {
                    "id": 4215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4210,
                      "name": "revealedURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4196,
                      "src": "4396:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4212,
                          "name": "batchId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4205,
                          "src": "4423:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 4213,
                          "name": "_key",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4192,
                          "src": "4432:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        ],
                        "id": 4211,
                        "name": "getRevealURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18185,
                        "src": "4410:12:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_string_memory_ptr_$",
                          "typeString": "function (uint256,bytes calldata) view returns (string memory)"
                        }
                      },
                      "id": 4214,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4410:27:12",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "4396:41:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 4216,
                  "nodeType": "ExpressionStatement",
                  "src": "4396:41:12"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4218,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4205,
                        "src": "4466:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 4219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4475:2:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 4217,
                      "name": "_setEncryptedData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18119,
                      "src": "4448:17:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bytes memory)"
                      }
                    },
                    "id": 4220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4448:30:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4221,
                  "nodeType": "ExpressionStatement",
                  "src": "4448:30:12"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4223,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4205,
                        "src": "4500:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4224,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4196,
                        "src": "4509:11:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4222,
                      "name": "_setBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17769,
                      "src": "4488:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 4225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4488:33:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4226,
                  "nodeType": "ExpressionStatement",
                  "src": "4488:33:12"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4228,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4190,
                        "src": "4554:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4229,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4196,
                        "src": "4562:11:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4227,
                      "name": "TokenURIRevealed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33094,
                      "src": "4537:16:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 4230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4537:37:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4231,
                  "nodeType": "EmitStatement",
                  "src": "4532:42:12"
                }
              ]
            },
            "baseFunctions": [
              33104
            ],
            "documentation": {
              "id": 4188,
              "nodeType": "StructuredDocumentation",
              "src": "3880:283:12",
              "text": "  @notice       Lets an authorized address reveal a batch of delayed reveal NFTs.\n  @param _index The ID for the batch of delayed-reveal NFTs to reveal.\n  @param _key   The key with which the base URI for the relevant batch of NFTs was encrypted."
            },
            "functionSelector": "ce805642",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "reveal",
            "nameLocation": "4177:6:12",
            "overrides": {
              "id": 4194,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4238:8:12"
            },
            "parameters": {
              "id": 4193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4190,
                  "mutability": "mutable",
                  "name": "_index",
                  "nameLocation": "4192:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4233,
                  "src": "4184:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4189,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4184:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4192,
                  "mutability": "mutable",
                  "name": "_key",
                  "nameLocation": "4215:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4233,
                  "src": "4200:19:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4191,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4200:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4183:37:12"
            },
            "returnParameters": {
              "id": 4197,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4196,
                  "mutability": "mutable",
                  "name": "revealedURI",
                  "nameLocation": "4270:11:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4233,
                  "src": "4256:25:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4195,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4256:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4255:27:12"
            },
            "scope": 4247,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 4246,
            "nodeType": "FunctionDefinition",
            "src": "4668:104:12",
            "nodes": [],
            "body": {
              "id": 4245,
              "nodeType": "Block",
              "src": "4727:45:12",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4243,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4239,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4744:3:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4240,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4748:6:12",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4744:10:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4241,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4758:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4242,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4758:7:12",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4744:21:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4238,
                  "id": 4244,
                  "nodeType": "Return",
                  "src": "4737:28:12"
                }
              ]
            },
            "documentation": {
              "id": 4234,
              "nodeType": "StructuredDocumentation",
              "src": "4587:76:12",
              "text": "@dev Checks whether NFTs can be revealed in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canReveal",
            "nameLocation": "4677:10:12",
            "parameters": {
              "id": 4235,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4687:2:12"
            },
            "returnParameters": {
              "id": 4238,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4237,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4246,
                  "src": "4721:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4236,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4721:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4720:6:12"
            },
            "scope": 4247,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4054,
              "name": "ERC721LazyMint",
              "nameLocations": [
                "1011:14:12"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5085,
              "src": "1011:14:12"
            },
            "id": 4055,
            "nodeType": "InheritanceSpecifier",
            "src": "1011:14:12"
          },
          {
            "baseName": {
              "id": 4056,
              "name": "DelayedReveal",
              "nameLocations": [
                "1027:13:12"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18252,
              "src": "1027:13:12"
            },
            "id": 4057,
            "nodeType": "InheritanceSpecifier",
            "src": "1027:13:12"
          }
        ],
        "canonicalName": "ERC721DelayedReveal",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4053,
          "nodeType": "StructuredDocumentation",
          "src": "160:817:12",
          "text": "      BASE:      ERC721LazyMint\n      EXTENSION: DelayedReveal\n  The `ERC721DelayedReveal` contract uses the `ERC721LazyMint` contract, along with `DelayedReveal` extension.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs.\n  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed\n  NFTs, after the fact.\n  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4247,
          18252,
          33115,
          5085,
          47279,
          33045,
          20828,
          17840,
          33463,
          23031,
          34061,
          14089,
          21764,
          33834,
          21206,
          33577,
          18093,
          33084,
          12340,
          14292,
          14338,
          14221,
          7939,
          13945,
          49279
        ],
        "name": "ERC721DelayedReveal",
        "nameLocation": "988:19:12",
        "scope": 4248,
        "usedErrors": [
          14233,
          14236,
          14239,
          14242,
          14245,
          14248,
          14251,
          14254,
          14257,
          14260,
          14263,
          14266,
          14269
        ],
        "usedEvents": [
          14120,
          14129,
          14138,
          17530,
          17537,
          33028,
          33083,
          33094,
          33450,
          33833,
          34051,
          34060
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 12
}