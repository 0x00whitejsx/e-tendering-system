{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b506040516200345238038062003452833981016040819052620000349162000268565b83836000620000448382620003ac565b506001620000538282620003ac565b50506001600d5550620000668562000086565b6200007b826001600160801b038316620000d8565b505050505062000478565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b612710811115620001215760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b604482015260640160405180910390fd5b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b80516001600160a01b03811681146200019b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001c857600080fd5b81516001600160401b0380821115620001e557620001e5620001a0565b604051601f8301601f19908116603f01168101908282118183101715620002105762000210620001a0565b81604052838152602092508660208588010111156200022e57600080fd5b600091505b8382101562000252578582018301518183018401529082019062000233565b6000602085830101528094505050505092915050565b600080600080600060a086880312156200028157600080fd5b6200028c8662000183565b60208701519095506001600160401b0380821115620002aa57600080fd5b620002b889838a01620001b6565b95506040880151915080821115620002cf57600080fd5b50620002de88828901620001b6565b935050620002ef6060870162000183565b60808701519092506001600160801b03811681146200030d57600080fd5b809150509295509295909350565b600181811c908216806200033057607f821691505b6020821081036200035157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a7576000816000526020600020601f850160051c81016020861015620003825750805b601f850160051c820191505b81811015620003a3578281556001016200038e565b5050505b505050565b81516001600160401b03811115620003c857620003c8620001a0565b620003e081620003d984546200031b565b8462000357565b602080601f831160018114620004185760008415620003ff5750858301515b600019600386901b1c1916600185901b178555620003a3565b600085815260208120601f198616915b82811015620004495788860151825594840194600190910190840162000428565b5085821015620004685787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612fca80620004886000396000f3fe60806040526004361061015c5760003560e01c8062fdd58e1461016157806301ffc9a7146101ac57806306fdde03146101dc5780630e89341c146101fe57806313af40351461021e5780632419f51b146102405780632a55205a146102605780632bc43fd91461029f5780632eb2c2d6146102b25780633b1475a7146102d25780634bbb1abf146102e75780634cc157df146103075780634e1273f414610349578063600dd5ea1461037657806363b45e2d146103965780636b20c454146103ab57806383040532146103cb5780638da5cb5b146103fb578063938e3d7b1461042857806395d89b41146104485780639bcf7a151461045d578063a22cb4651461047d578063ac9650d81461049d578063b24f2d39146104ca578063bd85b039146104f5578063d37c353b14610522578063e8a3d48514610542578063e985e9c514610557578063f242432a14610592578063f5298aca146105b2575b600080fd5b34801561016d57600080fd5b5061019961017c36600461212a565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156101b857600080fd5b506101cc6101c736600461216a565b6105d2565b60405190151581526020016101a3565b3480156101e857600080fd5b506101f161063f565b6040516101a391906121d7565b34801561020a57600080fd5b506101f16102193660046121ea565b6106cd565b34801561022a57600080fd5b5061023e610239366004612203565b61070e565b005b34801561024c57600080fd5b5061019961025b3660046121ea565b610747565b34801561026c57600080fd5b5061028061027b36600461221e565b6107b5565b604080516001600160a01b0390931683526020830191909152016101a3565b61023e6102ad366004612240565b6107f2565b3480156102be57600080fd5b5061023e6102cd3660046123cb565b6108ea565b3480156102de57600080fd5b50600c54610199565b3480156102f357600080fd5b5061023e610302366004612240565b505050565b34801561031357600080fd5b506103276103223660046121ea565b610954565b604080516001600160a01b03909316835261ffff9091166020830152016101a3565b34801561035557600080fd5b50610369610364366004612474565b6109bf565b6040516101a3919061257a565b34801561038257600080fd5b5061023e61039136600461212a565b610acb565b3480156103a257600080fd5b50600954610199565b3480156103b757600080fd5b5061023e6103c636600461258d565b610afd565b3480156103d757600080fd5b506101cc6103e63660046121ea565b600b6020526000908152604090205460ff1681565b34801561040757600080fd5b50610410610c51565b6040516001600160a01b0390911681526020016101a3565b34801561043457600080fd5b5061023e610443366004612600565b610c60565b34801561045457600080fd5b506101f1610c8d565b34801561046957600080fd5b5061023e610478366004612648565b610c9a565b34801561048957600080fd5b5061023e61049836600461267d565b610cc9565b3480156104a957600080fd5b506104bd6104b83660046126b9565b610d81565b6040516101a3919061272d565b3480156104d657600080fd5b506007546001600160a01b03811690600160a01b900461ffff16610327565b34801561050157600080fd5b506101996105103660046121ea565b600e6020526000908152604090205481565b34801561052e57600080fd5b5061019961053d3660046127d9565b610ee6565b34801561054e57600080fd5b506101f1610ff3565b34801561056357600080fd5b506101cc610572366004612852565b600360209081526000928352604080842090915290825290205460ff1681565b34801561059e57600080fd5b5061023e6105ad366004612885565b611000565b3480156105be57600080fd5b5061023e6105cd366004612240565b611063565b60006301ffc9a760e01b6001600160e01b0319831614806106035750636cdb3d1360e11b6001600160e01b03198316145b8061061e57506303a24d0760e21b6001600160e01b03198316145b8061063957506001600160e01b0319821663152a902d60e11b145b92915050565b6000805461064c906128e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610678906128e9565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b505050505081565b606060006106da8361110a565b9050806106e6846112a6565b6040516020016106f7929190612923565b604051602081830303815290604052915050919050565b6107166113ae565b61073b5760405162461bcd60e51b815260040161073290612952565b60405180910390fd5b610744816113d1565b50565b600061075260095490565b82106107905760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610732565b600982815481106107a3576107a361297a565b90600052602060002001549050919050565b6000806000806107c486610954565b90945084925061ffff1690506127106107dd82876129a6565b6107e791906129d3565b925050509250929050565b6002600d54036108445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600d55600c5482106108875760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b6044820152606401610732565b610892838383611423565b81836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de6846040516108d891815260200190565b60405180910390a450506001600d5550565b6001600160a01b03851633148061092457506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b6109405760405162461bcd60e51b8152600401610732906129e7565b61094d858585858561143e565b5050505050565b6000818152600860209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561099b57805160208201516109b5565b6007546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b606081518351146109e25760405162461bcd60e51b815260040161073290612a13565b600083516001600160401b038111156109fd576109fd612273565b604051908082528060200260200182016040528015610a26578160200160208202803683370190505b50905060005b8451811015610ac35760026000868381518110610a4b57610a4b61297a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858381518110610a8757610a8761297a565b6020026020010151815260200190815260200160002054828281518110610ab057610ab061297a565b6020908102919091010152600101610a2c565b509392505050565b610ad36113ae565b610aef5760405162461bcd60e51b815260040161073290612952565b610af982826115f2565b5050565b336001600160a01b038416811480610b3a57506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b610b565760405162461bcd60e51b815260040161073290612a3c565b8151835114610b995760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610732565b60005b8351811015610c3f57828181518110610bb757610bb761297a565b602002602001015160026000876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110610bf857610bf861297a565b60200260200101518152602001908152602001600020541015610c2d5760405162461bcd60e51b815260040161073290612a67565b610c38600182612a98565b9050610b9c565b50610c4b848484611676565b50505050565b6006546001600160a01b031690565b610c686113ae565b610c845760405162461bcd60e51b815260040161073290612952565b61074481611800565b6001805461064c906128e9565b610ca26113ae565b610cbe5760405162461bcd60e51b815260040161073290612952565b6103028383836118dc565b336001600160a01b0383168103610d135760405162461bcd60e51b815260206004820152600e60248201526d20a8282927ab24a723afa9a2a62360911b6044820152606401610732565b6001600160a01b03818116600081815260036020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b6060816001600160401b03811115610d9b57610d9b612273565b604051908082528060200260200182016040528015610dce57816020015b6060815260200190600190039081610db95790505b509050336000805b84811015610edd578115610e5557610e3330878784818110610dfa57610dfa61297a565b9050602002810190610e0c9190612aab565b86604051602001610e1f93929190612af1565b60405160208183030381529060405261197b565b848281518110610e4557610e4561297a565b6020026020010181905250610ed5565b610eb730878784818110610e6b57610e6b61297a565b9050602002810190610e7d9190612aab565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197b92505050565b848281518110610ec957610ec961297a565b60200260200101819052505b600101610dd6565b50505092915050565b6000610ef06113ae565b610f0c5760405162461bcd60e51b815260040161073290612952565b85600003610f445760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b6044820152606401610732565b6000600c549050610f8c818888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119a792505050565b600c919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001610fc28a84612a98565b610fcc9190612b12565b88888888604051610fe1959493929190612b4e565b60405180910390a25095945050505050565b6005805461064c906128e9565b6001600160a01b03851633148061103a57506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b6110565760405162461bcd60e51b8152600401610732906129e7565b61094d8585858585611a0b565b336001600160a01b0384168114806110a057506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b6110bc5760405162461bcd60e51b815260040161073290612a3c565b6001600160a01b03841660009081526002602090815260408083208684529091529020548211156110ff5760405162461bcd60e51b815260040161073290612a67565b610c4b848484611b37565b6060600061111760095490565b90506000600980548060200260200160405190810160405280929190818152602001828054801561116757602002820191906000526020600020905b815481526020019060010190808311611153575b5050505050905060005b8281101561126b5781818151811061118b5761118b61297a565b602002602001015185101561125957600a60008383815181106111b0576111b061297a565b6020026020010151815260200190815260200160002080546111d1906128e9565b80601f01602080910402602001604051908101604052809291908181526020018280546111fd906128e9565b801561124a5780601f1061121f5761010080835404028352916020019161124a565b820191906000526020600020905b81548152906001019060200180831161122d57829003601f168201915b50505050509350505050919050565b611264600182612a98565b9050611171565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610732565b6060816000036112cd5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112f757806112e181612b87565b91506112f09050600a836129d3565b91506112d1565b6000816001600160401b0381111561131157611311612273565b6040519080825280601f01601f19166020018201604052801561133b576020820181803683370190505b5090505b84156113a657611350600183612b12565b915061135d600a86612ba0565b611368906030612a98565b60f81b81838151811061137d5761137d61297a565b60200101906001600160f81b031916908160001a90535061139f600a866129d3565b945061133f565b949350505050565b60006113b8610c51565b6001600160a01b0316336001600160a01b031614905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b61030283838360405180602001604052806000815250611c29565b815183511461145f5760405162461bcd60e51b815260040161073290612a13565b6001600160a01b0384166114855760405162461bcd60e51b815260040161073290612bb4565b33611494818787878787611ce1565b60005b84518110156115845760008582815181106114b4576114b461297a565b6020026020010151905060008583815181106114d2576114d261297a565b6020908102919091018101516001600160a01b038b1660009081526002835260408082208683529093529190912054909150818110156115245760405162461bcd60e51b815260040161073290612bda565b6001600160a01b03808b16600090815260026020818152604080842088855282528084208787039055938d16835290815282822086835290529081208054849290611570908490612a98565b909155505060019093019250611497915050565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115d4929190612c04565b60405180910390a46115ea818787878787611ddb565b505050505050565b6127108111156116145760405162461bcd60e51b815260040161073290612c32565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b6001600160a01b03831661169c5760405162461bcd60e51b815260040161073290612c5b565b80518251146116bd5760405162461bcd60e51b815260040161073290612a13565b60003390506116e081856000868660405180602001604052806000815250611ce1565b60005b83518110156117a15760008482815181106117005761170061297a565b60200260200101519050600084838151811061171e5761171e61297a565b6020908102919091018101516001600160a01b03891660009081526002835260408082208683529093529190912054909150818110156117705760405162461bcd60e51b815260040161073290612bda565b6001600160a01b038816600090815260026020908152604080832095835294905292909220910390556001016116e3565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516117f2929190612c04565b60405180910390a450505050565b60006005805461180f906128e9565b80601f016020809104026020016040519081016040528092919081815260200182805461183b906128e9565b80156118885780601f1061185d57610100808354040283529160200191611888565b820191906000526020600020905b81548152906001019060200180831161186b57829003601f168201915b50505050509050816005908161189e9190612ccb565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516118d0929190612d8a565b60405180910390a15050565b6127108111156118fe5760405162461bcd60e51b815260040161073290612c32565b6040805180820182526001600160a01b038481168083526020808401868152600089815260088352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d9101610d74565b60606119a08383604051806060016040528060278152602001612f6e60279139611f0c565b9392505050565b6000806119b48486612a98565b60098054600181019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018190556000818152600a60205260409020909250829150611a028482612ccb565b50935093915050565b6001600160a01b038416611a315760405162461bcd60e51b815260040161073290612bb4565b33611a50818787611a4188611f84565b611a4a88611f84565b87611ce1565b6001600160a01b038616600090815260026020908152604080832087845290915290205483811015611a945760405162461bcd60e51b815260040161073290612bda565b6001600160a01b0380881660009081526002602081815260408084208a855282528084208987039055938a16835290815282822088835290529081208054869290611ae0908490612a98565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020612f4e833981519152910160405180910390a4611b2e828888888888611fcf565b50505050505050565b6001600160a01b038316611b5d5760405162461bcd60e51b815260040161073290612c5b565b33611b8c81856000611b6e87611f84565b611b7787611f84565b60405180602001604052806000815250611ce1565b6001600160a01b038416600090815260026020908152604080832086845290915290205482811015611bd05760405162461bcd60e51b815260040161073290612bda565b6001600160a01b0385811660008181526002602090815260408083208984528252808320888703905580518981529182018890529193861691600080516020612f4e833981519152910160405180910390a45050505050565b6001600160a01b038416611c4f5760405162461bcd60e51b815260040161073290612bb4565b33611c6081600087611a4188611f84565b6001600160a01b038516600090815260026020908152604080832087845290915281208054859290611c93908490612a98565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020612f4e833981519152910160405180910390a461094d81600087878787611fcf565b6001600160a01b038516611d5f5760005b8351811015611d5d57828181518110611d0d57611d0d61297a565b6020026020010151600e6000868481518110611d2b57611d2b61297a565b602002602001015181526020019081526020016000206000828254611d509190612a98565b9091555050600101611cf2565b505b6001600160a01b0384166115ea5760005b8351811015611b2e57828181518110611d8b57611d8b61297a565b6020026020010151600e6000868481518110611da957611da961297a565b602002602001015181526020019081526020016000206000828254611dce9190612b12565b9091555050600101611d70565b6001600160a01b0384163b156115ea5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e1f9089908990889088908890600401612daf565b6020604051808303816000875af1925050508015611e5a575060408051601f3d908101601f19168201909252611e5791810190612e01565b60015b611edc57611e66612e1e565b806308c379a003611e9f5750611e7a612e3a565b80611e855750611ea1565b8060405162461bcd60e51b815260040161073291906121d7565b505b60405162461bcd60e51b815260206004820152601060248201526f10a2a92198989a9aa922a1a2a4ab22a960811b6044820152606401610732565b6001600160e01b0319811663bc197c8160e01b14611b2e5760405162461bcd60e51b815260040161073290612ec3565b6060600080856001600160a01b031685604051611f299190612eec565b600060405180830381855af49150503d8060008114611f64576040519150601f19603f3d011682016040523d82523d6000602084013e611f69565b606091505b5091509150611f7a8683838761208a565b9695505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611fbe57611fbe61297a565b602090810291909101015292915050565b6001600160a01b0384163b156115ea5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906120139089908990889088908890600401612f08565b6020604051808303816000875af192505050801561204e575060408051601f3d908101601f1916820190925261204b91810190612e01565b60015b61205a57611e66612e1e565b6001600160e01b0319811663f23a6e6160e01b14611b2e5760405162461bcd60e51b815260040161073290612ec3565b606083156120f95782516000036120f2576001600160a01b0385163b6120f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610732565b50816113a6565b6113a68383815115611e855781518083602001fd5b80356001600160a01b038116811461212557600080fd5b919050565b6000806040838503121561213d57600080fd5b6121468361210e565b946020939093013593505050565b6001600160e01b03198116811461074457600080fd5b60006020828403121561217c57600080fd5b81356119a081612154565b60005b838110156121a257818101518382015260200161218a565b50506000910152565b600081518084526121c3816020860160208601612187565b601f01601f19169290920160200192915050565b6020815260006119a060208301846121ab565b6000602082840312156121fc57600080fd5b5035919050565b60006020828403121561221557600080fd5b6119a08261210e565b6000806040838503121561223157600080fd5b50508035926020909101359150565b60008060006060848603121561225557600080fd5b61225e8461210e565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156122ae576122ae612273565b6040525050565b60006001600160401b038211156122ce576122ce612273565b5060051b60200190565b600082601f8301126122e957600080fd5b813560206122f6826122b5565b6040516123038282612289565b80915083815260208101915060208460051b87010193508684111561232757600080fd5b602086015b84811015612343578035835291830191830161232c565b509695505050505050565b60006001600160401b0383111561236757612367612273565b60405161237e601f8501601f191660200182612289565b80915083815284848401111561239357600080fd5b83836020830137600060208583010152509392505050565b600082601f8301126123bc57600080fd5b6119a08383356020850161234e565b600080600080600060a086880312156123e357600080fd5b6123ec8661210e565b94506123fa6020870161210e565b935060408601356001600160401b038082111561241657600080fd5b61242289838a016122d8565b9450606088013591508082111561243857600080fd5b61244489838a016122d8565b9350608088013591508082111561245a57600080fd5b50612467888289016123ab565b9150509295509295909350565b6000806040838503121561248757600080fd5b82356001600160401b038082111561249e57600080fd5b818501915085601f8301126124b257600080fd5b813560206124bf826122b5565b6040516124cc8282612289565b83815260059390931b85018201928281019150898411156124ec57600080fd5b948201945b83861015612511576125028661210e565b825294820194908201906124f1565b9650508601359250508082111561252757600080fd5b50612534858286016122d8565b9150509250929050565b60008151808452602080850194506020840160005b8381101561256f57815187529582019590820190600101612553565b509495945050505050565b6020815260006119a0602083018461253e565b6000806000606084860312156125a257600080fd5b6125ab8461210e565b925060208401356001600160401b03808211156125c757600080fd5b6125d3878388016122d8565b935060408601359150808211156125e957600080fd5b506125f6868287016122d8565b9150509250925092565b60006020828403121561261257600080fd5b81356001600160401b0381111561262857600080fd5b8201601f8101841361263957600080fd5b6113a68482356020840161234e565b60008060006060848603121561265d57600080fd5b8335925061266d6020850161210e565b9150604084013590509250925092565b6000806040838503121561269057600080fd5b6126998361210e565b9150602083013580151581146126ae57600080fd5b809150509250929050565b600080602083850312156126cc57600080fd5b82356001600160401b03808211156126e357600080fd5b818501915085601f8301126126f757600080fd5b81358181111561270657600080fd5b8660208260051b850101111561271b57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561278457603f198886030184526127728583516121ab565b94509285019290850190600101612756565b5092979650505050505050565b60008083601f8401126127a357600080fd5b5081356001600160401b038111156127ba57600080fd5b6020830191508360208285010111156127d257600080fd5b9250929050565b6000806000806000606086880312156127f157600080fd5b8535945060208601356001600160401b038082111561280f57600080fd5b61281b89838a01612791565b9096509450604088013591508082111561283457600080fd5b5061284188828901612791565b969995985093965092949392505050565b6000806040838503121561286557600080fd5b61286e8361210e565b915061287c6020840161210e565b90509250929050565b600080600080600060a0868803121561289d57600080fd5b6128a68661210e565b94506128b46020870161210e565b9350604086013592506060860135915060808601356001600160401b038111156128dd57600080fd5b612467888289016123ab565b600181811c908216806128fd57607f821691505b60208210810361291d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351612935818460208801612187565b835190830190612949818360208801612187565b01949350505050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761063957610639612990565b634e487b7160e01b600052601260045260246000fd5b6000826129e2576129e26129bd565b500490565b6020808252601290820152710853d5d3915497d3d497d054141493d5915160721b604082015260600190565b6020808252600f908201526e0988a9c8ea890be9a92a69a82a8869608b1b604082015260600190565b6020808252601190820152702ab730b8383937bb32b21031b0b63632b960791b604082015260600190565b602080825260179082015276139bdd08195b9bdd59da081d1bdad95b9cc81bdddb9959604a1b604082015260600190565b8082018082111561063957610639612990565b6000808335601e19843603018112612ac257600080fd5b8301803591506001600160401b03821115612adc57600080fd5b6020019150368190038213156127d257600080fd5b8284823760609190911b6001600160601b0319169101908152601401919050565b8181038181111561063957610639612990565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000612b68606083018688612b25565b8281036040840152612b7b818587612b25565b98975050505050505050565b600060018201612b9957612b99612990565b5060010190565b600082612baf57612baf6129bd565b500690565b6020808252600c908201526b2a27afad22a927afa0a2222960a11b604082015260600190565b60208082526010908201526f125394d551919250d251539517d0905360821b604082015260600190565b604081526000612c17604083018561253e565b8281036020840152612c29818561253e565b95945050505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6020808252600e908201526d232927a6afad22a927afa0a2222960911b604082015260600190565b601f821115610302576000816000526020600020601f850160051c81016020861015612cac5750805b601f850160051c820191505b818110156115ea57828155600101612cb8565b81516001600160401b03811115612ce457612ce4612273565b612cf881612cf284546128e9565b84612c83565b602080601f831160018114612d2d5760008415612d155750858301515b600019600386901b1c1916600185901b1785556115ea565b600085815260208120601f198616915b82811015612d5c57888601518255948401946001909101908401612d3d565b5085821015612d7a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000612d9d60408301856121ab565b8281036020840152612c2981856121ab565b6001600160a01b0386811682528516602082015260a060408201819052600090612ddb9083018661253e565b8281036060840152612ded818661253e565b90508281036080840152612b7b81856121ab565b600060208284031215612e1357600080fd5b81516119a081612154565b600060033d1115612e375760046000803e5060005160e01c5b90565b600060443d1015612e485790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612e7757505050505090565b8285019150815181811115612e8f5750505050505090565b843d8701016020828501011115612ea95750505050505090565b612eb860208286010187612289565b509095945050505050565b6020808252600f908201526e1513d2d15394d7d491529150d51151608a1b604082015260600190565b60008251612efe818460208701612187565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612f42908301846121ab565b97965050505050505056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220cee55bd75d42488b76b41e08ace519f409f4a708200622c0381000888ce2a48264736f6c63430008170033",
    "sourceMap": "1704:9885:3:-:0;;;2947:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3128:5;3135:7;1083:4:20;:12;3128:5:3;1083:4:20;:12;:::i;:::-;-1:-1:-1;1105:6:20;:16;1114:7;1105:6;:16;:::i;:::-;-1:-1:-1;;202:1:220;307:7;:22;-1:-1:-1;3154:26:3::1;3166:13:::0;3154:11:::1;:26::i;:::-;3190:56;3215:17:::0;-1:-1:-1;;;;;3190:56:3;::::1;:24;:56::i;:::-;2947:306:::0;;;;;1704:9885;;1421:172:70;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;4865:2:821;3549:25:77;;;4847:21:821;4904:2;4884:18;;;4877:30;-1:-1:-1;;;4923:18:821;;;4916:45;4978:18;;3549:25:77;;;;;;;3509:76;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;5153:25:821;;;3689:46:77;;5141:2:821;5126:18;3689:46:77;;;;;;;3408:334;;:::o;14:177:821:-;93:13;;-1:-1:-1;;;;;135:31:821;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:844;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:821;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:821;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;914:3;907:4;902:2;894:6;890:15;886:26;883:35;880:55;;;931:1;928;921:12;880:55;953:1;944:10;;963:133;977:2;974:1;971:9;963:133;;;1065:14;;;1061:23;;1055:30;1034:14;;;1030:23;;1023:63;988:10;;;;963:133;;;1140:1;1133:4;1128:2;1120:6;1116:15;1112:26;1105:37;1160:6;1151:15;;;;;;328:844;;;;:::o;1177:901::-;1303:6;1311;1319;1327;1335;1388:3;1376:9;1367:7;1363:23;1359:33;1356:53;;;1405:1;1402;1395:12;1356:53;1428:40;1458:9;1428:40;:::i;:::-;1512:2;1497:18;;1491:25;1418:50;;-1:-1:-1;;;;;;1565:14:821;;;1562:34;;;1592:1;1589;1582:12;1562:34;1615:61;1668:7;1659:6;1648:9;1644:22;1615:61;:::i;:::-;1605:71;;1722:2;1711:9;1707:18;1701:25;1685:41;;1751:2;1741:8;1738:16;1735:36;;;1767:1;1764;1757:12;1735:36;;1790:63;1845:7;1834:8;1823:9;1819:24;1790:63;:::i;:::-;1780:73;;;1872:49;1917:2;1906:9;1902:18;1872:49;:::i;:::-;1964:3;1949:19;;1943:26;1862:59;;-1:-1:-1;;;;;;1998:31:821;;1988:42;;1978:70;;2044:1;2041;2034:12;1978:70;2067:5;2057:15;;;1177:901;;;;;;;;:::o;2083:380::-;2162:1;2158:12;;;;2205;;;2226:61;;2280:4;2272:6;2268:17;2258:27;;2226:61;2333:2;2325:6;2322:14;2302:18;2299:38;2296:161;;2379:10;2374:3;2370:20;2367:1;2360:31;2414:4;2411:1;2404:15;2442:4;2439:1;2432:15;2296:161;;2083:380;;;:::o;2594:543::-;2696:2;2691:3;2688:11;2685:446;;;2732:1;2756:5;2753:1;2746:16;2800:4;2797:1;2787:18;2870:2;2858:10;2854:19;2851:1;2847:27;2841:4;2837:38;2906:4;2894:10;2891:20;2888:47;;;-1:-1:-1;2929:4:821;2888:47;2984:2;2979:3;2975:12;2972:1;2968:20;2962:4;2958:31;2948:41;;3039:82;3057:2;3050:5;3047:13;3039:82;;;3102:17;;;3083:1;3072:13;3039:82;;;3043:3;;;2685:446;2594:543;;;:::o;3313:1345::-;3433:10;;-1:-1:-1;;;;;3455:30:821;;3452:56;;;3488:18;;:::i;:::-;3517:97;3607:6;3567:38;3599:4;3593:11;3567:38;:::i;:::-;3561:4;3517:97;:::i;:::-;3669:4;;3726:2;3715:14;;3743:1;3738:663;;;;4445:1;4462:6;4459:89;;;-1:-1:-1;4514:19:821;;;4508:26;4459:89;-1:-1:-1;;3270:1:821;3266:11;;;3262:24;3258:29;3248:40;3294:1;3290:11;;;3245:57;4561:81;;3708:944;;3738:663;2541:1;2534:14;;;2578:4;2565:18;;-1:-1:-1;;3774:20:821;;;3892:236;3906:7;3903:1;3900:14;3892:236;;;3995:19;;;3989:26;3974:42;;4087:27;;;;4055:1;4043:14;;;;3922:19;;3892:236;;;3896:3;4156:6;4147:7;4144:19;4141:201;;;4217:19;;;4211:26;-1:-1:-1;;4300:1:821;4296:14;;;4312:3;4292:24;4288:37;4284:42;4269:58;4254:74;;4141:201;-1:-1:-1;;;;;4388:1:821;4372:14;;;4368:22;4355:36;;-1:-1:-1;3313:1345:821:o;5007:177::-;1704:9885:3;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361061015c5760003560e01c8062fdd58e1461016157806301ffc9a7146101ac57806306fdde03146101dc5780630e89341c146101fe57806313af40351461021e5780632419f51b146102405780632a55205a146102605780632bc43fd91461029f5780632eb2c2d6146102b25780633b1475a7146102d25780634bbb1abf146102e75780634cc157df146103075780634e1273f414610349578063600dd5ea1461037657806363b45e2d146103965780636b20c454146103ab57806383040532146103cb5780638da5cb5b146103fb578063938e3d7b1461042857806395d89b41146104485780639bcf7a151461045d578063a22cb4651461047d578063ac9650d81461049d578063b24f2d39146104ca578063bd85b039146104f5578063d37c353b14610522578063e8a3d48514610542578063e985e9c514610557578063f242432a14610592578063f5298aca146105b2575b600080fd5b34801561016d57600080fd5b5061019961017c36600461212a565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156101b857600080fd5b506101cc6101c736600461216a565b6105d2565b60405190151581526020016101a3565b3480156101e857600080fd5b506101f161063f565b6040516101a391906121d7565b34801561020a57600080fd5b506101f16102193660046121ea565b6106cd565b34801561022a57600080fd5b5061023e610239366004612203565b61070e565b005b34801561024c57600080fd5b5061019961025b3660046121ea565b610747565b34801561026c57600080fd5b5061028061027b36600461221e565b6107b5565b604080516001600160a01b0390931683526020830191909152016101a3565b61023e6102ad366004612240565b6107f2565b3480156102be57600080fd5b5061023e6102cd3660046123cb565b6108ea565b3480156102de57600080fd5b50600c54610199565b3480156102f357600080fd5b5061023e610302366004612240565b505050565b34801561031357600080fd5b506103276103223660046121ea565b610954565b604080516001600160a01b03909316835261ffff9091166020830152016101a3565b34801561035557600080fd5b50610369610364366004612474565b6109bf565b6040516101a3919061257a565b34801561038257600080fd5b5061023e61039136600461212a565b610acb565b3480156103a257600080fd5b50600954610199565b3480156103b757600080fd5b5061023e6103c636600461258d565b610afd565b3480156103d757600080fd5b506101cc6103e63660046121ea565b600b6020526000908152604090205460ff1681565b34801561040757600080fd5b50610410610c51565b6040516001600160a01b0390911681526020016101a3565b34801561043457600080fd5b5061023e610443366004612600565b610c60565b34801561045457600080fd5b506101f1610c8d565b34801561046957600080fd5b5061023e610478366004612648565b610c9a565b34801561048957600080fd5b5061023e61049836600461267d565b610cc9565b3480156104a957600080fd5b506104bd6104b83660046126b9565b610d81565b6040516101a3919061272d565b3480156104d657600080fd5b506007546001600160a01b03811690600160a01b900461ffff16610327565b34801561050157600080fd5b506101996105103660046121ea565b600e6020526000908152604090205481565b34801561052e57600080fd5b5061019961053d3660046127d9565b610ee6565b34801561054e57600080fd5b506101f1610ff3565b34801561056357600080fd5b506101cc610572366004612852565b600360209081526000928352604080842090915290825290205460ff1681565b34801561059e57600080fd5b5061023e6105ad366004612885565b611000565b3480156105be57600080fd5b5061023e6105cd366004612240565b611063565b60006301ffc9a760e01b6001600160e01b0319831614806106035750636cdb3d1360e11b6001600160e01b03198316145b8061061e57506303a24d0760e21b6001600160e01b03198316145b8061063957506001600160e01b0319821663152a902d60e11b145b92915050565b6000805461064c906128e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610678906128e9565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b505050505081565b606060006106da8361110a565b9050806106e6846112a6565b6040516020016106f7929190612923565b604051602081830303815290604052915050919050565b6107166113ae565b61073b5760405162461bcd60e51b815260040161073290612952565b60405180910390fd5b610744816113d1565b50565b600061075260095490565b82106107905760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610732565b600982815481106107a3576107a361297a565b90600052602060002001549050919050565b6000806000806107c486610954565b90945084925061ffff1690506127106107dd82876129a6565b6107e791906129d3565b925050509250929050565b6002600d54036108445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600d55600c5482106108875760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b6044820152606401610732565b610892838383611423565b81836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de6846040516108d891815260200190565b60405180910390a450506001600d5550565b6001600160a01b03851633148061092457506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b6109405760405162461bcd60e51b8152600401610732906129e7565b61094d858585858561143e565b5050505050565b6000818152600860209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561099b57805160208201516109b5565b6007546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b606081518351146109e25760405162461bcd60e51b815260040161073290612a13565b600083516001600160401b038111156109fd576109fd612273565b604051908082528060200260200182016040528015610a26578160200160208202803683370190505b50905060005b8451811015610ac35760026000868381518110610a4b57610a4b61297a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858381518110610a8757610a8761297a565b6020026020010151815260200190815260200160002054828281518110610ab057610ab061297a565b6020908102919091010152600101610a2c565b509392505050565b610ad36113ae565b610aef5760405162461bcd60e51b815260040161073290612952565b610af982826115f2565b5050565b336001600160a01b038416811480610b3a57506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b610b565760405162461bcd60e51b815260040161073290612a3c565b8151835114610b995760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610732565b60005b8351811015610c3f57828181518110610bb757610bb761297a565b602002602001015160026000876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110610bf857610bf861297a565b60200260200101518152602001908152602001600020541015610c2d5760405162461bcd60e51b815260040161073290612a67565b610c38600182612a98565b9050610b9c565b50610c4b848484611676565b50505050565b6006546001600160a01b031690565b610c686113ae565b610c845760405162461bcd60e51b815260040161073290612952565b61074481611800565b6001805461064c906128e9565b610ca26113ae565b610cbe5760405162461bcd60e51b815260040161073290612952565b6103028383836118dc565b336001600160a01b0383168103610d135760405162461bcd60e51b815260206004820152600e60248201526d20a8282927ab24a723afa9a2a62360911b6044820152606401610732565b6001600160a01b03818116600081815260036020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b6060816001600160401b03811115610d9b57610d9b612273565b604051908082528060200260200182016040528015610dce57816020015b6060815260200190600190039081610db95790505b509050336000805b84811015610edd578115610e5557610e3330878784818110610dfa57610dfa61297a565b9050602002810190610e0c9190612aab565b86604051602001610e1f93929190612af1565b60405160208183030381529060405261197b565b848281518110610e4557610e4561297a565b6020026020010181905250610ed5565b610eb730878784818110610e6b57610e6b61297a565b9050602002810190610e7d9190612aab565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197b92505050565b848281518110610ec957610ec961297a565b60200260200101819052505b600101610dd6565b50505092915050565b6000610ef06113ae565b610f0c5760405162461bcd60e51b815260040161073290612952565b85600003610f445760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b6044820152606401610732565b6000600c549050610f8c818888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119a792505050565b600c919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001610fc28a84612a98565b610fcc9190612b12565b88888888604051610fe1959493929190612b4e565b60405180910390a25095945050505050565b6005805461064c906128e9565b6001600160a01b03851633148061103a57506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b6110565760405162461bcd60e51b8152600401610732906129e7565b61094d8585858585611a0b565b336001600160a01b0384168114806110a057506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b6110bc5760405162461bcd60e51b815260040161073290612a3c565b6001600160a01b03841660009081526002602090815260408083208684529091529020548211156110ff5760405162461bcd60e51b815260040161073290612a67565b610c4b848484611b37565b6060600061111760095490565b90506000600980548060200260200160405190810160405280929190818152602001828054801561116757602002820191906000526020600020905b815481526020019060010190808311611153575b5050505050905060005b8281101561126b5781818151811061118b5761118b61297a565b602002602001015185101561125957600a60008383815181106111b0576111b061297a565b6020026020010151815260200190815260200160002080546111d1906128e9565b80601f01602080910402602001604051908101604052809291908181526020018280546111fd906128e9565b801561124a5780601f1061121f5761010080835404028352916020019161124a565b820191906000526020600020905b81548152906001019060200180831161122d57829003601f168201915b50505050509350505050919050565b611264600182612a98565b9050611171565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610732565b6060816000036112cd5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112f757806112e181612b87565b91506112f09050600a836129d3565b91506112d1565b6000816001600160401b0381111561131157611311612273565b6040519080825280601f01601f19166020018201604052801561133b576020820181803683370190505b5090505b84156113a657611350600183612b12565b915061135d600a86612ba0565b611368906030612a98565b60f81b81838151811061137d5761137d61297a565b60200101906001600160f81b031916908160001a90535061139f600a866129d3565b945061133f565b949350505050565b60006113b8610c51565b6001600160a01b0316336001600160a01b031614905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b61030283838360405180602001604052806000815250611c29565b815183511461145f5760405162461bcd60e51b815260040161073290612a13565b6001600160a01b0384166114855760405162461bcd60e51b815260040161073290612bb4565b33611494818787878787611ce1565b60005b84518110156115845760008582815181106114b4576114b461297a565b6020026020010151905060008583815181106114d2576114d261297a565b6020908102919091018101516001600160a01b038b1660009081526002835260408082208683529093529190912054909150818110156115245760405162461bcd60e51b815260040161073290612bda565b6001600160a01b03808b16600090815260026020818152604080842088855282528084208787039055938d16835290815282822086835290529081208054849290611570908490612a98565b909155505060019093019250611497915050565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115d4929190612c04565b60405180910390a46115ea818787878787611ddb565b505050505050565b6127108111156116145760405162461bcd60e51b815260040161073290612c32565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b6001600160a01b03831661169c5760405162461bcd60e51b815260040161073290612c5b565b80518251146116bd5760405162461bcd60e51b815260040161073290612a13565b60003390506116e081856000868660405180602001604052806000815250611ce1565b60005b83518110156117a15760008482815181106117005761170061297a565b60200260200101519050600084838151811061171e5761171e61297a565b6020908102919091018101516001600160a01b03891660009081526002835260408082208683529093529190912054909150818110156117705760405162461bcd60e51b815260040161073290612bda565b6001600160a01b038816600090815260026020908152604080832095835294905292909220910390556001016116e3565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516117f2929190612c04565b60405180910390a450505050565b60006005805461180f906128e9565b80601f016020809104026020016040519081016040528092919081815260200182805461183b906128e9565b80156118885780601f1061185d57610100808354040283529160200191611888565b820191906000526020600020905b81548152906001019060200180831161186b57829003601f168201915b50505050509050816005908161189e9190612ccb565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516118d0929190612d8a565b60405180910390a15050565b6127108111156118fe5760405162461bcd60e51b815260040161073290612c32565b6040805180820182526001600160a01b038481168083526020808401868152600089815260088352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d9101610d74565b60606119a08383604051806060016040528060278152602001612f6e60279139611f0c565b9392505050565b6000806119b48486612a98565b60098054600181019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018190556000818152600a60205260409020909250829150611a028482612ccb565b50935093915050565b6001600160a01b038416611a315760405162461bcd60e51b815260040161073290612bb4565b33611a50818787611a4188611f84565b611a4a88611f84565b87611ce1565b6001600160a01b038616600090815260026020908152604080832087845290915290205483811015611a945760405162461bcd60e51b815260040161073290612bda565b6001600160a01b0380881660009081526002602081815260408084208a855282528084208987039055938a16835290815282822088835290529081208054869290611ae0908490612a98565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020612f4e833981519152910160405180910390a4611b2e828888888888611fcf565b50505050505050565b6001600160a01b038316611b5d5760405162461bcd60e51b815260040161073290612c5b565b33611b8c81856000611b6e87611f84565b611b7787611f84565b60405180602001604052806000815250611ce1565b6001600160a01b038416600090815260026020908152604080832086845290915290205482811015611bd05760405162461bcd60e51b815260040161073290612bda565b6001600160a01b0385811660008181526002602090815260408083208984528252808320888703905580518981529182018890529193861691600080516020612f4e833981519152910160405180910390a45050505050565b6001600160a01b038416611c4f5760405162461bcd60e51b815260040161073290612bb4565b33611c6081600087611a4188611f84565b6001600160a01b038516600090815260026020908152604080832087845290915281208054859290611c93908490612a98565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020612f4e833981519152910160405180910390a461094d81600087878787611fcf565b6001600160a01b038516611d5f5760005b8351811015611d5d57828181518110611d0d57611d0d61297a565b6020026020010151600e6000868481518110611d2b57611d2b61297a565b602002602001015181526020019081526020016000206000828254611d509190612a98565b9091555050600101611cf2565b505b6001600160a01b0384166115ea5760005b8351811015611b2e57828181518110611d8b57611d8b61297a565b6020026020010151600e6000868481518110611da957611da961297a565b602002602001015181526020019081526020016000206000828254611dce9190612b12565b9091555050600101611d70565b6001600160a01b0384163b156115ea5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e1f9089908990889088908890600401612daf565b6020604051808303816000875af1925050508015611e5a575060408051601f3d908101601f19168201909252611e5791810190612e01565b60015b611edc57611e66612e1e565b806308c379a003611e9f5750611e7a612e3a565b80611e855750611ea1565b8060405162461bcd60e51b815260040161073291906121d7565b505b60405162461bcd60e51b815260206004820152601060248201526f10a2a92198989a9aa922a1a2a4ab22a960811b6044820152606401610732565b6001600160e01b0319811663bc197c8160e01b14611b2e5760405162461bcd60e51b815260040161073290612ec3565b6060600080856001600160a01b031685604051611f299190612eec565b600060405180830381855af49150503d8060008114611f64576040519150601f19603f3d011682016040523d82523d6000602084013e611f69565b606091505b5091509150611f7a8683838761208a565b9695505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611fbe57611fbe61297a565b602090810291909101015292915050565b6001600160a01b0384163b156115ea5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906120139089908990889088908890600401612f08565b6020604051808303816000875af192505050801561204e575060408051601f3d908101601f1916820190925261204b91810190612e01565b60015b61205a57611e66612e1e565b6001600160e01b0319811663f23a6e6160e01b14611b2e5760405162461bcd60e51b815260040161073290612ec3565b606083156120f95782516000036120f2576001600160a01b0385163b6120f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610732565b50816113a6565b6113a68383815115611e855781518083602001fd5b80356001600160a01b038116811461212557600080fd5b919050565b6000806040838503121561213d57600080fd5b6121468361210e565b946020939093013593505050565b6001600160e01b03198116811461074457600080fd5b60006020828403121561217c57600080fd5b81356119a081612154565b60005b838110156121a257818101518382015260200161218a565b50506000910152565b600081518084526121c3816020860160208601612187565b601f01601f19169290920160200192915050565b6020815260006119a060208301846121ab565b6000602082840312156121fc57600080fd5b5035919050565b60006020828403121561221557600080fd5b6119a08261210e565b6000806040838503121561223157600080fd5b50508035926020909101359150565b60008060006060848603121561225557600080fd5b61225e8461210e565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156122ae576122ae612273565b6040525050565b60006001600160401b038211156122ce576122ce612273565b5060051b60200190565b600082601f8301126122e957600080fd5b813560206122f6826122b5565b6040516123038282612289565b80915083815260208101915060208460051b87010193508684111561232757600080fd5b602086015b84811015612343578035835291830191830161232c565b509695505050505050565b60006001600160401b0383111561236757612367612273565b60405161237e601f8501601f191660200182612289565b80915083815284848401111561239357600080fd5b83836020830137600060208583010152509392505050565b600082601f8301126123bc57600080fd5b6119a08383356020850161234e565b600080600080600060a086880312156123e357600080fd5b6123ec8661210e565b94506123fa6020870161210e565b935060408601356001600160401b038082111561241657600080fd5b61242289838a016122d8565b9450606088013591508082111561243857600080fd5b61244489838a016122d8565b9350608088013591508082111561245a57600080fd5b50612467888289016123ab565b9150509295509295909350565b6000806040838503121561248757600080fd5b82356001600160401b038082111561249e57600080fd5b818501915085601f8301126124b257600080fd5b813560206124bf826122b5565b6040516124cc8282612289565b83815260059390931b85018201928281019150898411156124ec57600080fd5b948201945b83861015612511576125028661210e565b825294820194908201906124f1565b9650508601359250508082111561252757600080fd5b50612534858286016122d8565b9150509250929050565b60008151808452602080850194506020840160005b8381101561256f57815187529582019590820190600101612553565b509495945050505050565b6020815260006119a0602083018461253e565b6000806000606084860312156125a257600080fd5b6125ab8461210e565b925060208401356001600160401b03808211156125c757600080fd5b6125d3878388016122d8565b935060408601359150808211156125e957600080fd5b506125f6868287016122d8565b9150509250925092565b60006020828403121561261257600080fd5b81356001600160401b0381111561262857600080fd5b8201601f8101841361263957600080fd5b6113a68482356020840161234e565b60008060006060848603121561265d57600080fd5b8335925061266d6020850161210e565b9150604084013590509250925092565b6000806040838503121561269057600080fd5b6126998361210e565b9150602083013580151581146126ae57600080fd5b809150509250929050565b600080602083850312156126cc57600080fd5b82356001600160401b03808211156126e357600080fd5b818501915085601f8301126126f757600080fd5b81358181111561270657600080fd5b8660208260051b850101111561271b57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561278457603f198886030184526127728583516121ab565b94509285019290850190600101612756565b5092979650505050505050565b60008083601f8401126127a357600080fd5b5081356001600160401b038111156127ba57600080fd5b6020830191508360208285010111156127d257600080fd5b9250929050565b6000806000806000606086880312156127f157600080fd5b8535945060208601356001600160401b038082111561280f57600080fd5b61281b89838a01612791565b9096509450604088013591508082111561283457600080fd5b5061284188828901612791565b969995985093965092949392505050565b6000806040838503121561286557600080fd5b61286e8361210e565b915061287c6020840161210e565b90509250929050565b600080600080600060a0868803121561289d57600080fd5b6128a68661210e565b94506128b46020870161210e565b9350604086013592506060860135915060808601356001600160401b038111156128dd57600080fd5b612467888289016123ab565b600181811c908216806128fd57607f821691505b60208210810361291d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351612935818460208801612187565b835190830190612949818360208801612187565b01949350505050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761063957610639612990565b634e487b7160e01b600052601260045260246000fd5b6000826129e2576129e26129bd565b500490565b6020808252601290820152710853d5d3915497d3d497d054141493d5915160721b604082015260600190565b6020808252600f908201526e0988a9c8ea890be9a92a69a82a8869608b1b604082015260600190565b6020808252601190820152702ab730b8383937bb32b21031b0b63632b960791b604082015260600190565b602080825260179082015276139bdd08195b9bdd59da081d1bdad95b9cc81bdddb9959604a1b604082015260600190565b8082018082111561063957610639612990565b6000808335601e19843603018112612ac257600080fd5b8301803591506001600160401b03821115612adc57600080fd5b6020019150368190038213156127d257600080fd5b8284823760609190911b6001600160601b0319169101908152601401919050565b8181038181111561063957610639612990565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000612b68606083018688612b25565b8281036040840152612b7b818587612b25565b98975050505050505050565b600060018201612b9957612b99612990565b5060010190565b600082612baf57612baf6129bd565b500690565b6020808252600c908201526b2a27afad22a927afa0a2222960a11b604082015260600190565b60208082526010908201526f125394d551919250d251539517d0905360821b604082015260600190565b604081526000612c17604083018561253e565b8281036020840152612c29818561253e565b95945050505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6020808252600e908201526d232927a6afad22a927afa0a2222960911b604082015260600190565b601f821115610302576000816000526020600020601f850160051c81016020861015612cac5750805b601f850160051c820191505b818110156115ea57828155600101612cb8565b81516001600160401b03811115612ce457612ce4612273565b612cf881612cf284546128e9565b84612c83565b602080601f831160018114612d2d5760008415612d155750858301515b600019600386901b1c1916600185901b1785556115ea565b600085815260208120601f198616915b82811015612d5c57888601518255948401946001909101908401612d3d565b5085821015612d7a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000612d9d60408301856121ab565b8281036020840152612c2981856121ab565b6001600160a01b0386811682528516602082015260a060408201819052600090612ddb9083018661253e565b8281036060840152612ded818661253e565b90508281036080840152612b7b81856121ab565b600060208284031215612e1357600080fd5b81516119a081612154565b600060033d1115612e375760046000803e5060005160e01c5b90565b600060443d1015612e485790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612e7757505050505090565b8285019150815181811115612e8f5750505050505090565b843d8701016020828501011115612ea95750505050505090565b612eb860208286010187612289565b509095945050505050565b6020808252600f908201526e1513d2d15394d7d491529150d51151608a1b604082015260600190565b60008251612efe818460208701612187565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612f42908301846121ab565b97965050505050505056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220cee55bd75d42488b76b41e08ace519f409f4a708200622c0381000888ce2a48264736f6c63430008170033",
    "sourceMap": "1704:9885:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;645:64:20;;;;;;;;;;-1:-1:-1;645:64:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;597:25:821;;;585:2;570:18;645:64:20;;;;;;;;7844:449:3;;;;;;;;;;-1:-1:-1;7844:449:3;;;;;:::i;:::-;;:::i;:::-;;;1184:14:821;;1177:22;1159:41;;1147:2;1132:18;7844:449:3;1019:187:821;418:18:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3631:219:3:-;;;;;;;;;;-1:-1:-1;3631:219:3;;;;;:::i;:::-;;:::i;1133:173:70:-;;;;;;;;;;-1:-1:-1;1133:173:70;;;;;:::i;:::-;;:::i;:::-;;2029:203:54;;;;;;;;;;-1:-1:-1;2029:203:54;;;;;:::i;:::-;;:::i;1421:325:77:-;;;;;;;;;;-1:-1:-1;1421:325:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;2788:32:821;;;2770:51;;2852:2;2837:18;;2830:34;;;;2743:18;1421:325:77;2596:274:821;5011:504:3;;;;;;:::i;:::-;;:::i;3066:360:20:-;;;;;;;;;;-1:-1:-1;3066:360:20;;;;;:::i;:::-;;:::i;8557:112:3:-;;;;;;;;;;-1:-1:-1;8641:21:3;;8557:112;;5995:98;;;;;;;;;;-1:-1:-1;5995:98:3;;;;;:::i;:::-;;;;;1986:381:77;;;;;;;;;;-1:-1:-1;1986:381:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;6347:32:821;;;6329:51;;6428:6;6416:19;;;6411:2;6396:18;;6389:47;6302:18;1986:381:77;6157:285:821;1788:460:20;;;;;;;;;;-1:-1:-1;1788:460:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3065:256:77:-;;;;;;;;;;-1:-1:-1;3065:256:77;;;;;:::i;:::-;;:::i;1711:96:54:-;;;;;;;;;;-1:-1:-1;1785:8:54;:15;1711:96;;7018:534:3;;;;;;;;;;-1:-1:-1;7018:534:3;;;;;:::i;:::-;;:::i;954:43:54:-;;;;;;;;;;-1:-1:-1;954:43:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;871:86:70;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;9208:32:821;;;9190:51;;9178:2;9163:18;871:86:70;9044:203:821;1003:188:56;;;;;;;;;;-1:-1:-1;1003:188:56;;;;;:::i;:::-;;:::i;442:20:20:-;;;;;;;;;;;;;:::i;4259:258:77:-;;;;;;;;;;-1:-1:-1;4259:258:77;;;;;:::i;:::-;;:::i;2435:291:20:-;;;;;;;;;;-1:-1:-1;2435:291:20;;;;;:::i;:::-;;:::i;696:567:65:-;;;;;;;;;;-1:-1:-1;696:567:65;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2477:144:77:-;;;;;;;;;;-1:-1:-1;2577:16:77;;-1:-1:-1;;;;;2577:16:77;;;-1:-1:-1;;;2602:10:77;;;;2477:144;;2269:46:3;;;;;;;;;;-1:-1:-1;2269:46:3;;;;;:::i;:::-;;;;;;;;;;;;;;1254:592:63;;;;;;;;;;-1:-1:-1;1254:592:63;;;;;:::i;:::-;;:::i;565:34:56:-;;;;;;;;;;;;;:::i;716:68:20:-;;;;;;;;;;-1:-1:-1;716:68:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;2732:328;;;;;;;;;;-1:-1:-1;2732:328:20;;;;;:::i;:::-;;:::i;6378:346:3:-;;;;;;;;;;-1:-1:-1;6378:346:3;;;;;:::i;:::-;;:::i;7844:449::-;7947:4;-1:-1:-1;;;;;;;;;7982:25:3;;;;:100;;-1:-1:-1;;;;;;;;;;8057:25:3;;;7982:100;:176;;;-1:-1:-1;;;;;;;;;;8133:25:3;;;7982:176;:279;;;-1:-1:-1;;;;;;;8220:41:3;;-1:-1:-1;;;8220:41:3;7982:279;7963:298;7844:449;-1:-1:-1;;7844:449:3:o;418:18:20:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3631:219:3:-;3700:13;3725:22;3750:21;3762:8;3750:11;:21::i;:::-;3725:46;;3812:8;3822:19;:8;:17;:19::i;:::-;3795:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3781:62;;;3631:219;;;:::o;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;2029:203:54:-;2093:7;2126:17;1785:8;:15;;1711:96;2126:17;2116:6;:27;2112:81;;2159:23;;-1:-1:-1;;;2159:23:54;;15276:2:821;2159:23:54;;;15258:21:821;15315:2;15295:18;;;15288:30;-1:-1:-1;;;15334:18:821;;;15327:43;15387:18;;2159:23:54;15074:337:821;2112:81:54;2209:8;2218:6;2209:16;;;;;;;;:::i;:::-;;;;;;;;;2202:23;;2029:203;;;:::o;1421:325:77:-;1540:16;1558:21;1592:17;1611:11;1626:31;1649:7;1626:22;:31::i;:::-;1591:66;;-1:-1:-1;1591:66:77;;-1:-1:-1;1591:66:77;;;-1:-1:-1;1733:6:77;1714:15;1591:66;1714:9;:15;:::i;:::-;1713:26;;;;:::i;:::-;1697:42;;1581:165;;1421:325;;;;;:::o;5011:504:3:-;245:1:220;548:7;;:19;540:63;;;;-1:-1:-1;;;540:63:220;;16312:2:821;540:63:220;;;16294:21:821;16351:2;16331:18;;;16324:30;16390:33;16370:18;;;16363:61;16441:18;;540:63:220;16110:355:821;540:63:220;245:1;678:7;:18;8641:21:3;;5136:8:::1;:30;5128:53;;;::::0;-1:-1:-1;;;5128:53:3;;16672:2:821;5128:53:3::1;::::0;::::1;16654:21:821::0;16711:2;16691:18;;;16684:30;-1:-1:-1;;;16730:18:821;;;16723:40;16780:18;;5128:53:3::1;16470:334:821::0;5128:53:3::1;5312:54;5335:9;5346:8;5356:9;5312:22;:54::i;:::-;5488:8;5477:9;-1:-1:-1::0;;;;;5451:57:3::1;5465:10;-1:-1:-1::0;;;;;5451:57:3::1;;5498:9;5451:57;;;;597:25:821::0;;585:2;570:18;;451:177;5451:57:3::1;;;;;;;;-1:-1:-1::0;;202:1:220;851:7;:22;-1:-1:-1;5011:504:3:o;3066:360:20:-;-1:-1:-1;;;;;3278:18:20;;3286:10;3278:18;;:56;;-1:-1:-1;;;;;;3300:22:20;;;;;;:16;:22;;;;;;;;3323:10;3300:34;;;;;;;;;;3278:56;3270:87;;;;-1:-1:-1;;;3270:87:20;;;;;;;:::i;:::-;3367:52;3390:4;3396:2;3400:3;3405:7;3414:4;3367:22;:52::i;:::-;3066:360;;;;;:::o;1986:381:77:-;2066:7;2130:29;;;:19;:29;;;;;;;;2093:66;;;;;;;;;;-1:-1:-1;;;;;2093:66:77;;;;;;;;;;;;;;;;2066:7;;2189:39;:171;;2305:25;;2339:19;;;;2189:171;;;2248:16;;-1:-1:-1;;;;;2248:16:77;;;-1:-1:-1;;;2273:10:77;;;;2189:171;2170:190;;;;;1986:381;;;:::o;1788:460:20:-;1921:16;1976:3;:10;1957:8;:15;:29;1949:57;;;;-1:-1:-1;;;1949:57:20;;;;;;;:::i;:::-;2017:30;2064:8;:15;-1:-1:-1;;;;;2050:30:20;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2050:30:20;;2017:63;;2096:9;2091:120;2115:8;:15;2111:1;:19;2091:120;;;2170:9;:22;2180:8;2189:1;2180:11;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;2170:22:20;-1:-1:-1;;;;;2170:22:20;;;;;;;;;;;;:30;2193:3;2197:1;2193:6;;;;;;;;:::i;:::-;;;;;;;2170:30;;;;;;;;;;;;2151:13;2165:1;2151:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2132:3;;2091:120;;;-1:-1:-1;2228:13:20;1788:460;-1:-1:-1;;;1788:460:20:o;3065:256:77:-;3177:20;:18;:20::i;:::-;3172:76;;3213:24;;-1:-1:-1;;;3213:24:77;;;;;;;:::i;3172:76::-;3258:56;3283:17;3302:11;3258:24;:56::i;:::-;3065:256;;:::o;7018:534:3:-;7152:10;-1:-1:-1;;;;;7181:16:3;;;;;:52;;-1:-1:-1;;;;;;7201:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;7181:52;7173:82;;;;-1:-1:-1;;;7173:82:3;;;;;;;:::i;:::-;7293:8;:15;7273:9;:16;:35;7265:63;;;;-1:-1:-1;;;7265:63:3;;18048:2:821;7265:63:3;;;18030:21:821;18087:2;18067:18;;;18060:30;-1:-1:-1;;;18106:18:821;;;18099:45;18161:18;;7265:63:3;17846:339:821;7265:63:3;7344:9;7339:157;7363:9;:16;7359:1;:20;7339:157;;;7446:8;7455:1;7446:11;;;;;;;;:::i;:::-;;;;;;;7411:9;:17;7421:6;-1:-1:-1;;;;;7411:17:3;-1:-1:-1;;;;;7411:17:3;;;;;;;;;;;;:31;7429:9;7439:1;7429:12;;;;;;;;:::i;:::-;;;;;;;7411:31;;;;;;;;;;;;:46;;7403:82;;;;-1:-1:-1;;;7403:82:3;;;;;;;:::i;:::-;7381:6;7386:1;7381:6;;:::i;:::-;;;7339:157;;;;7506:39;7517:6;7525:9;7536:8;7506:10;:39::i;:::-;7125:427;7018:534;;;:::o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;1003:188:56:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:56;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;442:20:20:-;;;;;;;:::i;4259:258:77:-;4376:20;:18;:20::i;:::-;4371:76;;4412:24;;-1:-1:-1;;;4412:24:77;;;;;;;:::i;4371:76::-;4457:53;4483:8;4493:10;4505:4;4457:25;:53::i;2435:291:20:-;2545:10;-1:-1:-1;;;;;2573:17:20;;;;2565:44;;;;-1:-1:-1;;;2565:44:20;;18874:2:821;2565:44:20;;;18856:21:821;18913:2;18893:18;;;18886:30;-1:-1:-1;;;18932:18:821;;;18925:44;18986:18;;2565:44:20;18672:338:821;2565:44:20;-1:-1:-1;;;;;2619:23:20;;;;;;;:16;:23;;;;;;;;:33;;;;;;;;;;;;;:44;;-1:-1:-1;;2619:44:20;;;;;;;;;;2678:41;;1159::821;;;2678::20;;1132:18:821;2678:41:20;;;;;;;;2519:207;2435:291;;:::o;696:567:65:-;756:22;812:4;-1:-1:-1;;;;;800:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:34:65;-1:-1:-1;1415:10:65;834:14;;922:311;942:15;;;922:311;;;982:11;978:245;;;1026:78;1063:4;1087;;1092:1;1087:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1096:6;1070:33;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1026:28;:78::i;:::-;1013:7;1021:1;1013:10;;;;;;;;:::i;:::-;;;;;;:91;;;;978:245;;;1156:52;1193:4;1200;;1205:1;1200:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1156:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1156:28:65;;-1:-1:-1;;;1156:52:65:i;:::-;1143:7;1151:1;1143:10;;;;;;;;:::i;:::-;;;;;;:65;;;;978:245;959:3;;922:311;;;;1242:14;;696:567;;;;:::o;1254:592:63:-;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:63;;;;;;;:::i;1436:70::-;1520:7;1531:1;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:63;;20100:2:821;1548:15:63;;;20082:21:821;20139:1;20119:18;;;20112:29;-1:-1:-1;;;20157:18:821;;;20150:35;20202:18;;1548:15:63;19898:328:821;1516:58:63;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:63;;-1:-1:-1;;;1669:55:63:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:63;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;565:34:56:-;;;;;;;:::i;2732:328:20:-;-1:-1:-1;;;;;2919:18:20;;2927:10;2919:18;;:56;;-1:-1:-1;;;;;;2941:22:20;;;;;;:16;:22;;;;;;;;2964:10;2941:34;;;;;;;;;;2919:56;2911:87;;;;-1:-1:-1;;;2911:87:20;;;;;;;:::i;:::-;3008:45;3026:4;3032:2;3036;3040:6;3048:4;3008:17;:45::i;6378:346:3:-;6487:10;-1:-1:-1;;;;;6516:16:3;;;;;:52;;-1:-1:-1;;;;;;6536:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;6516:52;6508:82;;;;-1:-1:-1;;;6508:82:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;6608:17:3;;;;;;:9;:17;;;;;;;;:27;;;;;;;;;:38;-1:-1:-1;6608:38:3;6600:74;;;;-1:-1:-1;;;6600:74:3;;;;;;;:::i;:::-;6685:32;6691:6;6699:8;6709:7;6685:5;:32::i;2905:390:54:-;2967:13;2992:25;3020:17;1785:8;:15;;1711:96;3020:17;2992:45;;3047:24;3074:8;3047:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3098:9;3093:161;3117:17;3113:1;:21;3093:161;;;3173:7;3181:1;3173:10;;;;;;;;:::i;:::-;;;;;;;3162:8;:21;3158:86;;;3210:7;:19;3218:7;3226:1;3218:10;;;;;;;;:::i;:::-;;;;;;;3210:19;;;;;;;;;;;3203:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2905:390;;;:::o;3158:86::-;3136:6;3141:1;3136:6;;:::i;:::-;;;3093:161;;;-1:-1:-1;3263:25:54;;-1:-1:-1;;;3263:25:54;;21349:2:821;3263:25:54;;;21331:21:821;21388:2;21368:18;;;21361:30;-1:-1:-1;;;21407:18:821;;;21400:45;21462:18;;3263:25:54;21147:339:821;303:703:298;359:13;576:5;585:1;576:10;572:51;;-1:-1:-1;;602:10:298;;;;;;;;;;;;-1:-1:-1;;;602:10:298;;;;;303:703::o;572:51::-;647:5;632:12;686:75;693:9;;686:75;;718:8;;;;:::i;:::-;;-1:-1:-1;740:10:298;;-1:-1:-1;748:2:298;740:10;;:::i;:::-;;;686:75;;;770:19;802:6;-1:-1:-1;;;;;792:17:298;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;792:17:298;;770:39;;819:150;826:10;;819:150;;852:11;862:1;852:11;;:::i;:::-;;-1:-1:-1;920:10:298;928:2;920:5;:10;:::i;:::-;907:24;;:2;:24;:::i;:::-;894:39;;877:6;884;877:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;877:56:298;;;;;;;;-1:-1:-1;947:11:298;956:2;947:11;;:::i;:::-;;;819:150;;;992:6;303:703;-1:-1:-1;;;;303:703:298:o;10103:115:3:-;10167:4;10204:7;:5;:7::i;:::-;-1:-1:-1;;;;;10190:21:3;:10;-1:-1:-1;;;;;10190:21:3;;10183:28;;10103:115;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;9432:163:3:-;9547:41;9553:9;9564:8;9574:9;9547:41;;;;;;;;;;;;:5;:41::i;4364:967:20:-;4584:7;:14;4570:3;:10;:28;4562:56;;;;-1:-1:-1;;;4562:56:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4636:16:20;;4628:41;;;;-1:-1:-1;;;4628:41:20;;;;;;;:::i;:::-;4699:10;4720:60;4699:10;4751:4;4757:2;4761:3;4766:7;4775:4;4720:20;:60::i;:::-;4796:9;4791:385;4815:3;:10;4811:1;:14;4791:385;;;4846:10;4859:3;4863:1;4859:6;;;;;;;;:::i;:::-;;;;;;;4846:19;;4879:14;4896:7;4904:1;4896:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;4943:15:20;;4921:19;4943:15;;;:9;:15;;;;;;:19;;;;;;;;;;;4896:10;;-1:-1:-1;4984:21:20;;;;4976:50;;;;-1:-1:-1;;;4976:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;5068:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;5090:20;;;5068:42;;5138:13;;;;;;;;;;;:17;;;;;;;;:27;;5104:6;;5068:15;5138:27;;5104:6;;5138:27;:::i;:::-;;;;-1:-1:-1;;4827:3:20;;;;;-1:-1:-1;4791:385:20;;-1:-1:-1;;4791:385:20;;;5221:2;-1:-1:-1;;;;;5191:47:20;5215:4;-1:-1:-1;;;;;5191:47:20;5205:8;-1:-1:-1;;;;;5191:47:20;;5225:3;5230:7;5191:47;;;;;;;:::i;:::-;;;;;;;;5249:75;5285:8;5295:4;5301:2;5305:3;5310:7;5319:4;5249:35;:75::i;:::-;4552:779;4364:967;;;;;:::o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;;;;;;:::i;3509:76::-;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;597:25:821;;;3689:46:77;;585:2:821;570:18;3689:46:77;;;;;;;3408:334;;:::o;7194:769:20:-;-1:-1:-1;;;;;7311:18:20;;7303:45;;;;-1:-1:-1;;;7303:45:20;;;;;;;:::i;:::-;7380:7;:14;7366:3;:10;:28;7358:56;;;;-1:-1:-1;;;7358:56:20;;;;;;;:::i;:::-;7425:16;7444:10;7425:29;;7465:66;7486:8;7496:4;7510:1;7514:3;7519:7;7465:66;;;;;;;;;;;;:20;:66::i;:::-;7547:9;7542:344;7566:3;:10;7562:1;:14;7542:344;;;7597:10;7610:3;7614:1;7610:6;;;;;;;;:::i;:::-;;;;;;;7597:19;;7630:14;7647:7;7655:1;7647:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;7694:15:20;;7672:19;7694:15;;;:9;:15;;;;;;:19;;;;;;;;;;;7647:10;;-1:-1:-1;7735:21:20;;;;7727:50;;;;-1:-1:-1;;;7727:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7819:15:20;;;;;;:9;:15;;;;;;;;:19;;;;;;;;;;7841:20;;7819:42;;7578:3;;7542:344;;;;7939:1;-1:-1:-1;;;;;7901:55:20;7925:4;-1:-1:-1;;;;;7901:55:20;7915:8;-1:-1:-1;;;;;7901:55:20;;7943:3;7948:7;7901:55;;;;;;;:::i;:::-;;;;;;;;7293:670;7194:769;;;:::o;1273:185:56:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1398:4;1384:11;:18;;;;;;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4619:332:77:-;4736:6;4729:4;:13;4725:69;;;4758:25;;-1:-1:-1;;;4758:25:77;;;;;;;:::i;4725:69::-;4836:49;;;;;;;;-1:-1:-1;;;;;4836:49:77;;;;;;;;;;;;;-1:-1:-1;4804:29:77;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4804:81:77;;;;;;;;;;;-1:-1:-1;4804:81:77;;;;;;;4901:43;;597:25:821;;;4836:49:77;;4804:29;;4901:43;;570:18:821;4901:43:77;451:177:821;6671:198:289;6754:12;6785:77;6806:6;6814:4;6785:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6778:84;6671:198;-1:-1:-1;;;6671:198:289:o;4591:362:54:-;4741:25;;4805:24;4816:13;4805:8;:24;:::i;:::-;4877:8;:22;;;;;;;;;;;;;-1:-1:-1;4910:16:54;;;:7;4877:22;4910:16;;;;4795:34;;-1:-1:-1;4795:34:54;;-1:-1:-1;4910:36:54;4929:17;4910:16;:36;:::i;:::-;;4591:362;;;;;;:::o;3614:744:20:-;-1:-1:-1;;;;;3795:16:20;;3787:41;;;;-1:-1:-1;;;3787:41:20;;;;;;;:::i;:::-;3858:10;3879:96;3858:10;3910:4;3916:2;3920:21;3938:2;3920:17;:21::i;:::-;3943:25;3961:6;3943:17;:25::i;:::-;3970:4;3879:20;:96::i;:::-;-1:-1:-1;;;;;4008:15:20;;3986:19;4008:15;;;:9;:15;;;;;;;;:19;;;;;;;;;4045:21;;;;4037:50;;;;-1:-1:-1;;;4037:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4121:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;4143:20;;;4121:42;;4183:13;;;;;;;;;;;:17;;;;;;;;:27;;4157:6;;4121:15;4183:27;;4157:6;;4183:27;:::i;:::-;;;;-1:-1:-1;;4226:46:20;;;26348:25:821;;;26404:2;26389:18;;26382:34;;;-1:-1:-1;;;;;4226:46:20;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4226:46:20;26321:18:821;4226:46:20;;;;;;;4283:68;4314:8;4324:4;4330:2;4334;4338:6;4346:4;4283:30;:68::i;:::-;3777:581;;3614:744;;;;;:::o;6631:557::-;-1:-1:-1;;;;;6723:18:20;;6715:45;;;;-1:-1:-1;;;6715:45:20;;;;;;;:::i;:::-;6790:10;6811:102;6790:10;6842:4;6771:16;6860:21;6878:2;6860:17;:21::i;:::-;6883:25;6901:6;6883:17;:25::i;:::-;6811:102;;;;;;;;;;;;:20;:102::i;:::-;-1:-1:-1;;;;;6946:15:20;;6924:19;6946:15;;;:9;:15;;;;;;;;:19;;;;;;;;;6983:21;;;;6975:50;;;;-1:-1:-1;;;6975:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7059:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;7081:20;;;7059:42;;7127:54;;26348:25:821;;;26389:18;;;26382:34;;;7059:15:20;;7127:54;;;-1:-1:-1;;;;;;;;;;;7127:54:20;26321:18:821;7127:54:20;;;;;;;6705:483;;6631:557;;;:::o;5460:492::-;-1:-1:-1;;;;;5569:16:20;;5561:41;;;;-1:-1:-1;;;5561:41:20;;;;;;;:::i;:::-;5632:10;5653:102;5632:10;5613:16;5696:2;5700:21;5718:2;5700:17;:21::i;5653:102::-;-1:-1:-1;;;;;5766:13:20;;;;;;:9;:13;;;;;;;;:17;;;;;;;;:27;;5787:6;;5766:13;:27;;5787:6;;5766:27;:::i;:::-;;;;-1:-1:-1;;5808:52:20;;;26348:25:821;;;26404:2;26389:18;;26382:34;;;-1:-1:-1;;;;;5808:52:20;;;;5841:1;;5808:52;;;;-1:-1:-1;;;;;;;;;;;5808:52:20;26321:18:821;5808:52:20;;;;;;;5871:74;5902:8;5920:1;5924:2;5928;5932:6;5940:4;5871:30;:74::i;10955:632:3:-;-1:-1:-1;;;;;11267:18:3;;11263:155;;11306:9;11301:107;11325:3;:10;11321:1;:14;11301:107;;;11383:7;11391:1;11383:10;;;;;;;;:::i;:::-;;;;;;;11360:11;:19;11372:3;11376:1;11372:6;;;;;;;;:::i;:::-;;;;;;;11360:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;;11337:3:3;;11301:107;;;;11263:155;-1:-1:-1;;;;;11432:16:3;;11428:153;;11469:9;11464:107;11488:3;:10;11484:1;:14;11464:107;;;11546:7;11554:1;11546:10;;;;;;;;:::i;:::-;;;;;;;11523:11;:19;11535:3;11539:1;11535:6;;;;;;;;:::i;:::-;;;;;;;11523:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;;11500:3:3;;11464:107;;8862:734:20;-1:-1:-1;;;;;9094:14:20;;;:18;9090:500;;9132:79;;-1:-1:-1;;;9132:79:20;;-1:-1:-1;;;;;9132:43:20;;;;;:79;;9176:8;;9186:4;;9192:3;;9197:7;;9206:4;;9132:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9132:79:20;;;;;;;;-1:-1:-1;;9132:79:20;;;;;;;;;;;;:::i;:::-;;;9128:452;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;9492:6;9485:14;;-1:-1:-1;;;9485:14:20;;;;;;;;:::i;9128:452::-;;;9539:26;;-1:-1:-1;;;9539:26:20;;28575:2:821;9539:26:20;;;28557:21:821;28614:2;28594:18;;;28587:30;-1:-1:-1;;;28633:18:821;;;28626:46;28689:18;;9539:26:20;28373:340:821;9128:452:20;-1:-1:-1;;;;;;9290:60:20;;-1:-1:-1;;;9290:60:20;9286:132;;9374:25;;-1:-1:-1;;;9374:25:20;;;;;;;:::i;7055:325:289:-;7196:12;7221;7235:23;7262:6;-1:-1:-1;;;;;7262:19:289;7282:4;7262:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7220:67;;;;7304:69;7331:6;7339:7;7348:10;7360:12;7304:26;:69::i;:::-;7297:76;7055:325;-1:-1:-1;;;;;;7055:325:289:o;9602:193:20:-;9721:16;;;9735:1;9721:16;;;;;;;;;9668;;9696:22;;9721:16;;;;;;;;;;;;-1:-1:-1;9721:16:20;9696:41;;9758:7;9747:5;9753:1;9747:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;9783:5;9602:193;-1:-1:-1;;9602:193:20:o;8189:667::-;-1:-1:-1;;;;;8396:14:20;;;:18;8392:458;;8434:72;;-1:-1:-1;;;8434:72:20;;-1:-1:-1;;;;;8434:38:20;;;;;:72;;8473:8;;8483:4;;8489:2;;8493:6;;8501:4;;8434:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8434:72:20;;;;;;;;-1:-1:-1;;8434:72:20;;;;;;;;;;;;:::i;:::-;;;8430:410;;;;:::i;:::-;-1:-1:-1;;;;;;8555:55:20;;-1:-1:-1;;;8555:55:20;8551:127;;8634:25;;-1:-1:-1;;;8634:25:20;;;;;;;:::i;7668:628:289:-;7848:12;7876:7;7872:418;;;7903:10;:17;7924:1;7903:22;7899:286;;-1:-1:-1;;;;;1695:19:289;;;8110:60;;;;-1:-1:-1;;;8110:60:289;;30122:2:821;8110:60:289;;;30104:21:821;30161:2;30141:18;;;30134:30;30200:31;30180:18;;;30173:59;30249:18;;8110:60:289;29920:353:821;8110:60:289;-1:-1:-1;8205:10:289;8198:17;;7872:418;8246:33;8254:10;8266:12;8977:17;;:21;8973:379;;9205:10;9199:17;9261:15;9248:10;9244:2;9240:19;9233:44;14:173:821;82:20;;-1:-1:-1;;;;;131:31:821;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:821:o;633:131::-;-1:-1:-1;;;;;;707:32:821;;697:43;;687:71;;754:1;751;744:12;769:245;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;1211:250::-;1296:1;1306:113;1320:6;1317:1;1314:13;1306:113;;;1396:11;;;1390:18;1377:11;;;1370:39;1342:2;1335:10;1306:113;;;-1:-1:-1;;1453:1:821;1435:16;;1428:27;1211:250::o;1466:271::-;1508:3;1546:5;1540:12;1573:6;1568:3;1561:19;1589:76;1658:6;1651:4;1646:3;1642:14;1635:4;1628:5;1624:16;1589:76;:::i;:::-;1719:2;1698:15;-1:-1:-1;;1694:29:821;1685:39;;;;1726:4;1681:50;;1466:271;-1:-1:-1;;1466:271:821:o;1742:220::-;1891:2;1880:9;1873:21;1854:4;1911:45;1952:2;1941:9;1937:18;1929:6;1911:45;:::i;1967:180::-;2026:6;2079:2;2067:9;2058:7;2054:23;2050:32;2047:52;;;2095:1;2092;2085:12;2047:52;-1:-1:-1;2118:23:821;;1967:180;-1:-1:-1;1967:180:821:o;2152:186::-;2211:6;2264:2;2252:9;2243:7;2239:23;2235:32;2232:52;;;2280:1;2277;2270:12;2232:52;2303:29;2322:9;2303:29;:::i;2343:248::-;2411:6;2419;2472:2;2460:9;2451:7;2447:23;2443:32;2440:52;;;2488:1;2485;2478:12;2440:52;-1:-1:-1;;2511:23:821;;;2581:2;2566:18;;;2553:32;;-1:-1:-1;2343:248:821:o;2875:322::-;2952:6;2960;2968;3021:2;3009:9;3000:7;2996:23;2992:32;2989:52;;;3037:1;3034;3027:12;2989:52;3060:29;3079:9;3060:29;:::i;:::-;3050:39;3136:2;3121:18;;3108:32;;-1:-1:-1;3187:2:821;3172:18;;;3159:32;;2875:322;-1:-1:-1;;;2875:322:821:o;3202:127::-;3263:10;3258:3;3254:20;3251:1;3244:31;3294:4;3291:1;3284:15;3318:4;3315:1;3308:15;3334:249;3444:2;3425:13;;-1:-1:-1;;3421:27:821;3409:40;;-1:-1:-1;;;;;3464:34:821;;3500:22;;;3461:62;3458:88;;;3526:18;;:::i;:::-;3562:2;3555:22;-1:-1:-1;;3334:249:821:o;3588:183::-;3648:4;-1:-1:-1;;;;;3673:6:821;3670:30;3667:56;;;3703:18;;:::i;:::-;-1:-1:-1;3748:1:821;3744:14;3760:4;3740:25;;3588:183::o;3776:730::-;3830:5;3883:3;3876:4;3868:6;3864:17;3860:27;3850:55;;3901:1;3898;3891:12;3850:55;3937:6;3924:20;3963:4;3986:43;4026:2;3986:43;:::i;:::-;4058:2;4052:9;4070:31;4098:2;4090:6;4070:31;:::i;:::-;4121:6;4110:17;;4151:2;4143:6;4136:18;4182:4;4174:6;4170:17;4163:24;;4239:4;4233:2;4230:1;4226:10;4218:6;4214:23;4210:34;4196:48;;4267:3;4259:6;4256:15;4253:35;;;4284:1;4281;4274:12;4253:35;4320:4;4312:6;4308:17;4334:142;4350:6;4345:3;4342:15;4334:142;;;4416:17;;4404:30;;4454:12;;;;4367;;4334:142;;;-1:-1:-1;4494:6:821;3776:730;-1:-1:-1;;;;;;3776:730:821:o;4511:468::-;4575:5;-1:-1:-1;;;;;4601:6:821;4598:30;4595:56;;;4631:18;;:::i;:::-;4680:2;4674:9;4692:69;4749:2;4728:15;;-1:-1:-1;;4724:29:821;4755:4;4720:40;4674:9;4692:69;:::i;:::-;4779:6;4770:15;;4809:6;4801;4794:22;4849:3;4840:6;4835:3;4831:16;4828:25;4825:45;;;4866:1;4863;4856:12;4825:45;4916:6;4911:3;4904:4;4896:6;4892:17;4879:44;4971:1;4964:4;4955:6;4947;4943:19;4939:30;4932:41;;4511:468;;;;;:::o;4984:220::-;5026:5;5079:3;5072:4;5064:6;5060:17;5056:27;5046:55;;5097:1;5094;5087:12;5046:55;5119:79;5194:3;5185:6;5172:20;5165:4;5157:6;5153:17;5119:79;:::i;5209:943::-;5363:6;5371;5379;5387;5395;5448:3;5436:9;5427:7;5423:23;5419:33;5416:53;;;5465:1;5462;5455:12;5416:53;5488:29;5507:9;5488:29;:::i;:::-;5478:39;;5536:38;5570:2;5559:9;5555:18;5536:38;:::i;:::-;5526:48;;5625:2;5614:9;5610:18;5597:32;-1:-1:-1;;;;;5689:2:821;5681:6;5678:14;5675:34;;;5705:1;5702;5695:12;5675:34;5728:61;5781:7;5772:6;5761:9;5757:22;5728:61;:::i;:::-;5718:71;;5842:2;5831:9;5827:18;5814:32;5798:48;;5871:2;5861:8;5858:16;5855:36;;;5887:1;5884;5877:12;5855:36;5910:63;5965:7;5954:8;5943:9;5939:24;5910:63;:::i;:::-;5900:73;;6026:3;6015:9;6011:19;5998:33;5982:49;;6056:2;6046:8;6043:16;6040:36;;;6072:1;6069;6062:12;6040:36;;6095:51;6138:7;6127:8;6116:9;6112:24;6095:51;:::i;:::-;6085:61;;;5209:943;;;;;;;;:::o;6447:1208::-;6565:6;6573;6626:2;6614:9;6605:7;6601:23;6597:32;6594:52;;;6642:1;6639;6632:12;6594:52;6682:9;6669:23;-1:-1:-1;;;;;6752:2:821;6744:6;6741:14;6738:34;;;6768:1;6765;6758:12;6738:34;6806:6;6795:9;6791:22;6781:32;;6851:7;6844:4;6840:2;6836:13;6832:27;6822:55;;6873:1;6870;6863:12;6822:55;6909:2;6896:16;6931:4;6954:43;6994:2;6954:43;:::i;:::-;7026:2;7020:9;7038:31;7066:2;7058:6;7038:31;:::i;:::-;7104:18;;;7192:1;7188:10;;;;7180:19;;7176:28;;;7138:15;;;;-1:-1:-1;7216:19:821;;;7213:39;;;7248:1;7245;7238:12;7213:39;7272:11;;;;7292:148;7308:6;7303:3;7300:15;7292:148;;;7374:23;7393:3;7374:23;:::i;:::-;7362:36;;7325:12;;;;7418;;;;7292:148;;;7459:6;-1:-1:-1;;7503:18:821;;7490:32;;-1:-1:-1;;7534:16:821;;;7531:36;;;7563:1;7560;7553:12;7531:36;;7586:63;7641:7;7630:8;7619:9;7615:24;7586:63;:::i;:::-;7576:73;;;6447:1208;;;;;:::o;7660:439::-;7713:3;7751:5;7745:12;7778:6;7773:3;7766:19;7804:4;7833;7828:3;7824:14;7817:21;;7872:4;7865:5;7861:16;7895:1;7905:169;7919:6;7916:1;7913:13;7905:169;;;7980:13;;7968:26;;8014:12;;;;8049:15;;;;7941:1;7934:9;7905:169;;;-1:-1:-1;8090:3:821;;7660:439;-1:-1:-1;;;;;7660:439:821:o;8104:261::-;8283:2;8272:9;8265:21;8246:4;8303:56;8355:2;8344:9;8340:18;8332:6;8303:56;:::i;8370:669::-;8497:6;8505;8513;8566:2;8554:9;8545:7;8541:23;8537:32;8534:52;;;8582:1;8579;8572:12;8534:52;8605:29;8624:9;8605:29;:::i;:::-;8595:39;;8685:2;8674:9;8670:18;8657:32;-1:-1:-1;;;;;8749:2:821;8741:6;8738:14;8735:34;;;8765:1;8762;8755:12;8735:34;8788:61;8841:7;8832:6;8821:9;8817:22;8788:61;:::i;:::-;8778:71;;8902:2;8891:9;8887:18;8874:32;8858:48;;8931:2;8921:8;8918:16;8915:36;;;8947:1;8944;8937:12;8915:36;;8970:63;9025:7;9014:8;9003:9;8999:24;8970:63;:::i;:::-;8960:73;;;8370:669;;;;;:::o;9252:450::-;9321:6;9374:2;9362:9;9353:7;9349:23;9345:32;9342:52;;;9390:1;9387;9380:12;9342:52;9430:9;9417:23;-1:-1:-1;;;;;9455:6:821;9452:30;9449:50;;;9495:1;9492;9485:12;9449:50;9518:22;;9571:4;9563:13;;9559:27;-1:-1:-1;9549:55:821;;9600:1;9597;9590:12;9549:55;9623:73;9688:7;9683:2;9670:16;9665:2;9661;9657:11;9623:73;:::i;9707:322::-;9784:6;9792;9800;9853:2;9841:9;9832:7;9828:23;9824:32;9821:52;;;9869:1;9866;9859:12;9821:52;9905:9;9892:23;9882:33;;9934:38;9968:2;9957:9;9953:18;9934:38;:::i;:::-;9924:48;;10019:2;10008:9;10004:18;9991:32;9981:42;;9707:322;;;;;:::o;10034:347::-;10099:6;10107;10160:2;10148:9;10139:7;10135:23;10131:32;10128:52;;;10176:1;10173;10166:12;10128:52;10199:29;10218:9;10199:29;:::i;:::-;10189:39;;10278:2;10267:9;10263:18;10250:32;10325:5;10318:13;10311:21;10304:5;10301:32;10291:60;;10347:1;10344;10337:12;10291:60;10370:5;10360:15;;;10034:347;;;;;:::o;10386:626::-;10483:6;10491;10544:2;10532:9;10523:7;10519:23;10515:32;10512:52;;;10560:1;10557;10550:12;10512:52;10600:9;10587:23;-1:-1:-1;;;;;10670:2:821;10662:6;10659:14;10656:34;;;10686:1;10683;10676:12;10656:34;10724:6;10713:9;10709:22;10699:32;;10769:7;10762:4;10758:2;10754:13;10750:27;10740:55;;10791:1;10788;10781:12;10740:55;10831:2;10818:16;10857:2;10849:6;10846:14;10843:34;;;10873:1;10870;10863:12;10843:34;10926:7;10921:2;10911:6;10908:1;10904:14;10900:2;10896:23;10892:32;10889:45;10886:65;;;10947:1;10944;10937:12;10886:65;10978:2;10970:11;;;;;11000:6;;-1:-1:-1;10386:626:821;;-1:-1:-1;;;;10386:626:821:o;11017:801::-;11177:4;11206:2;11246;11235:9;11231:18;11276:2;11265:9;11258:21;11299:6;11334;11328:13;11365:6;11357;11350:22;11403:2;11392:9;11388:18;11381:25;;11465:2;11455:6;11452:1;11448:14;11437:9;11433:30;11429:39;11415:53;;11503:2;11495:6;11491:15;11524:1;11534:255;11548:6;11545:1;11542:13;11534:255;;;11641:2;11637:7;11625:9;11617:6;11613:22;11609:36;11604:3;11597:49;11669:40;11702:6;11693;11687:13;11669:40;:::i;:::-;11659:50;-1:-1:-1;11767:12:821;;;;11732:15;;;;11570:1;11563:9;11534:255;;;-1:-1:-1;11806:6:821;;11017:801;-1:-1:-1;;;;;;;11017:801:821:o;11823:348::-;11875:8;11885:6;11939:3;11932:4;11924:6;11920:17;11916:27;11906:55;;11957:1;11954;11947:12;11906:55;-1:-1:-1;11980:20:821;;-1:-1:-1;;;;;12012:30:821;;12009:50;;;12055:1;12052;12045:12;12009:50;12092:4;12084:6;12080:17;12068:29;;12144:3;12137:4;12128:6;12120;12116:19;12112:30;12109:39;12106:59;;;12161:1;12158;12151:12;12106:59;11823:348;;;;;:::o;12176:788::-;12276:6;12284;12292;12300;12308;12361:2;12349:9;12340:7;12336:23;12332:32;12329:52;;;12377:1;12374;12367:12;12329:52;12413:9;12400:23;12390:33;;12474:2;12463:9;12459:18;12446:32;-1:-1:-1;;;;;12538:2:821;12530:6;12527:14;12524:34;;;12554:1;12551;12544:12;12524:34;12593:59;12644:7;12635:6;12624:9;12620:22;12593:59;:::i;:::-;12671:8;;-1:-1:-1;12567:85:821;-1:-1:-1;12759:2:821;12744:18;;12731:32;;-1:-1:-1;12775:16:821;;;12772:36;;;12804:1;12801;12794:12;12772:36;;12843:61;12896:7;12885:8;12874:9;12870:24;12843:61;:::i;:::-;12176:788;;;;-1:-1:-1;12176:788:821;;-1:-1:-1;12923:8:821;;12817:87;12176:788;-1:-1:-1;;;12176:788:821:o;12969:260::-;13037:6;13045;13098:2;13086:9;13077:7;13073:23;13069:32;13066:52;;;13114:1;13111;13104:12;13066:52;13137:29;13156:9;13137:29;:::i;:::-;13127:39;;13185:38;13219:2;13208:9;13204:18;13185:38;:::i;:::-;13175:48;;12969:260;;;;;:::o;13234:606::-;13338:6;13346;13354;13362;13370;13423:3;13411:9;13402:7;13398:23;13394:33;13391:53;;;13440:1;13437;13430:12;13391:53;13463:29;13482:9;13463:29;:::i;:::-;13453:39;;13511:38;13545:2;13534:9;13530:18;13511:38;:::i;:::-;13501:48;;13596:2;13585:9;13581:18;13568:32;13558:42;;13647:2;13636:9;13632:18;13619:32;13609:42;;13702:3;13691:9;13687:19;13674:33;-1:-1:-1;;;;;13722:6:821;13719:30;13716:50;;;13762:1;13759;13752:12;13716:50;13785:49;13826:7;13817:6;13806:9;13802:22;13785:49;:::i;13845:380::-;13924:1;13920:12;;;;13967;;;13988:61;;14042:4;14034:6;14030:17;14020:27;;13988:61;14095:2;14087:6;14084:14;14064:18;14061:38;14058:161;;14141:10;14136:3;14132:20;14129:1;14122:31;14176:4;14173:1;14166:15;14204:4;14201:1;14194:15;14058:161;;13845:380;;;:::o;14230:496::-;14409:3;14447:6;14441:13;14463:66;14522:6;14517:3;14510:4;14502:6;14498:17;14463:66;:::i;:::-;14592:13;;14551:16;;;;14614:70;14592:13;14551:16;14661:4;14649:17;;14614:70;:::i;:::-;14700:20;;14230:496;-1:-1:-1;;;;14230:496:821:o;14731:338::-;14933:2;14915:21;;;14972:2;14952:18;;;14945:30;-1:-1:-1;;;15006:2:821;14991:18;;14984:44;15060:2;15045:18;;14731:338::o;15416:127::-;15477:10;15472:3;15468:20;15465:1;15458:31;15508:4;15505:1;15498:15;15532:4;15529:1;15522:15;15548:127;15609:10;15604:3;15600:20;15597:1;15590:31;15640:4;15637:1;15630:15;15664:4;15661:1;15654:15;15680:168;15753:9;;;15784;;15801:15;;;15795:22;;15781:37;15771:71;;15822:18;;:::i;15853:127::-;15914:10;15909:3;15905:20;15902:1;15895:31;15945:4;15942:1;15935:15;15969:4;15966:1;15959:15;15985:120;16025:1;16051;16041:35;;16056:18;;:::i;:::-;-1:-1:-1;16090:9:821;;15985:120::o;16809:342::-;17011:2;16993:21;;;17050:2;17030:18;;;17023:30;-1:-1:-1;;;17084:2:821;17069:18;;17062:48;17142:2;17127:18;;16809:342::o;17156:339::-;17358:2;17340:21;;;17397:2;17377:18;;;17370:30;-1:-1:-1;;;17431:2:821;17416:18;;17409:45;17486:2;17471:18;;17156:339::o;17500:341::-;17702:2;17684:21;;;17741:2;17721:18;;;17714:30;-1:-1:-1;;;17775:2:821;17760:18;;17753:47;17832:2;17817:18;;17500:341::o;18190:347::-;18392:2;18374:21;;;18431:2;18411:18;;;18404:30;-1:-1:-1;;;18465:2:821;18450:18;;18443:53;18528:2;18513:18;;18190:347::o;18542:125::-;18607:9;;;18628:10;;;18625:36;;;18641:18;;:::i;19015:521::-;19092:4;19098:6;19158:11;19145:25;19252:2;19248:7;19237:8;19221:14;19217:29;19213:43;19193:18;19189:68;19179:96;;19271:1;19268;19261:12;19179:96;19298:33;;19350:20;;;-1:-1:-1;;;;;;19382:30:821;;19379:50;;;19425:1;19422;19415:12;19379:50;19458:4;19446:17;;-1:-1:-1;19489:14:821;19485:27;;;19475:38;;19472:58;;;19526:1;19523;19516:12;19541:352;19752:6;19744;19739:3;19726:33;19847:2;19818:15;;;;-1:-1:-1;;;;;;19814:45:821;19778:16;;19803:57;;;19884:2;19876:11;;19541:352;-1:-1:-1;19541:352:821:o;20231:128::-;20298:9;;;20319:11;;;20316:37;;;20333:18;;:::i;20364:267::-;20453:6;20448:3;20441:19;20505:6;20498:5;20491:4;20486:3;20482:14;20469:43;-1:-1:-1;20557:1:821;20532:16;;;20550:4;20528:27;;;20521:38;;;;20613:2;20592:15;;;-1:-1:-1;;20588:29:821;20579:39;;;20575:50;;20364:267::o;20636:506::-;20879:6;20868:9;20861:25;20922:2;20917;20906:9;20902:18;20895:30;20842:4;20948:62;21006:2;20995:9;20991:18;20983:6;20975;20948:62;:::i;:::-;21058:9;21050:6;21046:22;21041:2;21030:9;21026:18;21019:50;21086;21129:6;21121;21113;21086:50;:::i;:::-;21078:58;20636:506;-1:-1:-1;;;;;;;;20636:506:821:o;21491:135::-;21530:3;21551:17;;;21548:43;;21571:18;;:::i;:::-;-1:-1:-1;21618:1:821;21607:13;;21491:135::o;21631:112::-;21663:1;21689;21679:35;;21694:18;;:::i;:::-;-1:-1:-1;21728:9:821;;21631:112::o;21748:336::-;21950:2;21932:21;;;21989:2;21969:18;;;21962:30;-1:-1:-1;;;22023:2:821;22008:18;;22001:42;22075:2;22060:18;;21748:336::o;22089:340::-;22291:2;22273:21;;;22330:2;22310:18;;;22303:30;-1:-1:-1;;;22364:2:821;22349:18;;22342:46;22420:2;22405:18;;22089:340::o;22434:465::-;22691:2;22680:9;22673:21;22654:4;22717:56;22769:2;22758:9;22754:18;22746:6;22717:56;:::i;:::-;22821:9;22813:6;22809:22;22804:2;22793:9;22789:18;22782:50;22849:44;22886:6;22878;22849:44;:::i;:::-;22841:52;22434:465;-1:-1:-1;;;;;22434:465:821:o;22904:339::-;23106:2;23088:21;;;23145:2;23125:18;;;23118:30;-1:-1:-1;;;23179:2:821;23164:18;;23157:45;23234:2;23219:18;;22904:339::o;23248:338::-;23450:2;23432:21;;;23489:2;23469:18;;;23462:30;-1:-1:-1;;;23523:2:821;23508:18;;23501:44;23577:2;23562:18;;23248:338::o;23717:543::-;23819:2;23814:3;23811:11;23808:446;;;23855:1;23879:5;23876:1;23869:16;23923:4;23920:1;23910:18;23993:2;23981:10;23977:19;23974:1;23970:27;23964:4;23960:38;24029:4;24017:10;24014:20;24011:47;;;-1:-1:-1;24052:4:821;24011:47;24107:2;24102:3;24098:12;24095:1;24091:20;24085:4;24081:31;24071:41;;24162:82;24180:2;24173:5;24170:13;24162:82;;;24225:17;;;24206:1;24195:13;24162:82;;24436:1345;24562:3;24556:10;-1:-1:-1;;;;;24581:6:821;24578:30;24575:56;;;24611:18;;:::i;:::-;24640:97;24730:6;24690:38;24722:4;24716:11;24690:38;:::i;:::-;24684:4;24640:97;:::i;:::-;24792:4;;24849:2;24838:14;;24866:1;24861:663;;;;25568:1;25585:6;25582:89;;;-1:-1:-1;25637:19:821;;;25631:26;25582:89;-1:-1:-1;;24393:1:821;24389:11;;;24385:24;24381:29;24371:40;24417:1;24413:11;;;24368:57;25684:81;;24831:944;;24861:663;23664:1;23657:14;;;23701:4;23688:18;;-1:-1:-1;;24897:20:821;;;25015:236;25029:7;25026:1;25023:14;25015:236;;;25118:19;;;25112:26;25097:42;;25210:27;;;;25178:1;25166:14;;;;25045:19;;25015:236;;;25019:3;25279:6;25270:7;25267:19;25264:201;;;25340:19;;;25334:26;-1:-1:-1;;25423:1:821;25419:14;;;25435:3;25415:24;25411:37;25407:42;25392:58;25377:74;;25264:201;-1:-1:-1;;;;;25511:1:821;25495:14;;;25491:22;25478:36;;-1:-1:-1;24436:1345:821:o;25786:383::-;25983:2;25972:9;25965:21;25946:4;26009:45;26050:2;26039:9;26035:18;26027:6;26009:45;:::i;:::-;26102:9;26094:6;26090:22;26085:2;26074:9;26070:18;26063:50;26130:33;26156:6;26148;26130:33;:::i;26427:827::-;-1:-1:-1;;;;;26824:15:821;;;26806:34;;26876:15;;26871:2;26856:18;;26849:43;26786:3;26923:2;26908:18;;26901:31;;;26749:4;;26955:57;;26992:19;;26984:6;26955:57;:::i;:::-;27060:9;27052:6;27048:22;27043:2;27032:9;27028:18;27021:50;27094:44;27131:6;27123;27094:44;:::i;:::-;27080:58;;27187:9;27179:6;27175:22;27169:3;27158:9;27154:19;27147:51;27215:33;27241:6;27233;27215:33;:::i;27259:249::-;27328:6;27381:2;27369:9;27360:7;27356:23;27352:32;27349:52;;;27397:1;27394;27387:12;27349:52;27429:9;27423:16;27448:30;27472:5;27448:30;:::i;27513:179::-;27548:3;27590:1;27572:16;27569:23;27566:120;;;27636:1;27633;27630;27615:23;-1:-1:-1;27673:1:821;27667:8;27662:3;27658:18;27566:120;27513:179;:::o;27697:671::-;27736:3;27778:4;27760:16;27757:26;27754:39;;;27697:671;:::o;27754:39::-;27820:2;27814:9;-1:-1:-1;;27885:16:821;27881:25;;27878:1;27814:9;27857:50;27936:4;27930:11;27960:16;-1:-1:-1;;;;;28066:2:821;28059:4;28051:6;28047:17;28044:25;28039:2;28031:6;28028:14;28025:45;28022:58;;;28073:5;;;;;27697:671;:::o;28022:58::-;28110:6;28104:4;28100:17;28089:28;;28146:3;28140:10;28173:2;28165:6;28162:14;28159:27;;;28179:5;;;;;;27697:671;:::o;28159:27::-;28263:2;28244:16;28238:4;28234:27;28230:36;28223:4;28214:6;28209:3;28205:16;28201:27;28198:69;28195:82;;;28270:5;;;;;;27697:671;:::o;28195:82::-;28286:57;28337:4;28328:6;28320;28316:19;28312:30;28306:4;28286:57;:::i;:::-;-1:-1:-1;28359:3:821;;27697:671;-1:-1:-1;;;;;27697:671:821:o;28718:339::-;28920:2;28902:21;;;28959:2;28939:18;;;28932:30;-1:-1:-1;;;28993:2:821;28978:18;;28971:45;29048:2;29033:18;;28718:339::o;29062:287::-;29191:3;29229:6;29223:13;29245:66;29304:6;29299:3;29292:4;29284:6;29280:17;29245:66;:::i;:::-;29327:16;;;;;29062:287;-1:-1:-1;;29062:287:821:o;29354:561::-;-1:-1:-1;;;;;29651:15:821;;;29633:34;;29703:15;;29698:2;29683:18;;29676:43;29750:2;29735:18;;29728:34;;;29793:2;29778:18;;29771:34;;;29613:3;29836;29821:19;;29814:32;;;29576:4;;29863:46;;29889:19;;29881:6;29863:46;:::i;:::-;29855:54;29354:561;-1:-1:-1;;;;;;;29354:561:821:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "batchFrozen(uint256)": "83040532",
    "burn(address,uint256,uint256)": "f5298aca",
    "burnBatch(address,uint256[],uint256[])": "6b20c454",
    "claim(address,uint256,uint256)": "2bc43fd9",
    "contractURI()": "e8a3d485",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "totalSupply(uint256)": "bd85b039",
    "uri(uint256)": "0e89341c",
    "verifyClaim(address,uint256,uint256)": "4bbb1abf"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\"},\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"DefaultRoyalty(address,uint256)\":{\"details\":\"Emitted when royalty info is updated.\"},\"MetadataFrozen()\":{\"details\":\"This event emits when the metadata of all tokens are frozen. While not currently supported by marketplaces, this event allows future indexing if desired.\"},\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"},\"RoyaltyForToken(uint256,address,uint256)\":{\"details\":\"Emitted when royalty recipient for tokenId is set\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed\"},\"TokensLazyMinted(uint256,uint256,string,bytes)\":{\"details\":\"Emitted when tokens are lazy minted.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard). The `_operator` argument MUST be msg.sender. The `_from` argument MUST be the address of the holder whose balance is decreased. The `_to` argument MUST be the address of the recipient whose balance is increased. The `_ids` argument MUST be the list of tokens being transferred. The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by. When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard). The `_operator` argument MUST be msg.sender. The `_from` argument MUST be the address of the holder whose balance is decreased. The `_to` argument MUST be the address of the recipient whose balance is increased. The `_id` argument MUST be the token type being transferred. The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by. When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\"},\"URI(string,uint256)\":{\"details\":\"MUST emit when the URI is updated for a token ID. URIs are defined in RFC 3986. The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\"}},\"kind\":\"dev\",\"methods\":{\"burn(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the NFT to burn.\",\"_owner\":\"The owner of the NFT to burn.\",\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"burnBatch(address,uint256[],uint256[])\":{\"params\":{\"_amounts\":\"The amounts of the NFTs to burn.\",\"_owner\":\"The owner of the NFTs to burn.\",\"_tokenIds\":\"The tokenIds of the NFTs to burn.\"}},\"claim(address,uint256,uint256)\":{\"details\":\"The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of tokens to mint.\",\"_receiver\":\"The recipient of the tokens to mint.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}},\"constructor\":{\"params\":{\"_defaultAdmin\":\"The default admin of the contract.\",\"_name\":\"The name of the contract.\",\"_royaltyBps\":\"The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\",\"_royaltyRecipient\":\"The address to receive royalties.\",\"_symbol\":\"The symbol of the contract.\"}},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"Additional bytes data to be used at the discretion of the consumer of the contract.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"uri(uint256)\":{\"params\":{\"_tokenId\":\"The tokenId of the NFT.\"},\"returns\":{\"_0\":\"The metadata URI for the given tokenId.\"}},\"verifyClaim(address,uint256,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}}},\"stateVariables\":{\"totalSupply\":{\"details\":\"Mapping from tokenId => total circulating supply of NFTs of that tokenId.\"}},\"version\":1},\"userdoc\":{\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens.\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenId.\"},\"burnBatch(address,uint256[],uint256[])\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenIds.\"},\"claim(address,uint256,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"constructor\":{\"notice\":\"Initializes the contract during construction.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"totalSupply(uint256)\":{\"notice\":\"Returns the total supply of NFTs of a given tokenId\"},\"uri(uint256)\":{\"notice\":\"Returns the metadata URI for the given tokenId.\"},\"verifyClaim(address,uint256,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"notice\":\"BASE:      ERC1155Base      EXTENSION: LazyMint  The `ERC1155LazyMint` smart contract implements the ERC1155 NFT standard.  It includes the following additions to standard ERC1155 logic:      - Lazy minting      - Ability to mint NFTs via the provided `mintTo` and `batchMintTo` functions.      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.  The `ERC1155LazyMint` contract uses the `LazyMint` extension.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC1155LazyMint.sol\":\"ERC1155LazyMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC1155LazyMint.sol\":{\"keccak256\":\"0xdf81210defe226ea6a3bd3e986ca75ffd8d58010ba7bc3ed9f66657312ff69af\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0b0edac74c1b7b949bf2ef4093b465d1b7e7261bd4ae9ac0e6a055386bed7eae\",\"dweb:/ipfs/Qmf4S5enGdMGEgBGZ8FXpDmj82R7xixAD4LwGntJMSyBsJ\"]},\"contracts/eip/ERC1155.sol\":{\"keccak256\":\"0xbac4d98722f937b876908b0baf24ff2854e65da244412db4622064d87c63a752\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://66af1bbb9833ad15656d41faafaf835fb98dec1a87554b143a3bb0e0eabe2fb3\",\"dweb:/ipfs/QmQUSxBYCT5VDvx4V5b4DX8gZyGgqSC42TKwYcd6CBZ2jf\"]},\"contracts/eip/interface/IERC1155.sol\":{\"keccak256\":\"0x19b9bee642c1b8e21c412a90fd08784dad7f567651edbe72bebf70d16551a2f4\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9c3f49fddb363032b69842d35cfc2aa72c8a36f3db2bed1e9bad3fc486b96df5\",\"dweb:/ipfs/QmQ5tn1fboZBmXWDXRfBMGJqYS9FtaQC8NYHaCiJapaJLF\"]},\"contracts/eip/interface/IERC1155Metadata.sol\":{\"keccak256\":\"0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43\",\"dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU\"]},\"contracts/eip/interface/IERC1155Receiver.sol\":{\"keccak256\":\"0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5\",\"dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6\",\"dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365\",\"dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e\",\"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95\",\"dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox\"]},\"contracts/extension/interface/IClaimableERC1155.sol\":{\"keccak256\":\"0x3fdfdad356fdd98e5dd1ec1f65d921c696b44bd9505f92a8440ad2430cfbb48c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bbc4177861066675e9e13caeead661f9003553c22edf1e4d5ed43062f497b52b\",\"dweb:/ipfs/QmPWERVCFoaCKkBnSNetX1YDhF7VtDVK6yEVYruubZRE1Q\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e\",\"dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd\"]},\"contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/lib/Address.sol\":{\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5\",\"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "_ids",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "_values",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferBatch",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferSingle",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_value",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "URI",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "_tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnBatch"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeBatchTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "uri",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "burn(address,uint256,uint256)": {
            "params": {
              "_amount": "The amount of the NFT to burn.",
              "_owner": "The owner of the NFT to burn.",
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "burnBatch(address,uint256[],uint256[])": {
            "params": {
              "_amounts": "The amounts of the NFTs to burn.",
              "_owner": "The owner of the NFTs to burn.",
              "_tokenIds": "The tokenIds of the NFTs to burn."
            }
          },
          "claim(address,uint256,uint256)": {
            "details": "The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of tokens to mint.",
              "_receiver": "The recipient of the tokens to mint.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          },
          "constructor": {
            "params": {
              "_defaultAdmin": "The default admin of the contract.",
              "_name": "The name of the contract.",
              "_royaltyBps": "The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)",
              "_royaltyRecipient": "The address to receive royalties.",
              "_symbol": "The symbol of the contract."
            }
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "Additional bytes data to be used at the discretion of the consumer of the contract."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "uri(uint256)": {
            "params": {
              "_tokenId": "The tokenId of the NFT."
            },
            "returns": {
              "_0": "The metadata URI for the given tokenId."
            }
          },
          "verifyClaim(address,uint256,uint256)": {
            "details": "Checks a request to claim NFTs against a custom condition.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "balanceOf(address,uint256)": {
            "notice": "Get the balance of an account's Tokens."
          },
          "burn(address,uint256,uint256)": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenId."
          },
          "burnBatch(address,uint256[],uint256[])": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenIds."
          },
          "claim(address,uint256,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc."
          },
          "constructor": {
            "notice": "Initializes the contract during construction."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isApprovedForAll(address,address)": {
            "notice": "Queries the approval status of an operator for a given owner."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "totalSupply(uint256)": {
            "notice": "Returns the total supply of NFTs of a given tokenId"
          },
          "uri(uint256)": {
            "notice": "Returns the metadata URI for the given tokenId."
          },
          "verifyClaim(address,uint256,uint256)": {
            "notice": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "lib/sstore2/=lib/dynamic-contracts/lib/sstore2/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC1155LazyMint.sol": "ERC1155LazyMint"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC1155LazyMint.sol": {
        "keccak256": "0xdf81210defe226ea6a3bd3e986ca75ffd8d58010ba7bc3ed9f66657312ff69af",
        "urls": [
          "bzz-raw://0b0edac74c1b7b949bf2ef4093b465d1b7e7261bd4ae9ac0e6a055386bed7eae",
          "dweb:/ipfs/Qmf4S5enGdMGEgBGZ8FXpDmj82R7xixAD4LwGntJMSyBsJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC1155.sol": {
        "keccak256": "0xbac4d98722f937b876908b0baf24ff2854e65da244412db4622064d87c63a752",
        "urls": [
          "bzz-raw://66af1bbb9833ad15656d41faafaf835fb98dec1a87554b143a3bb0e0eabe2fb3",
          "dweb:/ipfs/QmQUSxBYCT5VDvx4V5b4DX8gZyGgqSC42TKwYcd6CBZ2jf"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC1155.sol": {
        "keccak256": "0x19b9bee642c1b8e21c412a90fd08784dad7f567651edbe72bebf70d16551a2f4",
        "urls": [
          "bzz-raw://9c3f49fddb363032b69842d35cfc2aa72c8a36f3db2bed1e9bad3fc486b96df5",
          "dweb:/ipfs/QmQ5tn1fboZBmXWDXRfBMGJqYS9FtaQC8NYHaCiJapaJLF"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Metadata.sol": {
        "keccak256": "0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e",
        "urls": [
          "bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43",
          "dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Receiver.sol": {
        "keccak256": "0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00",
        "urls": [
          "bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5",
          "dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa",
        "urls": [
          "bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6",
          "dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345",
        "urls": [
          "bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365",
          "dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
        "urls": [
          "bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
          "dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501",
        "urls": [
          "bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95",
          "dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC1155.sol": {
        "keccak256": "0x3fdfdad356fdd98e5dd1ec1f65d921c696b44bd9505f92a8440ad2430cfbb48c",
        "urls": [
          "bzz-raw://bbc4177861066675e9e13caeead661f9003553c22edf1e4d5ed43062f497b52b",
          "dweb:/ipfs/QmPWERVCFoaCKkBnSNetX1YDhF7VtDVK6yEVYruubZRE1Q"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d",
        "urls": [
          "bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e",
          "dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/lib/Address.sol": {
        "keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
        "urls": [
          "bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
          "dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/Strings.sol": {
        "keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
        "urls": [
          "bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
          "dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC1155LazyMint.sol",
    "id": 1998,
    "exportedSymbols": {
      "Address": [
        64760
      ],
      "BatchMintMetadata": [
        17840
      ],
      "ContractMetadata": [
        18093
      ],
      "ERC1155": [
        7899
      ],
      "ERC1155LazyMint": [
        1997
      ],
      "IClaimableERC1155": [
        33014
      ],
      "IContractMetadata": [
        33084
      ],
      "IERC165": [
        13945
      ],
      "IERC2981": [
        14089
      ],
      "ILazyMint": [
        33463
      ],
      "IMulticall": [
        33577
      ],
      "IOwnable": [
        33834
      ],
      "IRoyalty": [
        34061
      ],
      "LazyMint": [
        20828
      ],
      "Multicall": [
        21206
      ],
      "Ownable": [
        21764
      ],
      "ReentrancyGuard": [
        47279
      ],
      "Royalty": [
        23031
      ],
      "Strings": [
        66084
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:11551:3",
    "nodes": [
      {
        "id": 1522,
        "nodeType": "PragmaDirective",
        "src": "39:23:3",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 1524,
        "nodeType": "ImportDirective",
        "src": "86:45:3",
        "nodes": [],
        "absolutePath": "contracts/eip/ERC1155.sol",
        "file": "../eip/ERC1155.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 7900,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1523,
              "name": "ERC1155",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7899,
              "src": "95:7:3",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 1525,
        "nodeType": "ImportDirective",
        "src": "133:43:3",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 18094,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1526,
        "nodeType": "ImportDirective",
        "src": "177:36:3",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 21207,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1527,
        "nodeType": "ImportDirective",
        "src": "214:34:3",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 21765,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1528,
        "nodeType": "ImportDirective",
        "src": "249:34:3",
        "nodes": [],
        "absolutePath": "contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 23032,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1529,
        "nodeType": "ImportDirective",
        "src": "284:44:3",
        "nodes": [],
        "absolutePath": "contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 17841,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1530,
        "nodeType": "ImportDirective",
        "src": "329:35:3",
        "nodes": [],
        "absolutePath": "contracts/extension/LazyMint.sol",
        "file": "../extension/LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 20829,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1531,
        "nodeType": "ImportDirective",
        "src": "365:54:3",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IClaimableERC1155.sol",
        "file": "../extension/interface/IClaimableERC1155.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 33015,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1532,
        "nodeType": "ImportDirective",
        "src": "421:28:3",
        "nodes": [],
        "absolutePath": "contracts/lib/Strings.sol",
        "file": "../lib/Strings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 66085,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1533,
        "nodeType": "ImportDirective",
        "src": "450:68:3",
        "nodes": [],
        "absolutePath": "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol",
        "file": "../external-deps/openzeppelin/security/ReentrancyGuard.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1998,
        "sourceUnit": 47280,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1997,
        "nodeType": "ContractDefinition",
        "src": "1704:9885:3",
        "nodes": [
          {
            "id": 1555,
            "nodeType": "UsingForDirective",
            "src": "1894:26:3",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 1553,
              "name": "Strings",
              "nameLocations": [
                "1900:7:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66084,
              "src": "1900:7:3"
            },
            "typeName": {
              "id": 1554,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1912:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 1560,
            "nodeType": "VariableDeclaration",
            "src": "2269:46:3",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 1556,
              "nodeType": "StructuredDocumentation",
              "src": "2098:166:3",
              "text": "  @notice Returns the total supply of NFTs of a given tokenId\n  @dev Mapping from tokenId => total circulating supply of NFTs of that tokenId."
            },
            "functionSelector": "bd85b039",
            "mutability": "mutable",
            "name": "totalSupply",
            "nameLocation": "2304:11:3",
            "scope": 1997,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 1559,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 1557,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2277:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "2269:27:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 1558,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2288:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 1588,
            "nodeType": "FunctionDefinition",
            "src": "2947:306:3",
            "nodes": [],
            "body": {
              "id": 1587,
              "nodeType": "Block",
              "src": "3144:109:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1579,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1563,
                        "src": "3166:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1578,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21757,
                      "src": "3154:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1580,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3154:26:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1581,
                  "nodeType": "ExpressionStatement",
                  "src": "3154:26:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1583,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1569,
                        "src": "3215:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1584,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1571,
                        "src": "3234:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 1582,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22962,
                      "src": "3190:24:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1585,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3190:56:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1586,
                  "nodeType": "ExpressionStatement",
                  "src": "3190:56:3"
                }
              ]
            },
            "documentation": {
              "id": 1561,
              "nodeType": "StructuredDocumentation",
              "src": "2501:441:3",
              "text": " @notice Initializes the contract during construction.\n @param _defaultAdmin     The default admin of the contract.\n @param _name             The name of the contract.\n @param _symbol           The symbol of the contract.\n @param _royaltyRecipient The address to receive royalties.\n @param _royaltyBps       The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1574,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1565,
                    "src": "3128:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 1575,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1567,
                    "src": "3135:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 1576,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 1573,
                  "name": "ERC1155",
                  "nameLocations": [
                    "3120:7:3"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7899,
                  "src": "3120:7:3"
                },
                "nodeType": "ModifierInvocation",
                "src": "3120:23:3"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 1572,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1563,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "2976:13:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1588,
                  "src": "2968:21:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1562,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2968:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1565,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "3013:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1588,
                  "src": "2999:19:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1564,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2999:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1567,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "3042:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1588,
                  "src": "3028:21:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1566,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3028:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1569,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "3067:17:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1588,
                  "src": "3059:25:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1568,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3059:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1571,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "3102:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1588,
                  "src": "3094:19:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 1570,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3094:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2958:161:3"
            },
            "returnParameters": {
              "id": 1577,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3144:0:3"
            },
            "scope": 1997,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 1615,
            "nodeType": "FunctionDefinition",
            "src": "3631:219:3",
            "nodes": [],
            "body": {
              "id": 1614,
              "nodeType": "Block",
              "src": "3715:135:3",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    1598
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1598,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "3739:8:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1614,
                      "src": "3725:22:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1597,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3725:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1602,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1600,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1591,
                        "src": "3762:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1599,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17682,
                      "src": "3750:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 1601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3750:21:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3725:46:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1607,
                            "name": "batchUri",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1598,
                            "src": "3812:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 1608,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1591,
                                "src": "3822:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1609,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3831:8:3",
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 65898,
                              "src": "3822:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 1610,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3822:19:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 1605,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3795:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1606,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "3799:12:3",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3795:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1611,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3795:47:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1604,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3788:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 1603,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3788:6:3",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 1612,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3788:55:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 1596,
                  "id": 1613,
                  "nodeType": "Return",
                  "src": "3781:62:3"
                }
              ]
            },
            "baseFunctions": [
              6951
            ],
            "documentation": {
              "id": 1589,
              "nodeType": "StructuredDocumentation",
              "src": "3443:183:3",
              "text": " @notice Returns the metadata URI for the given tokenId.\n @param _tokenId The tokenId of the NFT.\n @return The metadata URI for the given tokenId."
            },
            "functionSelector": "0e89341c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nameLocation": "3640:3:3",
            "overrides": {
              "id": 1593,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3682:8:3"
            },
            "parameters": {
              "id": 1592,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1591,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3652:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1615,
                  "src": "3644:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1590,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3644:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3643:18:3"
            },
            "returnParameters": {
              "id": 1596,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1595,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1615,
                  "src": "3700:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1594,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3700:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3699:15:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1657,
            "nodeType": "FunctionDefinition",
            "src": "5011:504:3",
            "nodes": [],
            "body": {
              "id": 1656,
              "nodeType": "Block",
              "src": "5118:397:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1631,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1628,
                          "name": "_tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1620,
                          "src": "5136:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1629,
                            "name": "nextTokenIdToMint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1829,
                            "src": "5147:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 1630,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5147:19:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5136:30:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "696e76616c6964206964",
                        "id": 1632,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5168:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526",
                          "typeString": "literal_string \"invalid id\""
                        },
                        "value": "invalid id"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526",
                          "typeString": "literal_string \"invalid id\""
                        }
                      ],
                      "id": 1627,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5128:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1633,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5128:53:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1634,
                  "nodeType": "ExpressionStatement",
                  "src": "5128:53:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1636,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5203:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5207:6:3",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5203:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1638,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1620,
                        "src": "5215:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1639,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1622,
                        "src": "5225:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1635,
                      "name": "verifyClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1668,
                      "src": "5191:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256) view"
                      }
                    },
                    "id": 1640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5191:44:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1641,
                  "nodeType": "ExpressionStatement",
                  "src": "5191:44:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1643,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1618,
                        "src": "5335:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1644,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1620,
                        "src": "5346:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1645,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1622,
                        "src": "5356:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1642,
                      "name": "_transferTokensOnClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1847,
                      "src": "5312:22:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 1646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5312:54:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1647,
                  "nodeType": "ExpressionStatement",
                  "src": "5312:54:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1649,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5465:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1650,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5469:6:3",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5465:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1651,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1618,
                        "src": "5477:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1652,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1620,
                        "src": "5488:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1653,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1622,
                        "src": "5498:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1648,
                      "name": "TokensClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32993,
                      "src": "5451:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256)"
                      }
                    },
                    "id": 1654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5451:57:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1655,
                  "nodeType": "EmitStatement",
                  "src": "5446:62:3"
                }
              ]
            },
            "baseFunctions": [
              33003
            ],
            "documentation": {
              "id": 1616,
              "nodeType": "StructuredDocumentation",
              "src": "4035:971:3",
              "text": "  @notice          Lets an address claim multiple lazy minted NFTs at once to a recipient.\n                   This function prevents any reentrant calls, and is not allowed to be overridden.\n                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`\n                   functions to create custom logic for verification and claiming,\n                   for e.g. price collection, allowlist, max quantity, etc.\n  @dev             The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.\n                   The logic in `transferTokensOnClaim` does actual minting of tokens,\n                   can also be used to apply other state changes.\n  @param _receiver  The recipient of the tokens to mint.\n  @param _tokenId   The tokenId of the lazy minted NFT to mint.\n  @param _quantity  The number of tokens to mint."
            },
            "functionSelector": "2bc43fd9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1625,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1624,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "5105:12:3"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47278,
                  "src": "5105:12:3"
                },
                "nodeType": "ModifierInvocation",
                "src": "5105:12:3"
              }
            ],
            "name": "claim",
            "nameLocation": "5020:5:3",
            "parameters": {
              "id": 1623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1618,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "5034:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1657,
                  "src": "5026:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1617,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5026:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1620,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5053:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1657,
                  "src": "5045:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1619,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5045:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1622,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "5071:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1657,
                  "src": "5063:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1621,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5063:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5025:56:3"
            },
            "returnParameters": {
              "id": 1626,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5118:0:3"
            },
            "scope": 1997,
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1668,
            "nodeType": "FunctionDefinition",
            "src": "5995:98:3",
            "nodes": [],
            "body": {
              "id": 1667,
              "nodeType": "Block",
              "src": "6091:2:3",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              33013
            ],
            "documentation": {
              "id": 1658,
              "nodeType": "StructuredDocumentation",
              "src": "5521:469:3",
              "text": "  @notice          Override this function to add logic for claim verification, based on conditions\n                   such as allowlist, price, max quantity etc.\n  @dev             Checks a request to claim NFTs against a custom condition.\n  @param _claimer   Caller of the claim function.\n  @param _tokenId   The tokenId of the lazy minted NFT to mint.\n  @param _quantity  The number of NFTs being claimed."
            },
            "functionSelector": "4bbb1abf",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyClaim",
            "nameLocation": "6004:11:3",
            "parameters": {
              "id": 1665,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1660,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "6024:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1668,
                  "src": "6016:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1659,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6016:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1662,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6042:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1668,
                  "src": "6034:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1661,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6034:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1664,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "6060:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1668,
                  "src": "6052:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1663,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6052:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6015:55:3"
            },
            "returnParameters": {
              "id": 1666,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6091:0:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1714,
            "nodeType": "FunctionDefinition",
            "src": "6378:346:3",
            "nodes": [],
            "body": {
              "id": 1713,
              "nodeType": "Block",
              "src": "6460:264:3",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    1679
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1679,
                      "mutability": "mutable",
                      "name": "caller",
                      "nameLocation": "6478:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1713,
                      "src": "6470:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1678,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6470:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1682,
                  "initialValue": {
                    "expression": {
                      "id": 1680,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "6487:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1681,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "6491:6:3",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "6487:10:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6470:27:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1686,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1684,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1679,
                            "src": "6516:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 1685,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1671,
                            "src": "6526:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6516:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1687,
                              "name": "isApprovedForAll",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6898,
                              "src": "6536:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(address => bool))"
                              }
                            },
                            "id": 1689,
                            "indexExpression": {
                              "id": 1688,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1671,
                              "src": "6553:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6536:24:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1691,
                          "indexExpression": {
                            "id": 1690,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1679,
                            "src": "6561:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6536:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6516:52:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "556e617070726f7665642063616c6c6572",
                        "id": 1693,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6570:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        },
                        "value": "Unapproved caller"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        }
                      ],
                      "id": 1683,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6508:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1694,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6508:82:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1695,
                  "nodeType": "ExpressionStatement",
                  "src": "6508:82:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1703,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1697,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6892,
                              "src": "6608:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(uint256 => uint256))"
                              }
                            },
                            "id": 1699,
                            "indexExpression": {
                              "id": 1698,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1671,
                              "src": "6618:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6608:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1701,
                          "indexExpression": {
                            "id": 1700,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1673,
                            "src": "6626:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6608:27:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 1702,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1675,
                          "src": "6639:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6608:38:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f75676820746f6b656e73206f776e6564",
                        "id": 1704,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6648:25:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                          "typeString": "literal_string \"Not enough tokens owned\""
                        },
                        "value": "Not enough tokens owned"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                          "typeString": "literal_string \"Not enough tokens owned\""
                        }
                      ],
                      "id": 1696,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6600:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1705,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6600:74:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1706,
                  "nodeType": "ExpressionStatement",
                  "src": "6600:74:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1708,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1671,
                        "src": "6691:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1709,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1673,
                        "src": "6699:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1710,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1675,
                        "src": "6709:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1707,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7610,
                      "src": "6685:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 1711,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6685:32:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1712,
                  "nodeType": "ExpressionStatement",
                  "src": "6685:32:3"
                }
              ]
            },
            "documentation": {
              "id": 1669,
              "nodeType": "StructuredDocumentation",
              "src": "6099:274:3",
              "text": "  @notice         Lets an owner or approved operator burn NFTs of the given tokenId.\n  @param _owner   The owner of the NFT to burn.\n  @param _tokenId The tokenId of the NFT to burn.\n  @param _amount  The amount of the NFT to burn."
            },
            "functionSelector": "f5298aca",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "6387:4:3",
            "parameters": {
              "id": 1676,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1671,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "6400:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1714,
                  "src": "6392:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1670,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6392:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1673,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6416:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1714,
                  "src": "6408:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1672,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6408:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1675,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "6434:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1714,
                  "src": "6426:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1674,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6426:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6391:51:3"
            },
            "returnParameters": {
              "id": 1677,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6460:0:3"
            },
            "scope": 1997,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 1789,
            "nodeType": "FunctionDefinition",
            "src": "7018:534:3",
            "nodes": [],
            "body": {
              "id": 1788,
              "nodeType": "Block",
              "src": "7125:427:3",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    1727
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1727,
                      "mutability": "mutable",
                      "name": "caller",
                      "nameLocation": "7143:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1788,
                      "src": "7135:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1726,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7135:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1730,
                  "initialValue": {
                    "expression": {
                      "id": 1728,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "7152:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1729,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "7156:6:3",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "7152:10:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7135:27:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1740,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1732,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1727,
                            "src": "7181:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 1733,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1717,
                            "src": "7191:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7181:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1735,
                              "name": "isApprovedForAll",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6898,
                              "src": "7201:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(address => bool))"
                              }
                            },
                            "id": 1737,
                            "indexExpression": {
                              "id": 1736,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1717,
                              "src": "7218:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7201:24:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1739,
                          "indexExpression": {
                            "id": 1738,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1727,
                            "src": "7226:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7201:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "7181:52:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "556e617070726f7665642063616c6c6572",
                        "id": 1741,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7235:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        },
                        "value": "Unapproved caller"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        }
                      ],
                      "id": 1731,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7173:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1742,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7173:82:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1743,
                  "nodeType": "ExpressionStatement",
                  "src": "7173:82:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1749,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1745,
                            "name": "_tokenIds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1720,
                            "src": "7273:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "id": 1746,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7283:6:3",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7273:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 1747,
                            "name": "_amounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1723,
                            "src": "7293:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "id": 1748,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7302:6:3",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7293:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7273:35:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4c656e677468206d69736d61746368",
                        "id": 1750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7310:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bb46a6fe2ea6b18f462b236ffc808abf66026114a0bc6a6c72c11149e00d9ea8",
                          "typeString": "literal_string \"Length mismatch\""
                        },
                        "value": "Length mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bb46a6fe2ea6b18f462b236ffc808abf66026114a0bc6a6c72c11149e00d9ea8",
                          "typeString": "literal_string \"Length mismatch\""
                        }
                      ],
                      "id": 1744,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7265:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7265:63:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1752,
                  "nodeType": "ExpressionStatement",
                  "src": "7265:63:3"
                },
                {
                  "body": {
                    "id": 1780,
                    "nodeType": "Block",
                    "src": "7389:107:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1776,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1766,
                                    "name": "balanceOf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6892,
                                    "src": "7411:9:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(uint256 => uint256))"
                                    }
                                  },
                                  "id": 1768,
                                  "indexExpression": {
                                    "id": 1767,
                                    "name": "_owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1717,
                                    "src": "7421:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7411:17:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                    "typeString": "mapping(uint256 => uint256)"
                                  }
                                },
                                "id": 1772,
                                "indexExpression": {
                                  "baseExpression": {
                                    "id": 1769,
                                    "name": "_tokenIds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1720,
                                    "src": "7429:9:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1771,
                                  "indexExpression": {
                                    "id": 1770,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1754,
                                    "src": "7439:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7429:12:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7411:31:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "baseExpression": {
                                  "id": 1773,
                                  "name": "_amounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1723,
                                  "src": "7446:8:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 1775,
                                "indexExpression": {
                                  "id": 1774,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1754,
                                  "src": "7455:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7446:11:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7411:46:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420656e6f75676820746f6b656e73206f776e6564",
                              "id": 1777,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7459:25:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                                "typeString": "literal_string \"Not enough tokens owned\""
                              },
                              "value": "Not enough tokens owned"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                                "typeString": "literal_string \"Not enough tokens owned\""
                              }
                            ],
                            "id": 1765,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "7403:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1778,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7403:82:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1779,
                        "nodeType": "ExpressionStatement",
                        "src": "7403:82:3"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1760,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1757,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1754,
                      "src": "7359:1:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 1758,
                        "name": "_tokenIds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1720,
                        "src": "7363:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      "id": 1759,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7373:6:3",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "7363:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7359:20:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1781,
                  "initializationExpression": {
                    "assignments": [
                      1754
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1754,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "7352:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1781,
                        "src": "7344:9:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1753,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7344:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 1756,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 1755,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7356:1:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "7344:13:3"
                  },
                  "isSimpleCounterLoop": false,
                  "loopExpression": {
                    "expression": {
                      "id": 1763,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 1761,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1754,
                        "src": "7381:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "+=",
                      "rightHandSide": {
                        "hexValue": "31",
                        "id": 1762,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7386:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "7381:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1764,
                    "nodeType": "ExpressionStatement",
                    "src": "7381:6:3"
                  },
                  "nodeType": "ForStatement",
                  "src": "7339:157:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1783,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1717,
                        "src": "7517:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1784,
                        "name": "_tokenIds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1720,
                        "src": "7525:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 1785,
                        "name": "_amounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1723,
                        "src": "7536:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      ],
                      "id": 1782,
                      "name": "_burnBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7720,
                      "src": "7506:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256[] memory,uint256[] memory)"
                      }
                    },
                    "id": 1786,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7506:39:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1787,
                  "nodeType": "ExpressionStatement",
                  "src": "7506:39:3"
                }
              ]
            },
            "documentation": {
              "id": 1715,
              "nodeType": "StructuredDocumentation",
              "src": "6730:283:3",
              "text": "  @notice         Lets an owner or approved operator burn NFTs of the given tokenIds.\n  @param _owner    The owner of the NFTs to burn.\n  @param _tokenIds The tokenIds of the NFTs to burn.\n  @param _amounts  The amounts of the NFTs to burn."
            },
            "functionSelector": "6b20c454",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnBatch",
            "nameLocation": "7027:9:3",
            "parameters": {
              "id": 1724,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1717,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "7045:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1789,
                  "src": "7037:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1716,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7037:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1720,
                  "mutability": "mutable",
                  "name": "_tokenIds",
                  "nameLocation": "7070:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1789,
                  "src": "7053:26:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1718,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "7053:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1719,
                    "nodeType": "ArrayTypeName",
                    "src": "7053:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1723,
                  "mutability": "mutable",
                  "name": "_amounts",
                  "nameLocation": "7098:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1789,
                  "src": "7081:25:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1721,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "7081:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1722,
                    "nodeType": "ArrayTypeName",
                    "src": "7081:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7036:71:3"
            },
            "returnParameters": {
              "id": 1725,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7125:0:3"
            },
            "scope": 1997,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 1820,
            "nodeType": "FunctionDefinition",
            "src": "7844:449:3",
            "nodes": [],
            "body": {
              "id": 1819,
              "nodeType": "Block",
              "src": "7953:340:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1817,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 1810,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1806,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 1802,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1800,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1792,
                            "src": "7982:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 1801,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7997:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "7982:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 1805,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1803,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1792,
                            "src": "8057:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30786439623637613236",
                            "id": 1804,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8072:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3652614694_by_1",
                              "typeString": "int_const 3652614694"
                            },
                            "value": "0xd9b67a26"
                          },
                          "src": "8057:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "7982:100:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 1809,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1807,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1792,
                          "src": "8133:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783065383933343163",
                          "id": 1808,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8148:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_243872796_by_1",
                            "typeString": "int_const 243872796"
                          },
                          "value": "0x0e89341c"
                        },
                        "src": "8133:25:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "7982:176:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 1816,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1811,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1792,
                        "src": "8220:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1813,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14089,
                              "src": "8240:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$14089_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$14089_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 1812,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "8235:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 1814,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8235:14:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$14089",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 1815,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "8250:11:3",
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "8235:26:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "8220:41:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "7982:279:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1799,
                  "id": 1818,
                  "nodeType": "Return",
                  "src": "7963:298:3"
                }
              ]
            },
            "baseFunctions": [
              6938,
              13944
            ],
            "documentation": {
              "id": 1790,
              "nodeType": "StructuredDocumentation",
              "src": "7738:101:3",
              "text": " @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\n @inheritdoc IERC165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "7853:17:3",
            "overrides": {
              "id": 1796,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 1794,
                  "name": "ERC1155",
                  "nameLocations": [
                    "7920:7:3"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7899,
                  "src": "7920:7:3"
                },
                {
                  "id": 1795,
                  "name": "IERC165",
                  "nameLocations": [
                    "7929:7:3"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13945,
                  "src": "7929:7:3"
                }
              ],
              "src": "7911:26:3"
            },
            "parameters": {
              "id": 1793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1792,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "7878:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1820,
                  "src": "7871:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1791,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "7871:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7870:20:3"
            },
            "returnParameters": {
              "id": 1799,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1798,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1820,
                  "src": "7947:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1797,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7947:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7946:6:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1829,
            "nodeType": "FunctionDefinition",
            "src": "8557:112:3",
            "nodes": [],
            "body": {
              "id": 1828,
              "nodeType": "Block",
              "src": "8624:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 1826,
                    "name": "nextTokenIdToLazyMint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 20762,
                    "src": "8641:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1825,
                  "id": 1827,
                  "nodeType": "Return",
                  "src": "8634:28:3"
                }
              ]
            },
            "documentation": {
              "id": 1821,
              "nodeType": "StructuredDocumentation",
              "src": "8481:71:3",
              "text": "@notice The tokenId assigned to the next new NFT to be lazy minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "8566:17:3",
            "parameters": {
              "id": 1822,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8583:2:3"
            },
            "returnParameters": {
              "id": 1825,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1824,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1829,
                  "src": "8615:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1823,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8615:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8614:9:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1847,
            "nodeType": "FunctionDefinition",
            "src": "9432:163:3",
            "nodes": [],
            "body": {
              "id": 1846,
              "nodeType": "Block",
              "src": "9537:58:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1840,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1832,
                        "src": "9553:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1841,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1834,
                        "src": "9564:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1842,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1836,
                        "src": "9574:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 1843,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9585:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 1839,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7434,
                      "src": "9547:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,uint256,bytes memory)"
                      }
                    },
                    "id": 1844,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9547:41:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1845,
                  "nodeType": "ExpressionStatement",
                  "src": "9547:41:3"
                }
              ]
            },
            "documentation": {
              "id": 1830,
              "nodeType": "StructuredDocumentation",
              "src": "8857:570:3",
              "text": "  @notice          Mints tokens to receiver on claim.\n                   Any state changes related to `claim` must be applied\n                   here by overriding this function.\n  @dev             Override this function to add logic for state updation.\n                   When overriding, apply any state changes before `_mint`.\n  @param _receiver The receiver of the tokens to mint.\n  @param _tokenId  The tokenId of the lazy minted NFT to mint.\n  @param _quantity The number of tokens to mint."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "9441:22:3",
            "parameters": {
              "id": 1837,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1832,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "9472:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1847,
                  "src": "9464:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1831,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9464:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1834,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "9491:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1847,
                  "src": "9483:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1833,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9483:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1836,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "9509:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1847,
                  "src": "9501:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1835,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9501:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9463:56:3"
            },
            "returnParameters": {
              "id": 1838,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9537:0:3"
            },
            "scope": 1997,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1861,
            "nodeType": "FunctionDefinition",
            "src": "9687:115:3",
            "nodes": [],
            "body": {
              "id": 1860,
              "nodeType": "Block",
              "src": "9757:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1858,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1854,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9774:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1855,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9778:6:3",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9774:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1856,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "9788:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1857,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9788:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9774:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1853,
                  "id": 1859,
                  "nodeType": "Return",
                  "src": "9767:28:3"
                }
              ]
            },
            "baseFunctions": [
              20827
            ],
            "documentation": {
              "id": 1848,
              "nodeType": "StructuredDocumentation",
              "src": "9601:81:3",
              "text": "@dev Returns whether lazy minting can be done in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canLazyMint",
            "nameLocation": "9696:12:3",
            "overrides": {
              "id": 1850,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9733:8:3"
            },
            "parameters": {
              "id": 1849,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9708:2:3"
            },
            "returnParameters": {
              "id": 1853,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1852,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1861,
                  "src": "9751:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1851,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9751:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9750:6:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1875,
            "nodeType": "FunctionDefinition",
            "src": "9898:121:3",
            "nodes": [],
            "body": {
              "id": 1874,
              "nodeType": "Block",
              "src": "9974:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1872,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1868,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9991:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1869,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9995:6:3",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9991:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1870,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "10005:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1871,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10005:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9991:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1867,
                  "id": 1873,
                  "nodeType": "Return",
                  "src": "9984:28:3"
                }
              ]
            },
            "baseFunctions": [
              18092
            ],
            "documentation": {
              "id": 1862,
              "nodeType": "StructuredDocumentation",
              "src": "9808:85:3",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "9907:18:3",
            "overrides": {
              "id": 1864,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9950:8:3"
            },
            "parameters": {
              "id": 1863,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9925:2:3"
            },
            "returnParameters": {
              "id": 1867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1866,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1875,
                  "src": "9968:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1865,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9968:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9967:6:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1889,
            "nodeType": "FunctionDefinition",
            "src": "10103:115:3",
            "nodes": [],
            "body": {
              "id": 1888,
              "nodeType": "Block",
              "src": "10173:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1886,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1882,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10190:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1883,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10194:6:3",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10190:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1884,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "10204:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1885,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10204:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10190:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1881,
                  "id": 1887,
                  "nodeType": "Return",
                  "src": "10183:28:3"
                }
              ]
            },
            "baseFunctions": [
              21763
            ],
            "documentation": {
              "id": 1876,
              "nodeType": "StructuredDocumentation",
              "src": "10025:73:3",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "10112:12:3",
            "overrides": {
              "id": 1878,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10149:8:3"
            },
            "parameters": {
              "id": 1877,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10124:2:3"
            },
            "returnParameters": {
              "id": 1881,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1880,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1889,
                  "src": "10167:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1879,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10167:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10166:6:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1903,
            "nodeType": "FunctionDefinition",
            "src": "10309:121:3",
            "nodes": [],
            "body": {
              "id": 1902,
              "nodeType": "Block",
              "src": "10385:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1900,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1896,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10402:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1897,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10406:6:3",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10402:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1898,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "10416:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1899,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10416:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10402:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1895,
                  "id": 1901,
                  "nodeType": "Return",
                  "src": "10395:28:3"
                }
              ]
            },
            "baseFunctions": [
              23030
            ],
            "documentation": {
              "id": 1890,
              "nodeType": "StructuredDocumentation",
              "src": "10224:80:3",
              "text": "@dev Returns whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "10318:18:3",
            "overrides": {
              "id": 1892,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10361:8:3"
            },
            "parameters": {
              "id": 1891,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10336:2:3"
            },
            "returnParameters": {
              "id": 1895,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1894,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1903,
                  "src": "10379:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1893,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10379:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10378:6:3"
            },
            "scope": 1997,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1996,
            "nodeType": "FunctionDefinition",
            "src": "10955:632:3",
            "nodes": [],
            "body": {
              "id": 1995,
              "nodeType": "Block",
              "src": "11176:411:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1925,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1906,
                        "src": "11213:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1926,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1908,
                        "src": "11223:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1927,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1910,
                        "src": "11229:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1928,
                        "name": "ids",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1913,
                        "src": "11233:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 1929,
                        "name": "amounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1916,
                        "src": "11238:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 1930,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1918,
                        "src": "11247:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1922,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "11186:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC1155LazyMint_$1997_$",
                          "typeString": "type(contract super ERC1155LazyMint)"
                        }
                      },
                      "id": 1924,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11192:20:3",
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7738,
                      "src": "11186:26:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"
                      }
                    },
                    "id": 1931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11186:66:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1932,
                  "nodeType": "ExpressionStatement",
                  "src": "11186:66:3"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1938,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1933,
                      "name": "from",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1908,
                      "src": "11267:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 1936,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11283:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1935,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "11275:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1934,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11275:7:3",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1937,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11275:10:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11267:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1963,
                  "nodeType": "IfStatement",
                  "src": "11263:155:3",
                  "trueBody": {
                    "id": 1962,
                    "nodeType": "Block",
                    "src": "11287:131:3",
                    "statements": [
                      {
                        "body": {
                          "id": 1960,
                          "nodeType": "Block",
                          "src": "11342:66:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 1958,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1950,
                                    "name": "totalSupply",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1560,
                                    "src": "11360:11:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 1954,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 1951,
                                      "name": "ids",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1913,
                                      "src": "11372:3:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 1953,
                                    "indexExpression": {
                                      "id": 1952,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1940,
                                      "src": "11376:1:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "11372:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "11360:19:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1955,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1916,
                                    "src": "11383:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1957,
                                  "indexExpression": {
                                    "id": 1956,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1940,
                                    "src": "11391:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "11383:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "11360:33:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1959,
                              "nodeType": "ExpressionStatement",
                              "src": "11360:33:3"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1946,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1943,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "11321:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1944,
                              "name": "ids",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1913,
                              "src": "11325:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1945,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "11329:6:3",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "11325:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11321:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1961,
                        "initializationExpression": {
                          "assignments": [
                            1940
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1940,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "11314:1:3",
                              "nodeType": "VariableDeclaration",
                              "scope": 1961,
                              "src": "11306:9:3",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1939,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "11306:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1942,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1941,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11318:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "11306:13:3"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1948,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "11337:3:3",
                            "subExpression": {
                              "id": 1947,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1940,
                              "src": "11339:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1949,
                          "nodeType": "ExpressionStatement",
                          "src": "11337:3:3"
                        },
                        "nodeType": "ForStatement",
                        "src": "11301:107:3"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1969,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1964,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1910,
                      "src": "11432:2:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 1967,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11446:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1966,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "11438:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1965,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11438:7:3",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1968,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11438:10:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11432:16:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1994,
                  "nodeType": "IfStatement",
                  "src": "11428:153:3",
                  "trueBody": {
                    "id": 1993,
                    "nodeType": "Block",
                    "src": "11450:131:3",
                    "statements": [
                      {
                        "body": {
                          "id": 1991,
                          "nodeType": "Block",
                          "src": "11505:66:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 1989,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1981,
                                    "name": "totalSupply",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1560,
                                    "src": "11523:11:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 1985,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 1982,
                                      "name": "ids",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1913,
                                      "src": "11535:3:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 1984,
                                    "indexExpression": {
                                      "id": 1983,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1971,
                                      "src": "11539:1:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "11535:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "11523:19:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1986,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1916,
                                    "src": "11546:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1988,
                                  "indexExpression": {
                                    "id": 1987,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1971,
                                    "src": "11554:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "11546:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "11523:33:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1990,
                              "nodeType": "ExpressionStatement",
                              "src": "11523:33:3"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1977,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1974,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1971,
                            "src": "11484:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1975,
                              "name": "ids",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1913,
                              "src": "11488:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1976,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "11492:6:3",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "11488:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11484:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1992,
                        "initializationExpression": {
                          "assignments": [
                            1971
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1971,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "11477:1:3",
                              "nodeType": "VariableDeclaration",
                              "scope": 1992,
                              "src": "11469:9:3",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1970,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "11469:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1973,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1972,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11481:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "11469:13:3"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1979,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "11500:3:3",
                            "subExpression": {
                              "id": 1978,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1971,
                              "src": "11502:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1980,
                          "nodeType": "ExpressionStatement",
                          "src": "11500:3:3"
                        },
                        "nodeType": "ForStatement",
                        "src": "11464:107:3"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              7738
            ],
            "documentation": {
              "id": 1904,
              "nodeType": "StructuredDocumentation",
              "src": "10436:514:3",
              "text": " @dev Runs before every token transfer / mint / burn.\n @param operator The address performing the token transfer.\n @param from     The address from which the token is being transferred.\n @param to       The address to which the token is being transferred.\n @param ids      The tokenIds of the tokens being transferred.\n @param amounts  The amounts of the tokens being transferred.\n @param data     Any additional data being passed in the token transfer."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "10964:20:3",
            "overrides": {
              "id": 1920,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "11167:8:3"
            },
            "parameters": {
              "id": 1919,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1906,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "11002:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1996,
                  "src": "10994:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1905,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10994:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1908,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "11028:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1996,
                  "src": "11020:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1907,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11020:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1910,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "11050:2:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1996,
                  "src": "11042:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1909,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11042:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1913,
                  "mutability": "mutable",
                  "name": "ids",
                  "nameLocation": "11079:3:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1996,
                  "src": "11062:20:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1911,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "11062:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1912,
                    "nodeType": "ArrayTypeName",
                    "src": "11062:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1916,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "11109:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1996,
                  "src": "11092:24:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1914,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "11092:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1915,
                    "nodeType": "ArrayTypeName",
                    "src": "11092:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1918,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "11139:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1996,
                  "src": "11126:17:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1917,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11126:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10984:165:3"
            },
            "returnParameters": {
              "id": 1921,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11176:0:3"
            },
            "scope": 1997,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1535,
              "name": "ERC1155",
              "nameLocations": [
                "1736:7:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7899,
              "src": "1736:7:3"
            },
            "id": 1536,
            "nodeType": "InheritanceSpecifier",
            "src": "1736:7:3"
          },
          {
            "baseName": {
              "id": 1537,
              "name": "ContractMetadata",
              "nameLocations": [
                "1749:16:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18093,
              "src": "1749:16:3"
            },
            "id": 1538,
            "nodeType": "InheritanceSpecifier",
            "src": "1749:16:3"
          },
          {
            "baseName": {
              "id": 1539,
              "name": "Ownable",
              "nameLocations": [
                "1771:7:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21764,
              "src": "1771:7:3"
            },
            "id": 1540,
            "nodeType": "InheritanceSpecifier",
            "src": "1771:7:3"
          },
          {
            "baseName": {
              "id": 1541,
              "name": "Royalty",
              "nameLocations": [
                "1784:7:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23031,
              "src": "1784:7:3"
            },
            "id": 1542,
            "nodeType": "InheritanceSpecifier",
            "src": "1784:7:3"
          },
          {
            "baseName": {
              "id": 1543,
              "name": "Multicall",
              "nameLocations": [
                "1797:9:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21206,
              "src": "1797:9:3"
            },
            "id": 1544,
            "nodeType": "InheritanceSpecifier",
            "src": "1797:9:3"
          },
          {
            "baseName": {
              "id": 1545,
              "name": "BatchMintMetadata",
              "nameLocations": [
                "1812:17:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17840,
              "src": "1812:17:3"
            },
            "id": 1546,
            "nodeType": "InheritanceSpecifier",
            "src": "1812:17:3"
          },
          {
            "baseName": {
              "id": 1547,
              "name": "LazyMint",
              "nameLocations": [
                "1835:8:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20828,
              "src": "1835:8:3"
            },
            "id": 1548,
            "nodeType": "InheritanceSpecifier",
            "src": "1835:8:3"
          },
          {
            "baseName": {
              "id": 1549,
              "name": "IClaimableERC1155",
              "nameLocations": [
                "1849:17:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 33014,
              "src": "1849:17:3"
            },
            "id": 1550,
            "nodeType": "InheritanceSpecifier",
            "src": "1849:17:3"
          },
          {
            "baseName": {
              "id": 1551,
              "name": "ReentrancyGuard",
              "nameLocations": [
                "1872:15:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 47279,
              "src": "1872:15:3"
            },
            "id": 1552,
            "nodeType": "InheritanceSpecifier",
            "src": "1872:15:3"
          }
        ],
        "canonicalName": "ERC1155LazyMint",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1534,
          "nodeType": "StructuredDocumentation",
          "src": "520:1182:3",
          "text": "      BASE:      ERC1155Base\n      EXTENSION: LazyMint\n  The `ERC1155LazyMint` smart contract implements the ERC1155 NFT standard.\n  It includes the following additions to standard ERC1155 logic:\n      - Lazy minting\n      - Ability to mint NFTs via the provided `mintTo` and `batchMintTo` functions.\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces.\n  The `ERC1155LazyMint` contract uses the `LazyMint` extension.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          1997,
          47279,
          33014,
          20828,
          17840,
          33463,
          21206,
          33577,
          23031,
          34061,
          14089,
          13945,
          21764,
          33834,
          18093,
          33084,
          7899,
          13880,
          13858
        ],
        "name": "ERC1155LazyMint",
        "nameLocation": "1713:15:3",
        "scope": 1998,
        "usedErrors": [],
        "usedEvents": [
          13755,
          13770,
          13779,
          13786,
          17530,
          17537,
          32993,
          33083,
          33450,
          33833,
          34051,
          34060
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 3
}