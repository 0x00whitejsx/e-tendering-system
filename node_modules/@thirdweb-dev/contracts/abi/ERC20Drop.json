{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_primarySaleRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "condition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimarySaleRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCondition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaimableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantityLimitPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "getSupplyClaimedByWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primarySaleRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "_condition",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_saleRecipient",
          "type": "address"
        }
      ],
      "name": "setPrimarySaleRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOverride",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b50604051620034bf380380620034bf8339810160408190526200005991620003b6565b8282818160056200006b8382620004d7565b5060066200007a8282620004d7565b50504660a052503060c0526200008f620000b5565b60805250620000a09050846200014c565b620000ab816200019e565b50505050620005a3565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000e262000237565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6001600160a01b038116620001ed5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b604482015260640160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b606060058054620002489062000446565b80601f0160208091040260200160405190810160405280929190818152602001828054620002769062000446565b8015620002c75780601f106200029b57610100808354040283529160200191620002c7565b820191906000526020600020905b815481529060010190602001808311620002a957829003601f168201915b5050505050905090565b80516001600160a01b0381168114620002e957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200031657600080fd5b81516001600160401b0380821115620003335762000333620002ee565b604051601f8301601f19908116603f011681019082821181831017156200035e576200035e620002ee565b81604052838152602092508660208588010111156200037c57600080fd5b600091505b83821015620003a0578582018301518183018401529082019062000381565b6000602085830101528094505050505092915050565b60008060008060808587031215620003cd57600080fd5b620003d885620002d1565b60208601519094506001600160401b0380821115620003f657600080fd5b620004048883890162000304565b945060408701519150808211156200041b57600080fd5b506200042a8782880162000304565b9250506200043b60608601620002d1565b905092959194509250565b600181811c908216806200045b57607f821691505b6020821081036200047c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004d2576000816000526020600020601f850160051c81016020861015620004ad5750805b601f850160051c820191505b81811015620004ce57828155600101620004b9565b5050505b505050565b81516001600160401b03811115620004f357620004f3620002ee565b6200050b8162000504845462000446565b8462000482565b602080601f8311600181146200054357600084156200052a5750858301515b600019600386901b1c1916600185901b178555620004ce565b600085815260208120601f198616915b82811015620005745788860151825594840194600190910190840162000553565b5085821015620005935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e051612ee2620005dd6000396000610db001526000610619015260006106430152600061066d0152612ee26000f3fe6080604052600436106101475760003560e01c806306fdde031461014c578063079fe40e14610177578063095ea7b3146101a457806313af4035146101d457806318160ddd146101f657806323b872dd14610215578063313ce5671461023557806335b65e1f146102515780633644e5151461029557806339509351146102aa578063426cfaf3146102ca57806342966c68146102ea5780636f4f28371461030a57806370a082311461032a57806379cc67901461034a5780637ecebe001461036a57806384bb1e421461038a5780638da5cb5b1461039d578063938e3d7b146103b257806395d89b41146103d2578063a457c2d7146103e7578063a9059cbb14610407578063ac9650d814610427578063d505accf14610454578063d637ed5914610474578063dd62ed3e1461049d578063e8a3d485146104bd578063eec8897c146104d2575b600080fd5b34801561015857600080fd5b506101616104f2565b60405161016e9190612520565b60405180910390f35b34801561018357600080fd5b5061018c610584565b6040516001600160a01b03909116815260200161016e565b3480156101b057600080fd5b506101c46101bf36600461254f565b610593565b604051901515815260200161016e565b3480156101e057600080fd5b506101f46101ef366004612579565b6105ad565b005b34801561020257600080fd5b506004545b60405190815260200161016e565b34801561022157600080fd5b506101c4610230366004612594565b6105e6565b34801561024157600080fd5b506040516012815260200161016e565b34801561025d57600080fd5b5061020761026c366004612579565b60115460009081526012602090815260408083206001600160a01b039094168352929052205490565b3480156102a157600080fd5b5061020761060c565b3480156102b657600080fd5b506101c46102c536600461254f565b61069c565b3480156102d657600080fd5b506101f46102e53660046125de565b6106db565b3480156102f657600080fd5b506101f4610305366004612635565b6108e7565b34801561031657600080fd5b506101f4610325366004612579565b610919565b34801561033657600080fd5b50610207610345366004612579565b610946565b34801561035657600080fd5b506101f461036536600461254f565b610961565b34801561037657600080fd5b50610207610385366004612579565b610a16565b6101f46103983660046126eb565b610a34565b3480156103a957600080fd5b5061018c610b01565b3480156103be57600080fd5b506101f46103cd366004612795565b610b10565b3480156103de57600080fd5b50610161610b3d565b3480156103f357600080fd5b506101c461040236600461254f565b610b4c565b34801561041357600080fd5b506101c461042236600461254f565b610be9565b34801561043357600080fd5b506104476104423660046127dd565b610bf7565b60405161016e9190612851565b34801561046057600080fd5b506101f461046f3660046128b5565b610d5c565b34801561048057600080fd5b50610489610ee2565b60405161016e989796959493929190612928565b3480156104a957600080fd5b506102076104b836600461297d565b610fa1565b3480156104c957600080fd5b50610161610fcc565b3480156104de57600080fd5b506101c46104ed3660046129b0565b61105a565b60606005805461050190612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461052d90612a21565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b5050505050905090565b6008546001600160a01b031690565b6000336105a1818585611407565b60019150505b92915050565b6105b561152b565b6105da5760405162461bcd60e51b81526004016105d190612a55565b60405180910390fd5b6105e38161154e565b50565b6000336105f48582856115a0565b6105ff85858561161a565b60019150505b9392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561066557507f000000000000000000000000000000000000000000000000000000000000000046145b1561068f57507f000000000000000000000000000000000000000000000000000000000000000090565b6106976117d6565b905090565b3360008181526003602090815260408083206001600160a01b03871684529091528120549091906105a190829086906106d6908790612a93565b611407565b6106e361152b565b6106ff5760405162461bcd60e51b81526004016105d190612a55565b601154600b548215610749575060003360405160609190911b6001600160601b03191660208201524360348201526054016040516020818303038152906040528051906020012091505b83602001358111156107925760405162461bcd60e51b81526020600482015260126024820152711b585e081cdd5c1c1b1e4818db185a5b595960721b60448201526064016105d1565b604051806101000160405280856000013581526020018560200135815260200182815260200185606001358152602001856080013581526020018560a0013581526020018560c00160208101906107e99190612579565b6001600160a01b0316815260200161080460e0870187612aa6565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250805160099081556020820151600a556040820151600b556060820151600c556080820151600d5560a0820151600e5560c0820151600f80546001600160a01b0319166001600160a01b0390921691909117905560e082015160109061089f9082612b3b565b50505060118290556040517f6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b8906108d99086908690612c23565b60405180910390a150505050565b806108f133610946565b101561090f5760405162461bcd60e51b81526004016105d190612cf0565b6105e3338261186b565b61092161152b565b61093d5760405162461bcd60e51b81526004016105d190612a55565b6105e3816119a7565b6001600160a01b031660009081526002602052604090205490565b61096961152b565b6109af5760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a3790313ab9371760491b60448201526064016105d1565b806109b983610946565b10156109d75760405162461bcd60e51b81526004016105d190612cf0565b6000816109e48433610fa1565b6109ee9190612d1c565b90506109fc83336000611407565b610a07833383611407565b610a11838361186b565b505050565b6001600160a01b0381166000908152600760205260408120546105a7565b601154610a44338787878761105a565b508560096002016000828254610a5a9190612a93565b9091555050600081815260126020908152604080832033845290915281208054889290610a88908490612a93565b90915550610a9b90506000878787611a43565b6000610aa78888611b96565b9050806001600160a01b038916336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de68a604051610aef91815260200190565b60405180910390a45050505050505050565b6001546001600160a01b031690565b610b1861152b565b610b345760405162461bcd60e51b81526004016105d190612a55565b6105e381611bab565b60606006805461050190612a21565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919083811015610bd15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105d1565b610bde8286868403611407565b506001949350505050565b6000336105a181858561161a565b6060816001600160401b03811115610c1157610c11612660565b604051908082528060200260200182016040528015610c4457816020015b6060815260200190600190039081610c2f5790505b509050336000805b84811015610d53578115610ccb57610ca930878784818110610c7057610c70612d2f565b9050602002810190610c829190612aa6565b86604051602001610c9593929190612d45565b604051602081830303815290604052611c86565b848281518110610cbb57610cbb612d2f565b6020026020010181905250610d4b565b610d2d30878784818110610ce157610ce1612d2f565b9050602002810190610cf39190612aa6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c8692505050565b848281518110610d3f57610d3f612d2f565b60200260200101819052505b600101610c4c565b50505092915050565b83421115610dac5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016105d1565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610ddb8c611cab565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610e58610e3861060c565b8360405161190160f01b8152600281019290925260228201526042902090565b90506000610e6882878787611cd3565b9050896001600160a01b0316816001600160a01b031614610ecb5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016105d1565b610ed68a8a8a611407565b50505050505050505050565b60098054600a54600b54600c54600d54600e54600f54601080549798969795969495939492936001600160a01b039092169291610f1e90612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4a90612a21565b8015610f975780601f10610f6c57610100808354040283529160200191610f97565b820191906000526020600020905b815481529060010190602001808311610f7a57829003601f168201915b5050505050905088565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b60008054610fd990612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461100590612a21565b80156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b505050505081565b6040805161010081018252600980548252600a546020830152600b5492820192909252600c546060820152600d546080820152600e5460a0820152600f546001600160a01b031660c082015260108054600093849392909160e0840191906110c190612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546110ed90612a21565b801561113a5780601f1061110f5761010080835404028352916020019161113a565b820191906000526020600020905b81548152906001019060200180831161111d57829003601f168201915b50505091909252505050606081015160a082015160c0830151608084015193945091929091901561121a576112166111728780612d66565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505060808088015191508d9060208b01359060408c0135906111c7908d0160608e01612579565b6040516001600160601b0319606095861b811660208301526034820194909452605481019290925290921b16607482015260880160405160208183030381529060405280519060200120611cfd565b5094505b84156112a15785602001356000036112325782611238565b85602001355b925060001986604001350361124d5781611253565b85604001355b9150600019866040013514158015611284575060006112786080880160608901612579565b6001600160a01b031614155b61128e578061129e565b61129e6080870160608801612579565b90505b60115460009081526012602090815260408083206001600160a01b03808f168552925290912054908981169083161415806112dc5750828814155b1561131c5760405162461bcd60e51b815260206004820152601060248201526f2150726963654f7243757272656e637960801b60448201526064016105d1565b89158061133157508361132f828c612a93565b115b156113675760405162461bcd60e51b81526004016105d1906020808252600490820152632151747960e01b604082015260600190565b84602001518a866040015161137c9190612a93565b11156113b75760405162461bcd60e51b815260206004820152600a602482015269214d6178537570706c7960b01b60448201526064016105d1565b84514210156113f95760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b60448201526064016105d1565b505050505095945050505050565b6001600160a01b0383166114695760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105d1565b6001600160a01b0382166114ca5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105d1565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611535610b01565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b60006115ac8484610fa1565b9050600019811461161457818110156116075760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105d1565b6116148484848403611407565b50505050565b6001600160a01b03831661167e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105d1565b6001600160a01b0382166116e05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105d1565b6001600160a01b038316600090815260026020526040902054818110156117585760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105d1565b6001600160a01b0380851660009081526002602052604080822085850390559185168152908120805484929061178f908490612a93565b92505081905550826001600160a01b0316846001600160a01b0316600080516020612e8d833981519152846040516117c991815260200190565b60405180910390a3611614565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6118016104f2565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b0382166118cb5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105d1565b6001600160a01b0382166000908152600260205260409020548181101561193f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105d1565b6001600160a01b038316600090815260026020526040812083830390556004805484929061196e908490612d1c565b90915550506040518281526000906001600160a01b03851690600080516020612e8d8339815191529060200160405180910390a3505050565b6001600160a01b0381166119f15760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b60448201526064016105d1565b600880546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b505050505050565b80600003611a87573415611a825760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b60448201526064016105d1565b611614565b6000670de0b6b3a7640000611a9c8386612daf565b611aa69190612dc6565b905060008111611aeb5760405162461bcd60e51b815260206004820152601060248201526f7175616e7469747920746f6f206c6f7760801b60448201526064016105d1565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611b1b5750348114611b1f565b5034155b80611b605760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206d73672076616c756560781b60448201526064016105d1565b60006001600160a01b03871615611b775786611b7f565b611b7f610584565b9050611b8d85338386611dc1565b50505050505050565b6000611ba28383611e02565b50600092915050565b6000808054611bb990612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054611be590612a21565b8015611c325780601f10611c0757610100808354040283529160200191611c32565b820191906000526020600020905b815481529060010190602001808311611c1557829003601f168201915b505050505090508160009081611c489190612b3b565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611c7a929190612de8565b60405180910390a15050565b60606106058383604051806060016040528060278152602001612e6660279139611ecf565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6000806000611ce487878787611f47565b91509150611cf181612001565b5090505b949350505050565b6000808281805b8751811015611db557611d18600283612daf565b91506000888281518110611d2e57611d2e612d2f565b60200260200101519050808411611d70576040805160208101869052908101829052606001604051602081830303815290604052805190602001209350611dac565b6040805160208101839052908101859052606001604051602081830303815290604052805190602001209350600183611da99190612a93565b92505b50600101611d04565b50941495939450505050565b80156116145773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611df657611a828282612146565b611614848484846121e8565b6001600160a01b038216611e585760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105d1565b8060046000828254611e6a9190612a93565b90915550506001600160a01b03821660009081526002602052604081208054839290611e97908490612a93565b90915550506040518181526001600160a01b03831690600090600080516020612e8d8339815191529060200160405180910390a35050565b6060600080856001600160a01b031685604051611eec9190612e16565b600060405180830381855af49150503d8060008114611f27576040519150601f19603f3d011682016040523d82523d6000602084013e611f2c565b606091505b5091509150611f3d8683838761223b565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115611f745750600090506003611ff8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611fc8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611ff157600060019250925050611ff8565b9150600090505b94509492505050565b600081600481111561201557612015612e32565b0361201d5750565b600181600481111561203157612031612e32565b036120795760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016105d1565b600281600481111561208d5761208d612e32565b036120da5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105d1565b60038160048111156120ee576120ee612e32565b036105e35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105d1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612193576040519150601f19603f3d011682016040523d82523d6000602084013e612198565b606091505b5050905080610a115760405162461bcd60e51b815260206004820152601c60248201527b1b985d1a5d99481d1bdad95b881d1c985b9cd9995c8819985a5b195960221b60448201526064016105d1565b816001600160a01b0316836001600160a01b0316031561161457306001600160a01b0384160361222657611a826001600160a01b03851683836122b4565b6116146001600160a01b038516848484612317565b606083156122aa5782516000036122a3576001600160a01b0385163b6122a35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d1565b5081611cf5565b611cf5838361234f565b6040516001600160a01b038316602482015260448101829052610a1190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612379565b6040516001600160a01b03808516602483015283166044820152606481018290526116149085906323b872dd60e01b906084016122e0565b81511561235f5781518083602001fd5b8060405162461bcd60e51b81526004016105d19190612520565b60006123ce826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661244b9092919063ffffffff16565b805190915015610a1157808060200190518101906123ec9190612e48565b610a115760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d1565b6060611cf5848460008585600080866001600160a01b031685876040516124729190612e16565b60006040518083038185875af1925050503d80600081146124af576040519150601f19603f3d011682016040523d82523d6000602084013e6124b4565b606091505b50915091506124c58783838761223b565b979650505050505050565b60005b838110156124eb5781810151838201526020016124d3565b50506000910152565b6000815180845261250c8160208601602086016124d0565b601f01601f19169290920160200192915050565b60208152600061060560208301846124f4565b80356001600160a01b038116811461254a57600080fd5b919050565b6000806040838503121561256257600080fd5b61256b83612533565b946020939093013593505050565b60006020828403121561258b57600080fd5b61060582612533565b6000806000606084860312156125a957600080fd5b6125b284612533565b92506125c060208501612533565b9150604084013590509250925092565b80151581146105e357600080fd5b600080604083850312156125f157600080fd5b82356001600160401b0381111561260757600080fd5b8301610100818603121561261a57600080fd5b9150602083013561262a816125d0565b809150509250929050565b60006020828403121561264757600080fd5b5035919050565b600060808284031215611ccd57600080fd5b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561269057612690612660565b604051601f8501601f19908116603f011681019082821181831017156126b8576126b8612660565b816040528093508581528686860111156126d157600080fd5b858560208301376000602087830101525050509392505050565b60008060008060008060c0878903121561270457600080fd5b61270d87612533565b95506020870135945061272260408801612533565b93506060870135925060808701356001600160401b038082111561274557600080fd5b6127518a838b0161264e565b935060a089013591508082111561276757600080fd5b508701601f8101891361277957600080fd5b61278889823560208401612676565b9150509295509295509295565b6000602082840312156127a757600080fd5b81356001600160401b038111156127bd57600080fd5b8201601f810184136127ce57600080fd5b611cf584823560208401612676565b600080602083850312156127f057600080fd5b82356001600160401b038082111561280757600080fd5b818501915085601f83011261281b57600080fd5b81358181111561282a57600080fd5b8660208260051b850101111561283f57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156128a857603f198886030184526128968583516124f4565b9450928501929085019060010161287a565b5092979650505050505050565b600080600080600080600060e0888a0312156128d057600080fd5b6128d988612533565b96506128e760208901612533565b95506040880135945060608801359350608088013560ff8116811461290b57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60006101008a83528960208401528860408401528760608401528660808401528560a084015260018060a01b03851660c08401528060e084015261296e818401856124f4565b9b9a5050505050505050505050565b6000806040838503121561299057600080fd5b61299983612533565b91506129a760208401612533565b90509250929050565b600080600080600060a086880312156129c857600080fd5b6129d186612533565b9450602086013593506129e660408701612533565b92506060860135915060808601356001600160401b03811115612a0857600080fd5b612a148882890161264e565b9150509295509295909350565b600181811c90821680612a3557607f821691505b602082108103611ccd57634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156105a7576105a7612a7d565b6000808335601e19843603018112612abd57600080fd5b8301803591506001600160401b03821115612ad757600080fd5b602001915036819003821315612aec57600080fd5b9250929050565b601f821115610a11576000816000526020600020601f850160051c81016020861015612b1c5750805b601f850160051c820191505b81811015611a3b57828155600101612b28565b81516001600160401b03811115612b5457612b54612660565b612b6881612b628454612a21565b84612af3565b602080601f831160018114612b9d5760008415612b855750858301515b600019600386901b1c1916600185901b178555611a3b565b600085815260208120601f198616915b82811015612bcc57888601518255948401946001909101908401612bad565b5085821015612bea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152823560408201526020830135606082015260408301356080820152606083013560a0820152608083013560c082015260a083013560e08201526000612c6e60c08501612533565b6001600160a01b03166101008381019190915260e08501359036869003601e19018212612c9a57600080fd5b602091860191820191356001600160401b03811115612cb857600080fd5b803603831315612cc757600080fd5b81610120860152612cdd61014086018285612bfa565b9350505050610605602083018415159052565b6020808252601290820152716e6f7420656e6f7567682062616c616e636560701b604082015260600190565b818103818111156105a7576105a7612a7d565b634e487b7160e01b600052603260045260246000fd5b8284823760609190911b6001600160601b0319169101908152601401919050565b6000808335601e19843603018112612d7d57600080fd5b8301803591506001600160401b03821115612d9757600080fd5b6020019150600581901b3603821315612aec57600080fd5b80820281158282048414176105a7576105a7612a7d565b600082612de357634e487b7160e01b600052601260045260246000fd5b500490565b604081526000612dfb60408301856124f4565b8281036020840152612e0d81856124f4565b95945050505050565b60008251612e288184602087016124d0565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612e5a57600080fd5b8151610605816125d056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220100b6138aaa6d554e31599dbbf7a5cec8ac1433813ab473db8ddc10f378a7f5c64736f6c63430008170033",
    "sourceMap": "1326:4792:6:-:0;;;1443:95:226;1390:148;;1629:278:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1789:5;1796:7;1789:5;1796:7;2081:5:225;:13;1789:5:6;2081::225;:13;:::i;:::-;-1:-1:-1;2104:7:225;:17;2114:7;2104;:17;:::i;:::-;-1:-1:-1;;1877:13:226::1;1858:32;::::0;-1:-1:-1;1923:4:226::1;1900:28;::::0;1965:23:::1;:21;:23::i;:::-;1938:50;::::0;-1:-1:-1;1815:26:6::1;::::0;-1:-1:-1;1827:13:6;1815:11:::1;:26::i;:::-;1851:49;1878:21:::0;1851:26:::1;:49::i;:::-;1629:278:::0;;;;1326:4792;;3296:438:226;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;4754:25:821;;;;4795:18;;;4788:34;;;;3611:14:226;4838:18:821;;;4831:34;3647:13:226;4881:18:821;;;4874:34;3690:4:226;4924:19:821;;;4917:61;4726:19;;3416:297:226;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;1499:265:74:-;-1:-1:-1;;;;;1582:28:74;;1578:86;;1626:27;;-1:-1:-1;;;1626:27:74;;5191:2:821;1626:27:74;;;5173:21:821;5230:2;5210:18;;;5203:30;-1:-1:-1;;;5249:18:821;;;5242:47;5306:18;;1626:27:74;;;;;;;1578:86;1673:9;:26;;-1:-1:-1;;;;;;1673:26:74;-1:-1:-1;;;;;1673:26:74;;;;;;;;1714:43;;;;-1:-1:-1;;1714:43:74;1499:265;:::o;2193:98:225:-;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;14:177:821:-;93:13;;-1:-1:-1;;;;;135:31:821;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:844;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:821;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:821;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;914:3;907:4;902:2;894:6;890:15;886:26;883:35;880:55;;;931:1;928;921:12;880:55;953:1;944:10;;963:133;977:2;974:1;971:9;963:133;;;1065:14;;;1061:23;;1055:30;1034:14;;;1030:23;;1023:63;988:10;;;;963:133;;;1140:1;1133:4;1128:2;1120:6;1116:15;1112:26;1105:37;1160:6;1151:15;;;;;;328:844;;;;:::o;1177:733::-;1294:6;1302;1310;1318;1371:3;1359:9;1350:7;1346:23;1342:33;1339:53;;;1388:1;1385;1378:12;1339:53;1411:40;1441:9;1411:40;:::i;:::-;1495:2;1480:18;;1474:25;1401:50;;-1:-1:-1;;;;;;1548:14:821;;;1545:34;;;1575:1;1572;1565:12;1545:34;1598:61;1651:7;1642:6;1631:9;1627:22;1598:61;:::i;:::-;1588:71;;1705:2;1694:9;1690:18;1684:25;1668:41;;1734:2;1724:8;1721:16;1718:36;;;1750:1;1747;1740:12;1718:36;;1773:63;1828:7;1817:8;1806:9;1802:24;1773:63;:::i;:::-;1763:73;;;1855:49;1900:2;1889:9;1885:18;1855:49;:::i;:::-;1845:59;;1177:733;;;;;;;:::o;1915:380::-;1994:1;1990:12;;;;2037;;;2058:61;;2112:4;2104:6;2100:17;2090:27;;2058:61;2165:2;2157:6;2154:14;2134:18;2131:38;2128:161;;2211:10;2206:3;2202:20;2199:1;2192:31;2246:4;2243:1;2236:15;2274:4;2271:1;2264:15;2128:161;;1915:380;;;:::o;2426:543::-;2528:2;2523:3;2520:11;2517:446;;;2564:1;2588:5;2585:1;2578:16;2632:4;2629:1;2619:18;2702:2;2690:10;2686:19;2683:1;2679:27;2673:4;2669:38;2738:4;2726:10;2723:20;2720:47;;;-1:-1:-1;2761:4:821;2720:47;2816:2;2811:3;2807:12;2804:1;2800:20;2794:4;2790:31;2780:41;;2871:82;2889:2;2882:5;2879:13;2871:82;;;2934:17;;;2915:1;2904:13;2871:82;;;2875:3;;;2517:446;2426:543;;;:::o;3145:1345::-;3265:10;;-1:-1:-1;;;;;3287:30:821;;3284:56;;;3320:18;;:::i;:::-;3349:97;3439:6;3399:38;3431:4;3425:11;3399:38;:::i;:::-;3393:4;3349:97;:::i;:::-;3501:4;;3558:2;3547:14;;3575:1;3570:663;;;;4277:1;4294:6;4291:89;;;-1:-1:-1;4346:19:821;;;4340:26;4291:89;-1:-1:-1;;3102:1:821;3098:11;;;3094:24;3090:29;3080:40;3126:1;3122:11;;;3077:57;4393:81;;3540:944;;3570:663;2373:1;2366:14;;;2410:4;2397:18;;-1:-1:-1;;3606:20:821;;;3724:236;3738:7;3735:1;3732:14;3724:236;;;3827:19;;;3821:26;3806:42;;3919:27;;;;3887:1;3875:14;;;;3754:19;;3724:236;;;3728:3;3988:6;3979:7;3976:19;3973:201;;;4049:19;;;4043:26;-1:-1:-1;;4132:1:821;4128:14;;;4144:3;4124:24;4120:37;4116:42;4101:58;4086:74;;3973:201;-1:-1:-1;;;;;4220:1:821;4204:14;;;4200:22;4187:36;;-1:-1:-1;3145:1345:821:o;4989:341::-;1326:4792:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101475760003560e01c806306fdde031461014c578063079fe40e14610177578063095ea7b3146101a457806313af4035146101d457806318160ddd146101f657806323b872dd14610215578063313ce5671461023557806335b65e1f146102515780633644e5151461029557806339509351146102aa578063426cfaf3146102ca57806342966c68146102ea5780636f4f28371461030a57806370a082311461032a57806379cc67901461034a5780637ecebe001461036a57806384bb1e421461038a5780638da5cb5b1461039d578063938e3d7b146103b257806395d89b41146103d2578063a457c2d7146103e7578063a9059cbb14610407578063ac9650d814610427578063d505accf14610454578063d637ed5914610474578063dd62ed3e1461049d578063e8a3d485146104bd578063eec8897c146104d2575b600080fd5b34801561015857600080fd5b506101616104f2565b60405161016e9190612520565b60405180910390f35b34801561018357600080fd5b5061018c610584565b6040516001600160a01b03909116815260200161016e565b3480156101b057600080fd5b506101c46101bf36600461254f565b610593565b604051901515815260200161016e565b3480156101e057600080fd5b506101f46101ef366004612579565b6105ad565b005b34801561020257600080fd5b506004545b60405190815260200161016e565b34801561022157600080fd5b506101c4610230366004612594565b6105e6565b34801561024157600080fd5b506040516012815260200161016e565b34801561025d57600080fd5b5061020761026c366004612579565b60115460009081526012602090815260408083206001600160a01b039094168352929052205490565b3480156102a157600080fd5b5061020761060c565b3480156102b657600080fd5b506101c46102c536600461254f565b61069c565b3480156102d657600080fd5b506101f46102e53660046125de565b6106db565b3480156102f657600080fd5b506101f4610305366004612635565b6108e7565b34801561031657600080fd5b506101f4610325366004612579565b610919565b34801561033657600080fd5b50610207610345366004612579565b610946565b34801561035657600080fd5b506101f461036536600461254f565b610961565b34801561037657600080fd5b50610207610385366004612579565b610a16565b6101f46103983660046126eb565b610a34565b3480156103a957600080fd5b5061018c610b01565b3480156103be57600080fd5b506101f46103cd366004612795565b610b10565b3480156103de57600080fd5b50610161610b3d565b3480156103f357600080fd5b506101c461040236600461254f565b610b4c565b34801561041357600080fd5b506101c461042236600461254f565b610be9565b34801561043357600080fd5b506104476104423660046127dd565b610bf7565b60405161016e9190612851565b34801561046057600080fd5b506101f461046f3660046128b5565b610d5c565b34801561048057600080fd5b50610489610ee2565b60405161016e989796959493929190612928565b3480156104a957600080fd5b506102076104b836600461297d565b610fa1565b3480156104c957600080fd5b50610161610fcc565b3480156104de57600080fd5b506101c46104ed3660046129b0565b61105a565b60606005805461050190612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461052d90612a21565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b5050505050905090565b6008546001600160a01b031690565b6000336105a1818585611407565b60019150505b92915050565b6105b561152b565b6105da5760405162461bcd60e51b81526004016105d190612a55565b60405180910390fd5b6105e38161154e565b50565b6000336105f48582856115a0565b6105ff85858561161a565b60019150505b9392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561066557507f000000000000000000000000000000000000000000000000000000000000000046145b1561068f57507f000000000000000000000000000000000000000000000000000000000000000090565b6106976117d6565b905090565b3360008181526003602090815260408083206001600160a01b03871684529091528120549091906105a190829086906106d6908790612a93565b611407565b6106e361152b565b6106ff5760405162461bcd60e51b81526004016105d190612a55565b601154600b548215610749575060003360405160609190911b6001600160601b03191660208201524360348201526054016040516020818303038152906040528051906020012091505b83602001358111156107925760405162461bcd60e51b81526020600482015260126024820152711b585e081cdd5c1c1b1e4818db185a5b595960721b60448201526064016105d1565b604051806101000160405280856000013581526020018560200135815260200182815260200185606001358152602001856080013581526020018560a0013581526020018560c00160208101906107e99190612579565b6001600160a01b0316815260200161080460e0870187612aa6565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250805160099081556020820151600a556040820151600b556060820151600c556080820151600d5560a0820151600e5560c0820151600f80546001600160a01b0319166001600160a01b0390921691909117905560e082015160109061089f9082612b3b565b50505060118290556040517f6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b8906108d99086908690612c23565b60405180910390a150505050565b806108f133610946565b101561090f5760405162461bcd60e51b81526004016105d190612cf0565b6105e3338261186b565b61092161152b565b61093d5760405162461bcd60e51b81526004016105d190612a55565b6105e3816119a7565b6001600160a01b031660009081526002602052604090205490565b61096961152b565b6109af5760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a3790313ab9371760491b60448201526064016105d1565b806109b983610946565b10156109d75760405162461bcd60e51b81526004016105d190612cf0565b6000816109e48433610fa1565b6109ee9190612d1c565b90506109fc83336000611407565b610a07833383611407565b610a11838361186b565b505050565b6001600160a01b0381166000908152600760205260408120546105a7565b601154610a44338787878761105a565b508560096002016000828254610a5a9190612a93565b9091555050600081815260126020908152604080832033845290915281208054889290610a88908490612a93565b90915550610a9b90506000878787611a43565b6000610aa78888611b96565b9050806001600160a01b038916336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de68a604051610aef91815260200190565b60405180910390a45050505050505050565b6001546001600160a01b031690565b610b1861152b565b610b345760405162461bcd60e51b81526004016105d190612a55565b6105e381611bab565b60606006805461050190612a21565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919083811015610bd15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105d1565b610bde8286868403611407565b506001949350505050565b6000336105a181858561161a565b6060816001600160401b03811115610c1157610c11612660565b604051908082528060200260200182016040528015610c4457816020015b6060815260200190600190039081610c2f5790505b509050336000805b84811015610d53578115610ccb57610ca930878784818110610c7057610c70612d2f565b9050602002810190610c829190612aa6565b86604051602001610c9593929190612d45565b604051602081830303815290604052611c86565b848281518110610cbb57610cbb612d2f565b6020026020010181905250610d4b565b610d2d30878784818110610ce157610ce1612d2f565b9050602002810190610cf39190612aa6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c8692505050565b848281518110610d3f57610d3f612d2f565b60200260200101819052505b600101610c4c565b50505092915050565b83421115610dac5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016105d1565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610ddb8c611cab565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610e58610e3861060c565b8360405161190160f01b8152600281019290925260228201526042902090565b90506000610e6882878787611cd3565b9050896001600160a01b0316816001600160a01b031614610ecb5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016105d1565b610ed68a8a8a611407565b50505050505050505050565b60098054600a54600b54600c54600d54600e54600f54601080549798969795969495939492936001600160a01b039092169291610f1e90612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4a90612a21565b8015610f975780601f10610f6c57610100808354040283529160200191610f97565b820191906000526020600020905b815481529060010190602001808311610f7a57829003601f168201915b5050505050905088565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b60008054610fd990612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461100590612a21565b80156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b505050505081565b6040805161010081018252600980548252600a546020830152600b5492820192909252600c546060820152600d546080820152600e5460a0820152600f546001600160a01b031660c082015260108054600093849392909160e0840191906110c190612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546110ed90612a21565b801561113a5780601f1061110f5761010080835404028352916020019161113a565b820191906000526020600020905b81548152906001019060200180831161111d57829003601f168201915b50505091909252505050606081015160a082015160c0830151608084015193945091929091901561121a576112166111728780612d66565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505060808088015191508d9060208b01359060408c0135906111c7908d0160608e01612579565b6040516001600160601b0319606095861b811660208301526034820194909452605481019290925290921b16607482015260880160405160208183030381529060405280519060200120611cfd565b5094505b84156112a15785602001356000036112325782611238565b85602001355b925060001986604001350361124d5781611253565b85604001355b9150600019866040013514158015611284575060006112786080880160608901612579565b6001600160a01b031614155b61128e578061129e565b61129e6080870160608801612579565b90505b60115460009081526012602090815260408083206001600160a01b03808f168552925290912054908981169083161415806112dc5750828814155b1561131c5760405162461bcd60e51b815260206004820152601060248201526f2150726963654f7243757272656e637960801b60448201526064016105d1565b89158061133157508361132f828c612a93565b115b156113675760405162461bcd60e51b81526004016105d1906020808252600490820152632151747960e01b604082015260600190565b84602001518a866040015161137c9190612a93565b11156113b75760405162461bcd60e51b815260206004820152600a602482015269214d6178537570706c7960b01b60448201526064016105d1565b84514210156113f95760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b60448201526064016105d1565b505050505095945050505050565b6001600160a01b0383166114695760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105d1565b6001600160a01b0382166114ca5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105d1565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611535610b01565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b60006115ac8484610fa1565b9050600019811461161457818110156116075760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105d1565b6116148484848403611407565b50505050565b6001600160a01b03831661167e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105d1565b6001600160a01b0382166116e05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105d1565b6001600160a01b038316600090815260026020526040902054818110156117585760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105d1565b6001600160a01b0380851660009081526002602052604080822085850390559185168152908120805484929061178f908490612a93565b92505081905550826001600160a01b0316846001600160a01b0316600080516020612e8d833981519152846040516117c991815260200190565b60405180910390a3611614565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6118016104f2565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b0382166118cb5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105d1565b6001600160a01b0382166000908152600260205260409020548181101561193f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105d1565b6001600160a01b038316600090815260026020526040812083830390556004805484929061196e908490612d1c565b90915550506040518281526000906001600160a01b03851690600080516020612e8d8339815191529060200160405180910390a3505050565b6001600160a01b0381166119f15760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b60448201526064016105d1565b600880546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b505050505050565b80600003611a87573415611a825760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b60448201526064016105d1565b611614565b6000670de0b6b3a7640000611a9c8386612daf565b611aa69190612dc6565b905060008111611aeb5760405162461bcd60e51b815260206004820152601060248201526f7175616e7469747920746f6f206c6f7760801b60448201526064016105d1565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611b1b5750348114611b1f565b5034155b80611b605760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206d73672076616c756560781b60448201526064016105d1565b60006001600160a01b03871615611b775786611b7f565b611b7f610584565b9050611b8d85338386611dc1565b50505050505050565b6000611ba28383611e02565b50600092915050565b6000808054611bb990612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054611be590612a21565b8015611c325780601f10611c0757610100808354040283529160200191611c32565b820191906000526020600020905b815481529060010190602001808311611c1557829003601f168201915b505050505090508160009081611c489190612b3b565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611c7a929190612de8565b60405180910390a15050565b60606106058383604051806060016040528060278152602001612e6660279139611ecf565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6000806000611ce487878787611f47565b91509150611cf181612001565b5090505b949350505050565b6000808281805b8751811015611db557611d18600283612daf565b91506000888281518110611d2e57611d2e612d2f565b60200260200101519050808411611d70576040805160208101869052908101829052606001604051602081830303815290604052805190602001209350611dac565b6040805160208101839052908101859052606001604051602081830303815290604052805190602001209350600183611da99190612a93565b92505b50600101611d04565b50941495939450505050565b80156116145773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611df657611a828282612146565b611614848484846121e8565b6001600160a01b038216611e585760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105d1565b8060046000828254611e6a9190612a93565b90915550506001600160a01b03821660009081526002602052604081208054839290611e97908490612a93565b90915550506040518181526001600160a01b03831690600090600080516020612e8d8339815191529060200160405180910390a35050565b6060600080856001600160a01b031685604051611eec9190612e16565b600060405180830381855af49150503d8060008114611f27576040519150601f19603f3d011682016040523d82523d6000602084013e611f2c565b606091505b5091509150611f3d8683838761223b565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115611f745750600090506003611ff8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611fc8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611ff157600060019250925050611ff8565b9150600090505b94509492505050565b600081600481111561201557612015612e32565b0361201d5750565b600181600481111561203157612031612e32565b036120795760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016105d1565b600281600481111561208d5761208d612e32565b036120da5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105d1565b60038160048111156120ee576120ee612e32565b036105e35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105d1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612193576040519150601f19603f3d011682016040523d82523d6000602084013e612198565b606091505b5050905080610a115760405162461bcd60e51b815260206004820152601c60248201527b1b985d1a5d99481d1bdad95b881d1c985b9cd9995c8819985a5b195960221b60448201526064016105d1565b816001600160a01b0316836001600160a01b0316031561161457306001600160a01b0384160361222657611a826001600160a01b03851683836122b4565b6116146001600160a01b038516848484612317565b606083156122aa5782516000036122a3576001600160a01b0385163b6122a35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d1565b5081611cf5565b611cf5838361234f565b6040516001600160a01b038316602482015260448101829052610a1190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612379565b6040516001600160a01b03808516602483015283166044820152606481018290526116149085906323b872dd60e01b906084016122e0565b81511561235f5781518083602001fd5b8060405162461bcd60e51b81526004016105d19190612520565b60006123ce826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661244b9092919063ffffffff16565b805190915015610a1157808060200190518101906123ec9190612e48565b610a115760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d1565b6060611cf5848460008585600080866001600160a01b031685876040516124729190612e16565b60006040518083038185875af1925050503d80600081146124af576040519150601f19603f3d011682016040523d82523d6000602084013e6124b4565b606091505b50915091506124c58783838761223b565b979650505050505050565b60005b838110156124eb5781810151838201526020016124d3565b50506000910152565b6000815180845261250c8160208601602086016124d0565b601f01601f19169290920160200192915050565b60208152600061060560208301846124f4565b80356001600160a01b038116811461254a57600080fd5b919050565b6000806040838503121561256257600080fd5b61256b83612533565b946020939093013593505050565b60006020828403121561258b57600080fd5b61060582612533565b6000806000606084860312156125a957600080fd5b6125b284612533565b92506125c060208501612533565b9150604084013590509250925092565b80151581146105e357600080fd5b600080604083850312156125f157600080fd5b82356001600160401b0381111561260757600080fd5b8301610100818603121561261a57600080fd5b9150602083013561262a816125d0565b809150509250929050565b60006020828403121561264757600080fd5b5035919050565b600060808284031215611ccd57600080fd5b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561269057612690612660565b604051601f8501601f19908116603f011681019082821181831017156126b8576126b8612660565b816040528093508581528686860111156126d157600080fd5b858560208301376000602087830101525050509392505050565b60008060008060008060c0878903121561270457600080fd5b61270d87612533565b95506020870135945061272260408801612533565b93506060870135925060808701356001600160401b038082111561274557600080fd5b6127518a838b0161264e565b935060a089013591508082111561276757600080fd5b508701601f8101891361277957600080fd5b61278889823560208401612676565b9150509295509295509295565b6000602082840312156127a757600080fd5b81356001600160401b038111156127bd57600080fd5b8201601f810184136127ce57600080fd5b611cf584823560208401612676565b600080602083850312156127f057600080fd5b82356001600160401b038082111561280757600080fd5b818501915085601f83011261281b57600080fd5b81358181111561282a57600080fd5b8660208260051b850101111561283f57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156128a857603f198886030184526128968583516124f4565b9450928501929085019060010161287a565b5092979650505050505050565b600080600080600080600060e0888a0312156128d057600080fd5b6128d988612533565b96506128e760208901612533565b95506040880135945060608801359350608088013560ff8116811461290b57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60006101008a83528960208401528860408401528760608401528660808401528560a084015260018060a01b03851660c08401528060e084015261296e818401856124f4565b9b9a5050505050505050505050565b6000806040838503121561299057600080fd5b61299983612533565b91506129a760208401612533565b90509250929050565b600080600080600060a086880312156129c857600080fd5b6129d186612533565b9450602086013593506129e660408701612533565b92506060860135915060808601356001600160401b03811115612a0857600080fd5b612a148882890161264e565b9150509295509295909350565b600181811c90821680612a3557607f821691505b602082108103611ccd57634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156105a7576105a7612a7d565b6000808335601e19843603018112612abd57600080fd5b8301803591506001600160401b03821115612ad757600080fd5b602001915036819003821315612aec57600080fd5b9250929050565b601f821115610a11576000816000526020600020601f850160051c81016020861015612b1c5750805b601f850160051c820191505b81811015611a3b57828155600101612b28565b81516001600160401b03811115612b5457612b54612660565b612b6881612b628454612a21565b84612af3565b602080601f831160018114612b9d5760008415612b855750858301515b600019600386901b1c1916600185901b178555611a3b565b600085815260208120601f198616915b82811015612bcc57888601518255948401946001909101908401612bad565b5085821015612bea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152823560408201526020830135606082015260408301356080820152606083013560a0820152608083013560c082015260a083013560e08201526000612c6e60c08501612533565b6001600160a01b03166101008381019190915260e08501359036869003601e19018212612c9a57600080fd5b602091860191820191356001600160401b03811115612cb857600080fd5b803603831315612cc757600080fd5b81610120860152612cdd61014086018285612bfa565b9350505050610605602083018415159052565b6020808252601290820152716e6f7420656e6f7567682062616c616e636560701b604082015260600190565b818103818111156105a7576105a7612a7d565b634e487b7160e01b600052603260045260246000fd5b8284823760609190911b6001600160601b0319169101908152601401919050565b6000808335601e19843603018112612d7d57600080fd5b8301803591506001600160401b03821115612d9757600080fd5b6020019150600581901b3603821315612aec57600080fd5b80820281158282048414176105a7576105a7612a7d565b600082612de357634e487b7160e01b600052601260045260246000fd5b500490565b604081526000612dfb60408301856124f4565b8281036020840152612e0d81856124f4565b95945050505050565b60008251612e288184602087016124d0565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612e5a57600080fd5b8151610605816125d056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220100b6138aaa6d554e31599dbbf7a5cec8ac1433813ab473db8ddc10f378a7f5c64736f6c63430008170033",
    "sourceMap": "1326:4792:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98:225;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;676:104:74;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;934:32:821;;;916:51;;904:2;889:18;676:104:74;770:203:821;4470:197:225;;;;;;;;;;-1:-1:-1;4470:197:225;;;;;:::i;:::-;;:::i;:::-;;;1676:14:821;;1669:22;1651:41;;1639:2;1624:18;4470:197:225;1511:187:821;1133:173:70;;;;;;;;;;-1:-1:-1;1133:173:70;;;;;:::i;:::-;;:::i;:::-;;3281:106:225;;;;;;;;;;-1:-1:-1;3368:12:225;;3281:106;;;2040:25:821;;;2028:2;2013:18;3281:106:225;1894:177:821;5229:256:225;;;;;;;;;;-1:-1:-1;5229:256:225;;;;;:::i;:::-;;:::i;3130:91::-;;;;;;;;;;-1:-1:-1;3130:91:225;;3212:2;2551:36:821;;2539:2;2524:18;3130:91:225;2409:184:821;6084:150:60;;;;;;;;;;-1:-1:-1;6084:150:60;;;;;:::i;:::-;6205:11;;6157:7;6183:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;6183:44:60;;;;;;;;;;;6084:150;3018:272:226;;;;;;;;;;;;;:::i;5880:236:225:-;;;;;;;;;;-1:-1:-1;5880:236:225;;;;;:::i;:::-;;:::i;2330:1219:60:-;;;;;;;;;;-1:-1:-1;2330:1219:60;;;;;:::i;:::-;;:::i;2309:164:6:-;;;;;;;;;;-1:-1:-1;2309:164:6;;;;;:::i;:::-;;:::i;1189:228:74:-;;;;;;;;;;-1:-1:-1;1189:228:74;;;;;:::i;:::-;;:::i;3445:125:225:-;;;;;;;;;;-1:-1:-1;3445:125:225;;;;;:::i;:::-;;:::i;2770:430:6:-;;;;;;;;;;-1:-1:-1;2770:430:6;;;;;:::i;:::-;;:::i;2768:126:226:-;;;;;;;;;;-1:-1:-1;2768:126:226;;;;;:::i;:::-;;:::i;1181:1086:60:-;;;;;;:::i;:::-;;:::i;871:86:70:-;;;;;;;;;;;;;:::i;1003:188:56:-;;;;;;;;;;-1:-1:-1;1003:188:56;;;;;:::i;:::-;;:::i;2404:102:225:-;;;;;;;;;;;;;:::i;6603:429::-;;;;;;;;;;-1:-1:-1;6603:429:225;;;;;:::i;:::-;;:::i;3766:189::-;;;;;;;;;;-1:-1:-1;3766:189:225;;;;;:::i;:::-;;:::i;696:567:65:-;;;;;;;;;;-1:-1:-1;696:567:65;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2056:651:226:-;;;;;;;;;;-1:-1:-1;2056:651:226;;;;;:::i;:::-;;:::i;463:36:60:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;4013:149:225:-;;;;;;;;;;-1:-1:-1;4013:149:225;;;;;:::i;:::-;;:::i;565:34:56:-;;;;;;;;;;;;;:::i;3646:2357:60:-;;;;;;;;;;-1:-1:-1;3646:2357:60;;;;;:::i;:::-;;:::i;2193:98:225:-;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;676:104:74:-;764:9;;-1:-1:-1;;;;;764:9:74;;676:104::o;4470:197:225:-;4553:4;6099:10:6;4607:32:225;6099:10:6;4623:7:225;4632:6;4607:8;:32::i;:::-;4656:4;4649:11;;;4470:197;;;;;:::o;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;5229:256:225:-;5326:4;6099:10:6;5382:38:225;5398:4;6099:10:6;5413:6:225;5382:15;:38::i;:::-;5430:27;5440:4;5446:2;5450:6;5430:9;:27::i;:::-;5474:4;5467:11;;;5229:256;;;;;;:::o;3018:272:226:-;3076:7;3107:4;-1:-1:-1;;;;;3116:12:226;3099:29;;:66;;;;;3149:16;3132:13;:33;3099:66;3095:189;;;-1:-1:-1;3188:24:226;;3018:272::o;3095:189::-;3250:23;:21;:23::i;:::-;3243:30;;3018:272;:::o;5880:236:225:-;6099:10:6;5968:4:225;6047:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6047:27:225;;;;;;;;;;5968:4;;6099:10:6;6022:66:225;;6099:10:6;;6047:27:225;;:40;;6077:10;;6047:40;:::i;:::-;6022:8;:66::i;2330:1219:60:-;2456:24;:22;:24::i;:::-;2451:80;;2496:24;;-1:-1:-1;;;2496:24:60;;;;;;;:::i;2451:80::-;2569:11;;2621:28;;2660:170;;;;-1:-1:-1;2725:1:60;6099:10:6;2770:48:60;;11047:2:821;11018:15;;;;-1:-1:-1;;;;;;11014:45:821;2770:48:60;;;11002:58:821;2805:12:60;11076::821;;;11069:28;11113:12;;2770:48:60;;;;;;;;;;;;2760:59;;;;;;2740:79;;2660:170;2867:10;:29;;;2844:20;:52;2840:111;;;2912:28;;-1:-1:-1;;;2912:28:60;;11338:2:821;2912:28:60;;;11320:21:821;11377:2;11357:18;;;11350:30;-1:-1:-1;;;11396:18:821;;;11389:48;11454:18;;2912:28:60;11136:342:821;2840:111:60;2978:450;;;;;;;;3023:10;:25;;;2978:450;;;;3082:10;:29;;;2978:450;;;;3140:20;2978:450;;;;3198:10;:33;;;2978:450;;;;3257:10;:21;;;2978:450;;;;3307:10;:24;;;2978:450;;;;3355:10;:19;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2978:450:60;;;;;3398:19;;;;:10;:19;:::i;:::-;2978:450;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2978:450:60;;-1:-1:-1;2961:467:60;;:14;:467;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2961:467:60;-1:-1:-1;;;;;2961:467:60;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;3438:11:60;:31;;;3485:57;;;;;;3507:10;;3519:22;;3485:57;:::i;:::-;;;;;;;;2441:1108;;2330:1219;;:::o;2309:164:6:-;2400:7;2375:21;2385:10;2375:9;:21::i;:::-;:32;;2367:63;;;;-1:-1:-1;;;2367:63:6;;;;;;;:::i;:::-;2440:26;2446:10;2458:7;2440:5;:26::i;1189:228:74:-;1279:29;:27;:29::i;:::-;1274:85;;1324:24;;-1:-1:-1;;;1324:24:74;;;;;;;:::i;1274:85::-;1368:42;1395:14;1368:26;:42::i;3445:125:225:-;-1:-1:-1;;;;;3545:18:225;3519:7;3545:18;;;:9;:18;;;;;;;3445:125::o;2770:430:6:-;2867:10;:8;:10::i;:::-;2859:46;;;;-1:-1:-1;;;2859:46:6;;16426:2:821;2859:46:6;;;16408:21:821;16465:2;16445:18;;;16438:30;-1:-1:-1;;;16484:18:821;;;16477:53;16547:18;;2859:46:6;16224:347:821;2859:46:6;2946:7;2923:19;2933:8;2923:9;:19::i;:::-;:30;;2915:61;;;;-1:-1:-1;;;2915:61:6;;;;;;;:::i;:::-;2986:26;3049:7;3015:31;3025:8;3035:10;3015:9;:31::i;:::-;:41;;;;:::i;:::-;2986:70;;3066:33;3075:8;3085:10;3097:1;3066:8;:33::i;:::-;3109:50;3118:8;3128:10;3140:18;3109:8;:50::i;:::-;3169:24;3175:8;3185:7;3169:5;:24::i;:::-;2849:351;2770:430;;:::o;2768:126:226:-;-1:-1:-1;;;;;2863:14:226;;2837:7;2863:14;;;:7;:14;;;;;918::233;2863:24:226;827:112:233;1181:1086:60;1558:11;;1580:84;6099:10:6;1610:9:60;1621;1632:14;1648:15;1580:11;:84::i;:::-;;1741:9;1709:14;:28;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;1760:40:60;;;;:21;:40;;;;;;;;6099:10:6;1760:58:60;;;;;;;:71;;1822:9;;1760:40;:71;;1822:9;;1760:71;:::i;:::-;;;;-1:-1:-1;1888:70:60;;-1:-1:-1;1917:1:60;1921:9;1932;1943:14;1888:20;:70::i;:::-;2015:20;2038:44;2061:9;2072;2038:22;:44::i;:::-;2015:67;-1:-1:-1;2015:67:60;-1:-1:-1;;;;;2098:67:60;;6099:10:6;-1:-1:-1;;;;;2098:67:60;;2155:9;2098:67;;;;2040:25:821;;2028:2;2013:18;;1894:177;2098:67:60;;;;;;;;1424:843;;1181:1086;;;;;;:::o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;1003:188:56:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:56;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;2404:102:225:-;2460:13;2492:7;2485:14;;;;;:::i;6603:429::-;6099:10:6;6696:4:225;6777:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6777:27:225;;;;;;;;;;6696:4;;6099:10:6;6822:35:225;;;;6814:85;;;;-1:-1:-1;;;6814:85:225;;16911:2:821;6814:85:225;;;16893:21:821;16950:2;16930:18;;;16923:30;16989:34;16969:18;;;16962:62;-1:-1:-1;;;17040:18:821;;;17033:35;17085:19;;6814:85:225;16709:401:821;6814:85:225;6933:60;6942:5;6949:7;6977:15;6958:16;:34;6933:8;:60::i;:::-;-1:-1:-1;7021:4:225;;6603:429;-1:-1:-1;;;;6603:429:225:o;3766:189::-;3845:4;6099:10:6;3899:28:225;6099:10:6;3916:2:225;3920:6;3899:9;:28::i;696:567:65:-;756:22;812:4;-1:-1:-1;;;;;800:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:34:65;-1:-1:-1;6099:10:6;834:14:65;;922:311;942:15;;;922:311;;;982:11;978:245;;;1026:78;1063:4;1087;;1092:1;1087:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1096:6;1070:33;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1026:28;:78::i;:::-;1013:7;1021:1;1013:10;;;;;;;;:::i;:::-;;;;;;:91;;;;978:245;;;1156:52;1193:4;1200;;1205:1;1200:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1156:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1156:28:65;;-1:-1:-1;;;1156:52:65:i;:::-;1143:7;1151:1;1143:10;;;;;;;;:::i;:::-;;;;;;:65;;;;978:245;959:3;;922:311;;;;1242:14;;696:567;;;;:::o;2056:651:226:-;2291:8;2272:15;:27;;2264:69;;;;-1:-1:-1;;;2264:69:226;;18332:2:821;2264:69:226;;;18314:21:821;18371:2;18351:18;;;18344:30;18410:31;18390:18;;;18383:59;18459:18;;2264:69:226;18130:353:821;2264:69:226;2344:18;2386:16;2404:5;2411:7;2420:5;2427:16;2437:5;2427:9;:16::i;:::-;2375:79;;;;;;18775:25:821;;;;-1:-1:-1;;;;;18874:15:821;;;18854:18;;;18847:43;18926:15;;;;18906:18;;;18899:43;18958:18;;;18951:34;19001:19;;;18994:35;19045:19;;;19038:35;;;18747:19;;2375:79:226;;;;;;;;;;;;2365:90;;;;;;2344:111;;2466:12;2481:53;2503:18;:16;:18::i;:::-;2523:10;8549:4:239;8543:11;-1:-1:-1;;;8567:23:239;;8619:4;8610:14;;8603:39;;;;8671:4;8662:14;;8655:34;8725:4;8710:20;;;8349:397;2481:53:226;2466:68;;2545:14;2562:28;2576:4;2582:1;2585;2588;2562:13;:28::i;:::-;2545:45;;2618:5;-1:-1:-1;;;;;2608:15:226;:6;-1:-1:-1;;;;;2608:15:226;;2600:58;;;;-1:-1:-1;;;2600:58:226;;19286:2:821;2600:58:226;;;19268:21:821;19325:2;19305:18;;;19298:30;19364:32;19344:18;;;19337:60;19414:18;;2600:58:226;19084:354:821;2600:58:226;2669:31;2678:5;2685:7;2694:5;2669:8;:31::i;:::-;2254:453;;;2056:651;;;;;;;:::o;463:36:60:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;463:36:60;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4013:149:225:-;-1:-1:-1;;;;;4128:18:225;;;4102:7;4128:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4013:149::o;565:34:56:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3646:2357:60:-;3890:56;;;;;;;;3932:14;3890:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3890:56:60;;;;;;;;3863:15;;;;3890:56;3932:14;;3890:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3890:56:60;;;;-1:-1:-1;;;3977:40:60;;;;4048:31;;;;4113:26;;;;4349:28;;;;3890:56;;-1:-1:-1;3977:40:60;;4048:31;;4113:26;4349:42;4345:515;;4424:425;4460:21;:15;;:21;:::i;:::-;4424:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4499:28:60;;;;;;-1:-1:-1;4618:8:60;;4652:38;;;;;4716:29;;;;;4771:24;;;;;;;;:::i;:::-;4576:241;;-1:-1:-1;;;;;;20228:2:821;20264:15;;;20260:24;;4576:241:60;;;20248:37:821;20301:12;;;20294:28;;;;20338:12;;;20331:28;;;;20393:15;;;20389:24;20375:12;;;20368:46;20430:13;;4576:241:60;;;;;;;;;;;;4545:290;;;;;;4424:18;:425::i;:::-;-1:-1:-1;4407:442:60;-1:-1:-1;4345:515:60;4874:10;4870:534;;;4913:15;:38;;;4955:1;4913:43;:129;;5032:10;4913:129;;;4975:15;:38;;;4913:129;4900:142;;-1:-1:-1;;5069:15:60;:29;;;:50;:127;;5186:10;5069:127;;;5138:15;:29;;;5069:127;5056:140;;-1:-1:-1;;5226:15:60;:29;;;:50;;:92;;;;-1:-1:-1;5316:1:60;5280:24;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5280:38:60;;;5226:92;:167;;5380:13;5226:167;;;5337:24;;;;;;;;:::i;:::-;5210:183;;4870:534;5469:11;;5414:30;5447:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;5447:44:60;;;;;;;;;;;;5506:26;;;;;;;;;:58;;;5554:10;5536:14;:28;;5506:58;5502:115;;;5580:26;;-1:-1:-1;;;5580:26:60;;20656:2:821;5580:26:60;;;20638:21:821;20695:2;20675:18;;;20668:30;-1:-1:-1;;;20714:18:821;;;20707:46;20770:18;;5580:26:60;20454:340:821;5502:115:60;5631:14;;;:67;;-1:-1:-1;5687:10:60;5650:34;5662:22;5650:9;:34;:::i;:::-;:47;5631:67;5627:112;;;5714:14;;-1:-1:-1;;;5714:14:60;;;;;;21001:2:821;20983:21;;;21040:1;21020:18;;;21013:29;-1:-1:-1;;;21073:2:821;21058:18;;21051:34;21117:2;21102:18;;20799:327;5627:112:60;5799:17;:36;;;5787:9;5753:17;:31;;;:43;;;;:::i;:::-;:82;5749:133;;;5851:20;;-1:-1:-1;;;5851:20:60;;21333:2:821;5851:20:60;;;21315:21:821;21372:2;21352:18;;;21345:30;-1:-1:-1;;;21391:18:821;;;21384:40;21441:18;;5851:20:60;21131:334:821;5749:133:60;5896:32;;5931:15;-1:-1:-1;5892:105:60;;;5962:24;;-1:-1:-1;;;5962:24:60;;21672:2:821;5962:24:60;;;21654:21:821;21711:2;21691:18;;;21684:30;-1:-1:-1;;;21730:18:821;;;21723:44;21784:18;;5962:24:60;21470:338:821;5892:105:60;3880:2123;;;;;3646:2357;;;;;;;:::o;10100:340:225:-;-1:-1:-1;;;;;10201:19:225;;10193:68;;;;-1:-1:-1;;;10193:68:225;;22015:2:821;10193:68:225;;;21997:21:821;22054:2;22034:18;;;22027:30;22093:34;22073:18;;;22066:62;-1:-1:-1;;;22144:18:821;;;22137:34;22188:19;;10193:68:225;21813:400:821;10193:68:225;-1:-1:-1;;;;;10279:21:225;;10271:68;;;;-1:-1:-1;;;10271:68:225;;22420:2:821;10271:68:225;;;22402:21:821;22459:2;22439:18;;;22432:30;22498:34;22478:18;;;22471:62;-1:-1:-1;;;22549:18:821;;;22542:32;22591:19;;10271:68:225;22218:398:821;10271:68:225;-1:-1:-1;;;;;10350:18:225;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10401:32;;2040:25:821;;;10401:32:225;;2013:18:821;10401:32:225;;;;;;;10100:340;;;:::o;5580:115:6:-;5644:4;5681:7;:5;:7::i;:::-;-1:-1:-1;;;;;5667:21:6;:10;-1:-1:-1;;;;;5667:21:6;;5660:28;;5580:115;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;10717:411:225:-;10817:24;10844:25;10854:5;10861:7;10844:9;:25::i;:::-;10817:52;;-1:-1:-1;;10883:16:225;:37;10879:243;;10964:6;10944:16;:26;;10936:68;;;;-1:-1:-1;;;10936:68:225;;22823:2:821;10936:68:225;;;22805:21:821;22862:2;22842:18;;;22835:30;22901:31;22881:18;;;22874:59;22950:18;;10936:68:225;22621:353:821;10936:68:225;11046:51;11055:5;11062:7;11090:6;11071:16;:25;11046:8;:51::i;:::-;10807:321;10717:411;;;:::o;7495:621::-;-1:-1:-1;;;;;7591:18:225;;7583:68;;;;-1:-1:-1;;;7583:68:225;;23181:2:821;7583:68:225;;;23163:21:821;23220:2;23200:18;;;23193:30;23259:34;23239:18;;;23232:62;-1:-1:-1;;;23310:18:821;;;23303:35;23355:19;;7583:68:225;22979:401:821;7583:68:225;-1:-1:-1;;;;;7669:16:225;;7661:64;;;;-1:-1:-1;;;7661:64:225;;23587:2:821;7661:64:225;;;23569:21:821;23626:2;23606:18;;;23599:30;23665:34;23645:18;;;23638:62;-1:-1:-1;;;23716:18:821;;;23709:33;23759:19;;7661:64:225;23385:399:821;7661:64:225;-1:-1:-1;;;;;7807:15:225;;7785:19;7807:15;;;:9;:15;;;;;;7840:21;;;;7832:72;;;;-1:-1:-1;;;7832:72:225;;23991:2:821;7832:72:225;;;23973:21:821;24030:2;24010:18;;;24003:30;24069:34;24049:18;;;24042:62;-1:-1:-1;;;24120:18:821;;;24113:36;24166:19;;7832:72:225;23789:402:821;7832:72:225;-1:-1:-1;;;;;7938:15:225;;;;;;;:9;:15;;;;;;7956:20;;;7938:38;;7996:13;;;;;;;;:23;;7970:6;;7938:15;7996:23;;7970:6;;7996:23;:::i;:::-;;;;;;;;8050:2;-1:-1:-1;;;;;8035:26:225;8044:4;-1:-1:-1;;;;;8035:26:225;-1:-1:-1;;;;;;;;;;;8054:6:225;8035:26;;;;2040:25:821;;2028:2;2013:18;;1894:177;8035:26:225;;;;;;;;8072:37;2770:430:6;3296:438:226;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;24455:25:821;;;;24496:18;;;24489:34;;;;3611:14:226;24539:18:821;;;24532:34;3647:13:226;24582:18:821;;;24575:34;3690:4:226;24625:19:821;;;24618:61;24427:19;;3416:297:226;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;9101:576:225:-;-1:-1:-1;;;;;9184:21:225;;9176:67;;;;-1:-1:-1;;;9176:67:225;;24892:2:821;9176:67:225;;;24874:21:821;24931:2;24911:18;;;24904:30;24970:34;24950:18;;;24943:62;-1:-1:-1;;;25021:18:821;;;25014:31;25062:19;;9176:67:225;24690:397:821;9176:67:225;-1:-1:-1;;;;;9339:18:225;;9314:22;9339:18;;;:9;:18;;;;;;9375:24;;;;9367:71;;;;-1:-1:-1;;;9367:71:225;;25294:2:821;9367:71:225;;;25276:21:821;25333:2;25313:18;;;25306:30;25372:34;25352:18;;;25345:62;-1:-1:-1;;;25423:18:821;;;25416:32;25465:19;;9367:71:225;25092:398:821;9367:71:225;-1:-1:-1;;;;;9472:18:225;;;;;;:9;:18;;;;;9493:23;;;9472:44;;9536:12;:22;;9510:6;;9472:18;9536:22;;9510:6;;9536:22;:::i;:::-;;;;-1:-1:-1;;9574:37:225;;2040:25:821;;;9600:1:225;;-1:-1:-1;;;;;9574:37:225;;;-1:-1:-1;;;;;;;;;;;9574:37:225;2028:2:821;2013:18;9574:37:225;;;;;;;2849:351:6;2770:430;;:::o;1499:265:74:-;-1:-1:-1;;;;;1582:28:74;;1578:86;;1626:27;;-1:-1:-1;;;1626:27:74;;25697:2:821;1626:27:74;;;25679:21:821;25736:2;25716:18;;;25709:30;-1:-1:-1;;;25755:18:821;;;25748:47;25812:18;;1626:27:74;25495:341:821;1578:86:74;1673:9;:26;;-1:-1:-1;;;;;;1673:26:74;-1:-1:-1;;;;;1673:26:74;;;;;;;;1714:43;;;;-1:-1:-1;;1714:43:74;1499:265;:::o;6677:237:60:-;;;;;;;:::o;3489:925:6:-;3697:14;3715:1;3697:19;3693:103;;3740:9;:14;3732:33;;;;-1:-1:-1;;;3732:33:6;;26043:2:821;3732:33:6;;;26025:21:821;26082:1;26062:18;;;26055:29;-1:-1:-1;;;26100:18:821;;;26093:36;26146:18;;3732:33:6;25841:329:821;3732:33:6;3779:7;;3693:103;3806:18;3865:7;3828:33;3847:14;3828:16;:33;:::i;:::-;3827:45;;;;:::i;:::-;3806:66;;3903:1;3890:10;:14;3882:43;;;;-1:-1:-1;;;3882:43:6;;26772:2:821;3882:43:6;;;26754:21:821;26811:2;26791:18;;;26784:30;-1:-1:-1;;;26830:18:821;;;26823:46;26886:18;;3882:43:6;26570:340:821;3882:43:6;3936:18;-1:-1:-1;;;;;;;3968:45:6;;;3964:176;;-1:-1:-1;4045:9:6;:23;;3964:176;;;-1:-1:-1;4115:9:6;:14;3964:176;4157:13;4149:43;;;;-1:-1:-1;;;4149:43:6;;27117:2:821;4149:43:6;;;27099:21:821;27156:2;27136:18;;;27129:30;-1:-1:-1;;;27175:18:821;;;27168:47;27232:18;;4149:43:6;26915:341:821;4149:43:6;4203:21;-1:-1:-1;;;;;4227:35:6;;;:84;;4290:21;4227:84;;;4265:22;:20;:22::i;:::-;4203:108;;4321:86;4358:9;4369:10;4381:13;4396:10;4321:36;:86::i;:::-;3683:731;;;3489:925;;;;:::o;4469:210::-;4602:7;4621:33;4627:3;4632:21;4621:5;:33::i;:::-;-1:-1:-1;4671:1:6;4469:210;;;;:::o;1273:185:56:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1398:4;1384:11;:18;;;;;;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;6671:198:289:-;6754:12;6785:77;6806:6;6814:4;6785:77;;;;;;;;;;;;;;;;;:20;:77::i;3865:203:226:-;-1:-1:-1;;;;;3985:14:226;;3925:15;3985:14;;;:7;:14;;;;;918::233;;1050:1;1032:19;;;;918:14;4044:17:226;3942:126;3865:203;;;:::o;6611:232:239:-;6696:7;6716:17;6735:18;6757:25;6768:4;6774:1;6777;6780;6757:10;:25::i;:::-;6715:67;;;;6792:18;6804:5;6792:11;:18::i;:::-;-1:-1:-1;6827:9:239;-1:-1:-1;6611:232:239;;;;;;;:::o;112:876:294:-;203:4;;251;203;;293:567;317:5;:12;313:1;:16;293:567;;;350:10;359:1;350:10;;:::i;:::-;;;374:20;397:5;403:1;397:8;;;;;;;;:::i;:::-;;;;;;;374:31;;440:12;424;:28;420:430;;575:44;;;;;;27806:19:821;;;27841:12;;;27834:28;;;27878:12;;575:44:294;;;;;;;;;;;;565:55;;;;;;550:70;;420:430;;;762:44;;;;;;27806:19:821;;;27841:12;;;27834:28;;;27878:12;;762:44:294;;;;;;;;;;;;752:55;;;;;;737:70;;834:1;825:10;;;;;:::i;:::-;;;420:430;-1:-1:-1;331:3:294;;293:567;;;-1:-1:-1;953:20:294;;;;;-1:-1:-1;;;;112:876:294:o;534:347:292:-;643:49;;675:7;643:49;-1:-1:-1;;;;;;;706:25:292;;;702:173;;747:37;771:3;776:7;747:23;:37::i;702:173::-;815:49;833:9;844:5;851:3;856:7;815:17;:49::i;8392:389:225:-;-1:-1:-1;;;;;8475:21:225;;8467:65;;;;-1:-1:-1;;;8467:65:225;;28103:2:821;8467:65:225;;;28085:21:821;28142:2;28122:18;;;28115:30;28181:33;28161:18;;;28154:61;28232:18;;8467:65:225;27901:355:821;8467:65:225;8619:6;8603:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8635:18:225;;;;;;:9;:18;;;;;:28;;8657:6;;8635:18;:28;;8657:6;;8635:28;:::i;:::-;;;;-1:-1:-1;;8678:37:225;;2040:25:821;;;-1:-1:-1;;;;;8678:37:225;;;8695:1;;-1:-1:-1;;;;;;;;;;;8678:37:225;2028:2:821;2013:18;8678:37:225;;;;;;;8392:389;;:::o;7055:325:289:-;7196:12;7221;7235:23;7262:6;-1:-1:-1;;;;;7262:19:289;7282:4;7262:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7220:67;;;;7304:69;7331:6;7339:7;7348:10;7360:12;7304:26;:69::i;:::-;7297:76;7055:325;-1:-1:-1;;;;;;7055:325:289:o;5022:1456:239:-;5110:7;;-1:-1:-1;;;;;6021:79:239;;6017:161;;;-1:-1:-1;6132:1:239;;-1:-1:-1;6136:30:239;6116:51;;6017:161;6289:24;;;6272:14;6289:24;;;;;;;;;28780:25:821;;;28853:4;28841:17;;28821:18;;;28814:45;;;;28875:18;;;28868:34;;;28918:18;;;28911:34;;;6289:24:239;;28752:19:821;;6289:24:239;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6289:24:239;;-1:-1:-1;;6289:24:239;;;-1:-1:-1;;;;;;;6327:20:239;;6323:101;;6379:1;6383:29;6363:50;;;;;;;6323:101;6442:6;-1:-1:-1;6450:20:239;;-1:-1:-1;5022:1456:239;;;;;;;;:::o;583:511::-;660:20;651:5;:29;;;;;;;;:::i;:::-;;647:441;;583:511;:::o;647:441::-;756:29;747:5;:38;;;;;;;;:::i;:::-;;743:345;;801:34;;-1:-1:-1;;;801:34:239;;29290:2:821;801:34:239;;;29272:21:821;29329:2;29309:18;;;29302:30;-1:-1:-1;;;29348:18:821;;;29341:54;29412:18;;801:34:239;29088:348:821;743:345:239;865:35;856:5;:44;;;;;;;;:::i;:::-;;852:236;;916:41;;-1:-1:-1;;;916:41:239;;29643:2:821;916:41:239;;;29625:21:821;29682:2;29662:18;;;29655:30;29721:33;29701:18;;;29694:61;29772:18;;916:41:239;29441:355:821;852:236:239;987:30;978:5;:39;;;;;;;;:::i;:::-;;974:114;;1033:44;;-1:-1:-1;;;1033:44:239;;30003:2:821;1033:44:239;;;29985:21:821;30042:2;30022:18;;;30015:30;30081:34;30061:18;;;30054:62;-1:-1:-1;;;30132:18:821;;;30125:32;30174:19;;1033:44:239;29801:398:821;2482:292:292;2664:12;2682:2;-1:-1:-1;;;;;2682:7:292;2698:5;2682:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2663:46;;;2727:7;2719:48;;;;-1:-1:-1;;;2719:48:292;;30616:2:821;2719:48:292;;;30598:21:821;30655:2;30635:18;;;30628:30;-1:-1:-1;;;30674:18:821;;;30667:58;30742:18;;2719:48:292;30414:352:821;2061:358:292;2184:3;-1:-1:-1;;;;;2175:12:292;:5;-1:-1:-1;;;;;2175:12:292;;2171:49;2203:7;2171:49;2251:4;-1:-1:-1;;;;;2234:22:292;;;2230:183;;2272:44;-1:-1:-1;;;;;2272:30:292;;2303:3;2308:7;2272:30;:44::i;2230:183::-;2347:55;-1:-1:-1;;;;;2347:34:292;;2382:5;2389:3;2394:7;2347:34;:55::i;7668:628:289:-;7848:12;7876:7;7872:418;;;7903:10;:17;7924:1;7903:22;7899:286;;-1:-1:-1;;;;;1695:19:289;;;8110:60;;;;-1:-1:-1;;;8110:60:289;;30973:2:821;8110:60:289;;;30955:21:821;31012:2;30992:18;;;30985:30;31051:31;31031:18;;;31024:59;31100:18;;8110:60:289;30771:353:821;8110:60:289;-1:-1:-1;8205:10:289;8198:17;;7872:418;8246:33;8254:10;8266:12;8246:7;:33::i;759:175:228:-;868:58;;-1:-1:-1;;;;;31321:32:821;;868:58:228;;;31303:51:821;31370:18;;;31363:34;;;841:86:228;;861:5;;-1:-1:-1;;;891:23:228;31276:18:821;;868:58:228;;;;-1:-1:-1;;868:58:228;;;;;;;;;;;;;;-1:-1:-1;;;;;868:58:228;-1:-1:-1;;;;;;868:58:228;;;;;;;;;;841:19;:86::i;940:203::-;1067:68;;-1:-1:-1;;;;;31666:15:821;;;1067:68:228;;;31648:34:821;31718:15;;31698:18;;;31691:43;31750:18;;;31743:34;;;1040:96:228;;1060:5;;-1:-1:-1;;;1090:27:228;31583:18:821;;1067:68:228;31408:375:821;8818:540:289;8977:17;;:21;8973:379;;9205:10;9199:17;9261:15;9248:10;9244:2;9240:19;9233:44;8973:379;9328:12;9321:20;;-1:-1:-1;;;9321:20:289;;;;;;;;:::i;3107:706:228:-;3526:23;3552:69;3580:4;3552:69;;;;;;;;;;;;;;;;;3560:5;-1:-1:-1;;;;;3552:27:228;;;:69;;;;;:::i;:::-;3635:17;;3526:95;;-1:-1:-1;3635:21:228;3631:176;;3730:10;3719:30;;;;;;;;;;;;:::i;:::-;3711:85;;;;-1:-1:-1;;;3711:85:228;;32240:2:821;3711:85:228;;;32222:21:821;32279:2;32259:18;;;32252:30;32318:34;32298:18;;;32291:62;-1:-1:-1;;;32369:18:821;;;32362:40;32419:19;;3711:85:228;32038:406:821;4108:223:530;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4241;5446;5460:23;5487:6;-1:-1:-1;;;;;5487:11:530;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:530:o;14:250:821:-;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:821;238:16;;231:27;14:250::o;269:271::-;311:3;349:5;343:12;376:6;371:3;364:19;392:76;461:6;454:4;449:3;445:14;438:4;431:5;427:16;392:76;:::i;:::-;522:2;501:15;-1:-1:-1;;497:29:821;488:39;;;;529:4;484:50;;269:271;-1:-1:-1;;269:271:821:o;545:220::-;694:2;683:9;676:21;657:4;714:45;755:2;744:9;740:18;732:6;714:45;:::i;978:173::-;1046:20;;-1:-1:-1;;;;;1095:31:821;;1085:42;;1075:70;;1141:1;1138;1131:12;1075:70;978:173;;;:::o;1156:254::-;1224:6;1232;1285:2;1273:9;1264:7;1260:23;1256:32;1253:52;;;1301:1;1298;1291:12;1253:52;1324:29;1343:9;1324:29;:::i;:::-;1314:39;1400:2;1385:18;;;;1372:32;;-1:-1:-1;;;1156:254:821:o;1703:186::-;1762:6;1815:2;1803:9;1794:7;1790:23;1786:32;1783:52;;;1831:1;1828;1821:12;1783:52;1854:29;1873:9;1854:29;:::i;2076:328::-;2153:6;2161;2169;2222:2;2210:9;2201:7;2197:23;2193:32;2190:52;;;2238:1;2235;2228:12;2190:52;2261:29;2280:9;2261:29;:::i;:::-;2251:39;;2309:38;2343:2;2332:9;2328:18;2309:38;:::i;:::-;2299:48;;2394:2;2383:9;2379:18;2366:32;2356:42;;2076:328;;;;;:::o;2780:118::-;2866:5;2859:13;2852:21;2845:5;2842:32;2832:60;;2888:1;2885;2878:12;2903:524;3003:6;3011;3064:2;3052:9;3043:7;3039:23;3035:32;3032:52;;;3080:1;3077;3070:12;3032:52;3120:9;3107:23;-1:-1:-1;;;;;3145:6:821;3142:30;3139:50;;;3185:1;3182;3175:12;3139:50;3208:22;;3264:3;3246:16;;;3242:26;3239:46;;;3281:1;3278;3271:12;3239:46;3304:2;-1:-1:-1;3356:2:821;3341:18;;3328:32;3369:28;3328:32;3369:28;:::i;:::-;3416:5;3406:15;;;2903:524;;;;;:::o;3432:180::-;3491:6;3544:2;3532:9;3523:7;3519:23;3515:32;3512:52;;;3560:1;3557;3550:12;3512:52;-1:-1:-1;3583:23:821;;3432:180;-1:-1:-1;3432:180:821:o;3617:163::-;3684:5;3729:3;3720:6;3715:3;3711:16;3707:26;3704:46;;;3746:1;3743;3736:12;3785:127;3846:10;3841:3;3837:20;3834:1;3827:31;3877:4;3874:1;3867:15;3901:4;3898:1;3891:15;3917:631;3981:5;-1:-1:-1;;;;;4052:2:821;4044:6;4041:14;4038:40;;;4058:18;;:::i;:::-;4133:2;4127:9;4101:2;4187:15;;-1:-1:-1;;4183:24:821;;;4209:2;4179:33;4175:42;4163:55;;;4233:18;;;4253:22;;;4230:46;4227:72;;;4279:18;;:::i;:::-;4319:10;4315:2;4308:22;4348:6;4339:15;;4378:6;4370;4363:22;4418:3;4409:6;4404:3;4400:16;4397:25;4394:45;;;4435:1;4432;4425:12;4394:45;4485:6;4480:3;4473:4;4465:6;4461:17;4448:44;4540:1;4533:4;4524:6;4516;4512:19;4508:30;4501:41;;;;3917:631;;;;;:::o;4553:1006::-;4701:6;4709;4717;4725;4733;4741;4794:3;4782:9;4773:7;4769:23;4765:33;4762:53;;;4811:1;4808;4801:12;4762:53;4834:29;4853:9;4834:29;:::i;:::-;4824:39;;4910:2;4899:9;4895:18;4882:32;4872:42;;4933:38;4967:2;4956:9;4952:18;4933:38;:::i;:::-;4923:48;;5018:2;5007:9;5003:18;4990:32;4980:42;;5073:3;5062:9;5058:19;5045:33;-1:-1:-1;;;;;5138:2:821;5130:6;5127:14;5124:34;;;5154:1;5151;5144:12;5124:34;5177:74;5243:7;5234:6;5223:9;5219:22;5177:74;:::i;:::-;5167:84;;5304:3;5293:9;5289:19;5276:33;5260:49;;5334:2;5324:8;5321:16;5318:36;;;5350:1;5347;5340:12;5318:36;-1:-1:-1;5373:24:821;;5428:4;5420:13;;5416:27;-1:-1:-1;5406:55:821;;5457:1;5454;5447:12;5406:55;5480:73;5545:7;5540:2;5527:16;5522:2;5518;5514:11;5480:73;:::i;:::-;5470:83;;;4553:1006;;;;;;;;:::o;5564:450::-;5633:6;5686:2;5674:9;5665:7;5661:23;5657:32;5654:52;;;5702:1;5699;5692:12;5654:52;5742:9;5729:23;-1:-1:-1;;;;;5767:6:821;5764:30;5761:50;;;5807:1;5804;5797:12;5761:50;5830:22;;5883:4;5875:13;;5871:27;-1:-1:-1;5861:55:821;;5912:1;5909;5902:12;5861:55;5935:73;6000:7;5995:2;5982:16;5977:2;5973;5969:11;5935:73;:::i;6019:626::-;6116:6;6124;6177:2;6165:9;6156:7;6152:23;6148:32;6145:52;;;6193:1;6190;6183:12;6145:52;6233:9;6220:23;-1:-1:-1;;;;;6303:2:821;6295:6;6292:14;6289:34;;;6319:1;6316;6309:12;6289:34;6357:6;6346:9;6342:22;6332:32;;6402:7;6395:4;6391:2;6387:13;6383:27;6373:55;;6424:1;6421;6414:12;6373:55;6464:2;6451:16;6490:2;6482:6;6479:14;6476:34;;;6506:1;6503;6496:12;6476:34;6559:7;6554:2;6544:6;6541:1;6537:14;6533:2;6529:23;6525:32;6522:45;6519:65;;;6580:1;6577;6570:12;6519:65;6611:2;6603:11;;;;;6633:6;;-1:-1:-1;6019:626:821;;-1:-1:-1;;;;6019:626:821:o;6650:801::-;6810:4;6839:2;6879;6868:9;6864:18;6909:2;6898:9;6891:21;6932:6;6967;6961:13;6998:6;6990;6983:22;7036:2;7025:9;7021:18;7014:25;;7098:2;7088:6;7085:1;7081:14;7070:9;7066:30;7062:39;7048:53;;7136:2;7128:6;7124:15;7157:1;7167:255;7181:6;7178:1;7175:13;7167:255;;;7274:2;7270:7;7258:9;7250:6;7246:22;7242:36;7237:3;7230:49;7302:40;7335:6;7326;7320:13;7302:40;:::i;:::-;7292:50;-1:-1:-1;7400:12:821;;;;7365:15;;;;7203:1;7196:9;7167:255;;;-1:-1:-1;7439:6:821;;6650:801;-1:-1:-1;;;;;;;6650:801:821:o;7456:693::-;7567:6;7575;7583;7591;7599;7607;7615;7668:3;7656:9;7647:7;7643:23;7639:33;7636:53;;;7685:1;7682;7675:12;7636:53;7708:29;7727:9;7708:29;:::i;:::-;7698:39;;7756:38;7790:2;7779:9;7775:18;7756:38;:::i;:::-;7746:48;;7841:2;7830:9;7826:18;7813:32;7803:42;;7892:2;7881:9;7877:18;7864:32;7854:42;;7946:3;7935:9;7931:19;7918:33;7991:4;7984:5;7980:16;7973:5;7970:27;7960:55;;8011:1;8008;8001:12;7960:55;7456:693;;;;-1:-1:-1;7456:693:821;;;;8034:5;8086:3;8071:19;;8058:33;;-1:-1:-1;8138:3:821;8123:19;;;8110:33;;7456:693;-1:-1:-1;;7456:693:821:o;8154:769::-;8462:4;8491:3;8521:6;8510:9;8503:25;8564:6;8559:2;8548:9;8544:18;8537:34;8607:6;8602:2;8591:9;8587:18;8580:34;8650:6;8645:2;8634:9;8630:18;8623:34;8694:6;8688:3;8677:9;8673:19;8666:35;8738:6;8732:3;8721:9;8717:19;8710:35;8811:1;8807;8802:3;8798:11;8794:19;8786:6;8782:32;8776:3;8765:9;8761:19;8754:61;8852:2;8846:3;8835:9;8831:19;8824:31;8872:45;8913:2;8902:9;8898:18;8890:6;8872:45;:::i;:::-;8864:53;8154:769;-1:-1:-1;;;;;;;;;;;8154:769:821:o;8928:260::-;8996:6;9004;9057:2;9045:9;9036:7;9032:23;9028:32;9025:52;;;9073:1;9070;9063:12;9025:52;9096:29;9115:9;9096:29;:::i;:::-;9086:39;;9144:38;9178:2;9167:9;9163:18;9144:38;:::i;:::-;9134:48;;8928:260;;;;;:::o;9193:657::-;9323:6;9331;9339;9347;9355;9408:3;9396:9;9387:7;9383:23;9379:33;9376:53;;;9425:1;9422;9415:12;9376:53;9448:29;9467:9;9448:29;:::i;:::-;9438:39;;9524:2;9513:9;9509:18;9496:32;9486:42;;9547:38;9581:2;9570:9;9566:18;9547:38;:::i;:::-;9537:48;;9632:2;9621:9;9617:18;9604:32;9594:42;;9687:3;9676:9;9672:19;9659:33;-1:-1:-1;;;;;9707:6:821;9704:30;9701:50;;;9747:1;9744;9737:12;9701:50;9770:74;9836:7;9827:6;9816:9;9812:22;9770:74;:::i;:::-;9760:84;;;9193:657;;;;;;;;:::o;9855:380::-;9934:1;9930:12;;;;9977;;;9998:61;;10052:4;10044:6;10040:17;10030:27;;9998:61;10105:2;10097:6;10094:14;10074:18;10071:38;10068:161;;10151:10;10146:3;10142:20;10139:1;10132:31;10186:4;10183:1;10176:15;10214:4;10211:1;10204:15;10240:338;10442:2;10424:21;;;10481:2;10461:18;;;10454:30;-1:-1:-1;;;10515:2:821;10500:18;;10493:44;10569:2;10554:18;;10240:338::o;10583:127::-;10644:10;10639:3;10635:20;10632:1;10625:31;10675:4;10672:1;10665:15;10699:4;10696:1;10689:15;10715:125;10780:9;;;10801:10;;;10798:36;;;10814:18;;:::i;11483:522::-;11561:4;11567:6;11627:11;11614:25;11721:2;11717:7;11706:8;11690:14;11686:29;11682:43;11662:18;11658:68;11648:96;;11740:1;11737;11730:12;11648:96;11767:33;;11819:20;;;-1:-1:-1;;;;;;11851:30:821;;11848:50;;;11894:1;11891;11884:12;11848:50;11927:4;11915:17;;-1:-1:-1;11958:14:821;11954:27;;;11944:38;;11941:58;;;11995:1;11992;11985:12;11941:58;11483:522;;;;;:::o;12136:543::-;12238:2;12233:3;12230:11;12227:446;;;12274:1;12298:5;12295:1;12288:16;12342:4;12339:1;12329:18;12412:2;12400:10;12396:19;12393:1;12389:27;12383:4;12379:38;12448:4;12436:10;12433:20;12430:47;;;-1:-1:-1;12471:4:821;12430:47;12526:2;12521:3;12517:12;12514:1;12510:20;12504:4;12500:31;12490:41;;12581:82;12599:2;12592:5;12589:13;12581:82;;;12644:17;;;12625:1;12614:13;12581:82;;12855:1345;12981:3;12975:10;-1:-1:-1;;;;;13000:6:821;12997:30;12994:56;;;13030:18;;:::i;:::-;13059:97;13149:6;13109:38;13141:4;13135:11;13109:38;:::i;:::-;13103:4;13059:97;:::i;:::-;13211:4;;13268:2;13257:14;;13285:1;13280:663;;;;13987:1;14004:6;14001:89;;;-1:-1:-1;14056:19:821;;;14050:26;14001:89;-1:-1:-1;;12812:1:821;12808:11;;;12804:24;12800:29;12790:40;12836:1;12832:11;;;12787:57;14103:81;;13250:944;;13280:663;12083:1;12076:14;;;12120:4;12107:18;;-1:-1:-1;;13316:20:821;;;13434:236;13448:7;13445:1;13442:14;13434:236;;;13537:19;;;13531:26;13516:42;;13629:27;;;;13597:1;13585:14;;;;13464:19;;13434:236;;;13438:3;13698:6;13689:7;13686:19;13683:201;;;13759:19;;;13753:26;-1:-1:-1;;13842:1:821;13838:14;;;13854:3;13834:24;13830:37;13826:42;13811:58;13796:74;;13683:201;-1:-1:-1;;;;;13930:1:821;13914:14;;;13910:22;13897:36;;-1:-1:-1;12855:1345:821:o;14205:267::-;14294:6;14289:3;14282:19;14346:6;14339:5;14332:4;14327:3;14323:14;14310:43;-1:-1:-1;14398:1:821;14373:16;;;14391:4;14369:27;;;14362:38;;;;14454:2;14433:15;;;-1:-1:-1;;14429:29:821;14420:39;;;14416:50;;14205:267::o;14477:1395::-;14696:2;14685:9;14678:21;14748:6;14735:20;14730:2;14719:9;14715:18;14708:48;14817:4;14809:6;14805:17;14792:31;14787:2;14776:9;14772:18;14765:59;14886:2;14878:6;14874:15;14861:29;14855:3;14844:9;14840:19;14833:58;14953:2;14945:6;14941:15;14928:29;14922:3;14911:9;14907:19;14900:58;15020:3;15012:6;15008:16;14995:30;14989:3;14978:9;14974:19;14967:59;15088:3;15080:6;15076:16;15063:30;15057:3;15046:9;15042:19;15035:59;14659:4;15123:36;15154:3;15146:6;15142:16;15123:36;:::i;:::-;-1:-1:-1;;;;;15220:38:821;15178:6;15200:18;;;15193:66;;;;15319:3;15307:16;;15294:30;;15375:14;15371:27;;;-1:-1:-1;;15367:41:821;15343:66;;15333:94;;15423:1;15420;15413:12;15333:94;15557:4;15449:31;;;15546:16;;;;15503:19;-1:-1:-1;;;;;15574:30:821;;15571:50;;;15617:1;15614;15607:12;15571:50;15666:6;15650:14;15646:27;15637:7;15633:41;15630:61;;;15687:1;15684;15677:12;15630:61;15728:2;15722:3;15711:9;15707:19;15700:31;15748:64;15807:3;15796:9;15792:19;15784:6;15775:7;15748:64;:::i;:::-;15740:72;;;;;15821:45;15860:4;15849:9;15845:20;15837:6;1485:13;1478:21;1466:34;;1415:91;15877:342;16079:2;16061:21;;;16118:2;16098:18;;;16091:30;-1:-1:-1;;;16152:2:821;16137:18;;16130:48;16210:2;16195:18;;15877:342::o;16576:128::-;16643:9;;;16664:11;;;16661:37;;;16678:18;;:::i;17115:127::-;17176:10;17171:3;17167:20;17164:1;17157:31;17207:4;17204:1;17197:15;17231:4;17228:1;17221:15;17773:352;17984:6;17976;17971:3;17958:33;18079:2;18050:15;;;;-1:-1:-1;;;;;;18046:45:821;18010:16;;18035:57;;;18116:2;18108:11;;17773:352;-1:-1:-1;17773:352:821:o;19443:545::-;19536:4;19542:6;19602:11;19589:25;19696:2;19692:7;19681:8;19665:14;19661:29;19657:43;19637:18;19633:68;19623:96;;19715:1;19712;19705:12;19623:96;19742:33;;19794:20;;;-1:-1:-1;;;;;;19826:30:821;;19823:50;;;19869:1;19866;19859:12;19823:50;19902:4;19890:17;;-1:-1:-1;19953:1:821;19949:14;;;19933;19929:35;19919:46;;19916:66;;;19978:1;19975;19968:12;26175:168;26248:9;;;26279;;26296:15;;;26290:22;;26276:37;26266:71;;26317:18;;:::i;26348:217::-;26388:1;26414;26404:132;;26458:10;26453:3;26449:20;26446:1;26439:31;26493:4;26490:1;26483:15;26521:4;26518:1;26511:15;26404:132;-1:-1:-1;26550:9:821;;26348:217::o;27261:383::-;27458:2;27447:9;27440:21;27421:4;27484:45;27525:2;27514:9;27510:18;27502:6;27484:45;:::i;:::-;27577:9;27569:6;27565:22;27560:2;27549:9;27545:18;27538:50;27605:33;27631:6;27623;27605:33;:::i;:::-;27597:41;27261:383;-1:-1:-1;;;;;27261:383:821:o;28261:287::-;28390:3;28428:6;28422:13;28444:66;28503:6;28498:3;28491:4;28483:6;28479:17;28444:66;:::i;:::-;28526:16;;;;;28261:287;-1:-1:-1;;28261:287:821:o;28956:127::-;29017:10;29012:3;29008:20;29005:1;28998:31;29048:4;29045:1;29038:15;29072:4;29069:1;29062:15;31788:245;31855:6;31908:2;31896:9;31887:7;31883:23;31879:32;31876:52;;;31924:1;31921;31914:12;31876:52;31956:9;31950:16;31975:28;31997:5;31975:28;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "48074": [
        {
          "start": 1645,
          "length": 32
        }
      ],
      "48076": [
        {
          "start": 1603,
          "length": 32
        }
      ],
      "48078": [
        {
          "start": 1561,
          "length": 32
        }
      ],
      "48083": [
        {
          "start": 3504,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DOMAIN_SEPARATOR()": "3644e515",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "burnFrom(address,uint256)": "79cc6790",
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": "84bb1e42",
    "claimCondition()": "d637ed59",
    "contractURI()": "e8a3d485",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "getSupplyClaimedByWallet(address)": "35b65e1f",
    "increaseAllowance(address,uint256)": "39509351",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nonces(address)": "7ecebe00",
    "owner()": "8da5cb5b",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
    "primarySaleRecipient()": "079fe40e",
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": "426cfaf3",
    "setContractURI(string)": "938e3d7b",
    "setOwner(address)": "13af4035",
    "setPrimarySaleRecipient(address)": "6f4f2837",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": "eec8897c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_primarySaleRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getSupplyClaimedByWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySaleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"_condition\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setPrimarySaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"},\"PrimarySaleRecipientUpdated(address)\":{\"details\":\"Emitted when a new sale recipient is set.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Caller should own the `_amount` of tokens.\",\"params\":{\"_amount\":\"The number of tokens to burn.\"}},\"burnFrom(address,uint256)\":{\"details\":\"`_account` should own the `_amount` of tokens.\",\"params\":{\"_account\":\"The account to burn tokens from.\",\"_amount\":\"The number of tokens to burn.\"}},\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"details\":\"Lets an account claim tokens.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getSupplyClaimedByWallet(address)\":{\"details\":\"Returns the supply claimed by claimer for active conditionId.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"primarySaleRecipient()\":{\"details\":\"Returns primary sale recipient address.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"details\":\"Lets a contract admin set claim conditions.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setPrimarySaleRecipient(address)\":{\"details\":\"Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\",\"params\":{\"_saleRecipient\":\"Address to be set as new recipient of primary sales.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))\":{\"details\":\"Checks a request to claim NFTs against the active claim condition's criteria.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed via `claim`.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner a given amount of their tokens.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Lets an owner burn a given amount of an account's tokens.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setPrimarySaleRecipient(address)\":{\"notice\":\"Updates primary sale recipient.\"}},\"notice\":\"BASE:      ERC20      EXTENSION: DropSinglePhase  The `ERC20Drop` smart contract implements the ERC20 standard.  It includes the following additions to standard ERC20 logic:      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by                             presenting a message signed by the account.  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism for tokens. It lets  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC20Drop.sol\":\"ERC20Drop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC20Drop.sol\":{\"keccak256\":\"0xbd5731ec17b737919a485cf56b338e58108d8dd766dae49758cc1d424f7c9943\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://db3cc08bff54001fb02a092b7b183f36ea9ab2d28cd639aec5c07941f206525f\",\"dweb:/ipfs/QmPfL6GCzhaXGoBLEpyZrSxg6Ndn7g6WoaHx2muiFrJQcz\"]},\"contracts/eip/interface/IERC20.sol\":{\"keccak256\":\"0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a08cdc1bfc92ed80fc6686fb51a018b896ee862ac9fa1a1599b3fa0198760ce8\",\"dweb:/ipfs/QmTxqXNnbht1GfzkTAKpQnpZdEADS9YXZdE8Cdr6cSJrNP\"]},\"contracts/eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"contracts/eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DropSinglePhase.sol\":{\"keccak256\":\"0xf44716630a3fd79499f1fee77324c28068f29e518edd784f548c65195029cd4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0c54dc4d5e409cbf6870d654b5e90e7ed4e462ab421a578c7042f85c47cd784b\",\"dweb:/ipfs/QmTMWwiYP36wEMbQRJ6m8rmLRymVJCKHhHuwxpHqnhpBVR\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e\",\"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/PrimarySale.sol\":{\"keccak256\":\"0x18c6ef2ca61c26a6885529abf17cbb668fa8cbc21d49337dfb778b9431fc58eb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://46beec7099679394ef4e35541056cc3049570f26fb7c30ac1811096ad4a7dab8\",\"dweb:/ipfs/QmTdLQbxxvVpdJk8bgAjATKP9tW1qvSwzmdsyXv3EBZiEE\"]},\"contracts/extension/interface/IBurnableERC20.sol\":{\"keccak256\":\"0x7098224c3bdcc1ec2e384c035b2f0853232696b4fae77df25919b1c19c033272\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc64766fb8746d8ee6a8814a3d4a7b4f0bf643bdf76b4d563f963f828ef020fe\",\"dweb:/ipfs/QmdNe4TrNDzkNBqwyehyS8H73h68bxk5PC8S9CXHfDqrw2\"]},\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDropSinglePhase.sol\":{\"keccak256\":\"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9\",\"dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IPrimarySale.sol\":{\"keccak256\":\"0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869\",\"dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF\"]},\"contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x541806757302ea976b52d48ff7df59f50ec72c10684254e4f17c181f46fd381f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b84a81fe700e99fc4741c535a84b008481160ec152da34d8ca49a99ea3a9396b\",\"dweb:/ipfs/Qmb3nCYyECbyFiobDHRNDop3qTYoGNt7FusxXpQNWj5dDn\"]},\"contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a\",\"dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn\"]},\"contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xda67ad8d28cb66bbef1831a14d3506e3d0ac8c8446990a63474f4e56037f1a58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cda94d0193ca3e3cf4ac4d561c0c668dffc3e9b2c55c5454e9b03a12fd7141fb\",\"dweb:/ipfs/Qmbaw5cPuCmqE7hy8CpM3ibFC77TMWnH4jGDcWduvdNZaA\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x2f1ee59fbdefde38381074fcd365a919dbd9ab6d6240e07b1753961f8e6fcd3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://108be415a1fe17915fa42ba5eb6cdf812b25d88b299c8dc05721241078871ebe\",\"dweb:/ipfs/Qmc8AJ6jfL3jTi597Z86hkQYEX2FaP66s1tWs9uuEyTRPn\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]},\"contracts/infra/interface/IWETH.sol\":{\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1\",\"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU\"]},\"contracts/lib/Address.sol\":{\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5\",\"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn\"]},\"contracts/lib/CurrencyTransferLib.sol\":{\"keccak256\":\"0x98c7ce207342926b3145a95c1f0781dec816ac831fc35256dd2a8787b8f161ac\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0b42e9253d38d4051a817dd3387c388daea5e99e378a7e0f07fbe98d2bf4e006\",\"dweb:/ipfs/QmQ1ZHDwYrAMtYe39HeCFSZbuvDAsVJAEozUCk3xSWLHZ1\"]},\"contracts/lib/MerkleProof.sol\":{\"keccak256\":\"0x00d989813c0653bd2f45623a73d805512c9070c7f0e8ad30838954dcf6a5acad\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://31de8046c697ed04df40a33a6b6087dedd41a85ef8c79bf7712507d5b9839732\",\"dweb:/ipfs/QmSXSeDCbLt1hwEcZyutFrNLPBbBQm1PKiE89hp5xLQ2wU\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_primarySaleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PrimarySaleRecipientUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimCondition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupplyClaimedByWallet",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "nonces",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permit"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "primarySaleRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "_condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "_resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_saleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPrimarySaleRecipient"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isOverride",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Caller should own the `_amount` of tokens.",
            "params": {
              "_amount": "The number of tokens to burn."
            }
          },
          "burnFrom(address,uint256)": {
            "details": "`_account` should own the `_amount` of tokens.",
            "params": {
              "_account": "The account to burn tokens from.",
              "_amount": "The number of tokens to burn."
            }
          },
          "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "details": "Lets an account claim tokens."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "getSupplyClaimedByWallet(address)": {
            "details": "Returns the supply claimed by claimer for active conditionId."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "nonces(address)": {
            "details": "See {IERC20Permit-nonces}."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "See {IERC20Permit-permit}."
          },
          "primarySaleRecipient()": {
            "details": "Returns primary sale recipient address."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "details": "Lets a contract admin set claim conditions."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setPrimarySaleRecipient(address)": {
            "details": "Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.",
            "params": {
              "_saleRecipient": "Address to be set as new recipient of primary sales."
            }
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": {
            "details": "Checks a request to claim NFTs against the active claim condition's criteria."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner a given amount of their tokens."
          },
          "burnFrom(address,uint256)": {
            "notice": "Lets an owner burn a given amount of an account's tokens."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setPrimarySaleRecipient(address)": {
            "notice": "Updates primary sale recipient."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "lib/sstore2/=lib/dynamic-contracts/lib/sstore2/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC20Drop.sol": "ERC20Drop"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC20Drop.sol": {
        "keccak256": "0xbd5731ec17b737919a485cf56b338e58108d8dd766dae49758cc1d424f7c9943",
        "urls": [
          "bzz-raw://db3cc08bff54001fb02a092b7b183f36ea9ab2d28cd639aec5c07941f206525f",
          "dweb:/ipfs/QmPfL6GCzhaXGoBLEpyZrSxg6Ndn7g6WoaHx2muiFrJQcz"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20.sol": {
        "keccak256": "0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1",
        "urls": [
          "bzz-raw://a08cdc1bfc92ed80fc6686fb51a018b896ee862ac9fa1a1599b3fa0198760ce8",
          "dweb:/ipfs/QmTxqXNnbht1GfzkTAKpQnpZdEADS9YXZdE8Cdr6cSJrNP"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Metadata.sol": {
        "keccak256": "0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734",
        "urls": [
          "bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65",
          "dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Permit.sol": {
        "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
        "urls": [
          "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
          "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
        ],
        "license": "MIT"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DropSinglePhase.sol": {
        "keccak256": "0xf44716630a3fd79499f1fee77324c28068f29e518edd784f548c65195029cd4f",
        "urls": [
          "bzz-raw://0c54dc4d5e409cbf6870d654b5e90e7ed4e462ab421a578c7042f85c47cd784b",
          "dweb:/ipfs/QmTMWwiYP36wEMbQRJ6m8rmLRymVJCKHhHuwxpHqnhpBVR"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
        "urls": [
          "bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
          "dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/PrimarySale.sol": {
        "keccak256": "0x18c6ef2ca61c26a6885529abf17cbb668fa8cbc21d49337dfb778b9431fc58eb",
        "urls": [
          "bzz-raw://46beec7099679394ef4e35541056cc3049570f26fb7c30ac1811096ad4a7dab8",
          "dweb:/ipfs/QmTdLQbxxvVpdJk8bgAjATKP9tW1qvSwzmdsyXv3EBZiEE"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IBurnableERC20.sol": {
        "keccak256": "0x7098224c3bdcc1ec2e384c035b2f0853232696b4fae77df25919b1c19c033272",
        "urls": [
          "bzz-raw://cc64766fb8746d8ee6a8814a3d4a7b4f0bf643bdf76b4d563f963f828ef020fe",
          "dweb:/ipfs/QmdNe4TrNDzkNBqwyehyS8H73h68bxk5PC8S9CXHfDqrw2"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDropSinglePhase.sol": {
        "keccak256": "0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36",
        "urls": [
          "bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9",
          "dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IPrimarySale.sol": {
        "keccak256": "0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004",
        "urls": [
          "bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869",
          "dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol": {
        "keccak256": "0x541806757302ea976b52d48ff7df59f50ec72c10684254e4f17c181f46fd381f",
        "urls": [
          "bzz-raw://b84a81fe700e99fc4741c535a84b008481160ec152da34d8ca49a99ea3a9396b",
          "dweb:/ipfs/Qmb3nCYyECbyFiobDHRNDop3qTYoGNt7FusxXpQNWj5dDn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol": {
        "keccak256": "0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c",
        "urls": [
          "bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a",
          "dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0xda67ad8d28cb66bbef1831a14d3506e3d0ac8c8446990a63474f4e56037f1a58",
        "urls": [
          "bzz-raw://cda94d0193ca3e3cf4ac4d561c0c668dffc3e9b2c55c5454e9b03a12fd7141fb",
          "dweb:/ipfs/Qmbaw5cPuCmqE7hy8CpM3ibFC77TMWnH4jGDcWduvdNZaA"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Counters.sol": {
        "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
        "urls": [
          "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
          "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol": {
        "keccak256": "0x2f1ee59fbdefde38381074fcd365a919dbd9ab6d6240e07b1753961f8e6fcd3b",
        "urls": [
          "bzz-raw://108be415a1fe17915fa42ba5eb6cdf812b25d88b299c8dc05721241078871ebe",
          "dweb:/ipfs/Qmc8AJ6jfL3jTi597Z86hkQYEX2FaP66s1tWs9uuEyTRPn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol": {
        "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
        "urls": [
          "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
          "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
        ],
        "license": "MIT"
      },
      "contracts/infra/interface/IWETH.sol": {
        "keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
        "urls": [
          "bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
          "dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/Address.sol": {
        "keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
        "urls": [
          "bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
          "dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/CurrencyTransferLib.sol": {
        "keccak256": "0x98c7ce207342926b3145a95c1f0781dec816ac831fc35256dd2a8787b8f161ac",
        "urls": [
          "bzz-raw://0b42e9253d38d4051a817dd3387c388daea5e99e378a7e0f07fbe98d2bf4e006",
          "dweb:/ipfs/QmQ1ZHDwYrAMtYe39HeCFSZbuvDAsVJAEozUCk3xSWLHZ1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/MerkleProof.sol": {
        "keccak256": "0x00d989813c0653bd2f45623a73d805512c9070c7f0e8ad30838954dcf6a5acad",
        "urls": [
          "bzz-raw://31de8046c697ed04df40a33a6b6087dedd41a85ef8c79bf7712507d5b9839732",
          "dweb:/ipfs/QmSXSeDCbLt1hwEcZyutFrNLPBbBQm1PKiE89hp5xLQ2wU"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/Strings.sol": {
        "keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
        "urls": [
          "bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
          "dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
        ],
        "license": "Apache-2.0"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [
          "bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
          "dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC20Drop.sol",
    "id": 2835,
    "exportedSymbols": {
      "Address": [
        64760
      ],
      "Context": [
        49279
      ],
      "ContractMetadata": [
        18093
      ],
      "Counters": [
        49353
      ],
      "CurrencyTransferLib": [
        65175
      ],
      "DropSinglePhase": [
        20064
      ],
      "ECDSA": [
        50541
      ],
      "EIP712": [
        50695
      ],
      "ERC20": [
        48051
      ],
      "ERC20Drop": [
        2834
      ],
      "ERC20Permit": [
        48293
      ],
      "IBurnableERC20": [
        32899
      ],
      "IClaimCondition": [
        32931
      ],
      "IContractMetadata": [
        33084
      ],
      "IDropSinglePhase": [
        33357
      ],
      "IERC20": [
        14015
      ],
      "IERC20Metadata": [
        14034
      ],
      "IERC20Permit": [
        14070
      ],
      "IMulticall": [
        33577
      ],
      "IOwnable": [
        33834
      ],
      "IPrimarySale": [
        33997
      ],
      "MerkleProof": [
        65274
      ],
      "Multicall": [
        21206
      ],
      "Ownable": [
        21764
      ],
      "PrimarySale": [
        22703
      ],
      "Strings": [
        66084
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:6080:6",
    "nodes": [
      {
        "id": 2498,
        "nodeType": "PragmaDirective",
        "src": "39:23:6",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 2499,
        "nodeType": "ImportDirective",
        "src": "86:78:6",
        "nodes": [],
        "absolutePath": "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol",
        "file": "../external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 48294,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2500,
        "nodeType": "ImportDirective",
        "src": "166:43:6",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 18094,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2501,
        "nodeType": "ImportDirective",
        "src": "210:36:6",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 21207,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2502,
        "nodeType": "ImportDirective",
        "src": "247:34:6",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 21765,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2503,
        "nodeType": "ImportDirective",
        "src": "282:38:6",
        "nodes": [],
        "absolutePath": "contracts/extension/PrimarySale.sol",
        "file": "../extension/PrimarySale.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 22704,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2504,
        "nodeType": "ImportDirective",
        "src": "321:42:6",
        "nodes": [],
        "absolutePath": "contracts/extension/DropSinglePhase.sol",
        "file": "../extension/DropSinglePhase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 20065,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2505,
        "nodeType": "ImportDirective",
        "src": "364:51:6",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IBurnableERC20.sol",
        "file": "../extension/interface/IBurnableERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 32900,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2507,
        "nodeType": "ImportDirective",
        "src": "417:69:6",
        "nodes": [],
        "absolutePath": "contracts/lib/CurrencyTransferLib.sol",
        "file": "../lib/CurrencyTransferLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2835,
        "sourceUnit": 65176,
        "symbolAliases": [
          {
            "foreign": {
              "id": 2506,
              "name": "CurrencyTransferLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 65175,
              "src": "426:19:6",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 2834,
        "nodeType": "ContractDefinition",
        "src": "1326:4792:6",
        "nodes": [
          {
            "id": 2546,
            "nodeType": "FunctionDefinition",
            "src": "1629:278:6",
            "nodes": [],
            "body": {
              "id": 2545,
              "nodeType": "Block",
              "src": "1805:102:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2538,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2524,
                        "src": "1827:13:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2537,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21757,
                      "src": "1815:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1815:26:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2540,
                  "nodeType": "ExpressionStatement",
                  "src": "1815:26:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2542,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2530,
                        "src": "1878:21:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2541,
                      "name": "_setupPrimarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22696,
                      "src": "1851:26:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2543,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1851:49:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2544,
                  "nodeType": "ExpressionStatement",
                  "src": "1851:49:6"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 2533,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2526,
                    "src": "1789:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 2534,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2528,
                    "src": "1796:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 2535,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 2532,
                  "name": "ERC20Permit",
                  "nameLocations": [
                    "1777:11:6"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48293,
                  "src": "1777:11:6"
                },
                "nodeType": "ModifierInvocation",
                "src": "1777:27:6"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 2531,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2524,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1658:13:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2546,
                  "src": "1650:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2523,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1650:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2526,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1695:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2546,
                  "src": "1681:19:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2525,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1681:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2528,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1724:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2546,
                  "src": "1710:21:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2527,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1710:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2530,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "1749:21:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2546,
                  "src": "1741:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2529,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1741:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1640:136:6"
            },
            "returnParameters": {
              "id": 2536,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1805:0:6"
            },
            "scope": 2834,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2569,
            "nodeType": "FunctionDefinition",
            "src": "2309:164:6",
            "nodes": [],
            "body": {
              "id": 2568,
              "nodeType": "Block",
              "src": "2357:116:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2558,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2554,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "2385:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2555,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2389:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2385:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2553,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 47562,
                            "src": "2375:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 2556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2375:21:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2557,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2549,
                          "src": "2400:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2375:32:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682062616c616e6365",
                        "id": 2559,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2409:20:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        },
                        "value": "not enough balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        }
                      ],
                      "id": 2552,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2367:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2560,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2367:63:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2561,
                  "nodeType": "ExpressionStatement",
                  "src": "2367:63:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2563,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2446:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2564,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2450:6:6",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2446:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2565,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2549,
                        "src": "2458:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2562,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47940,
                      "src": "2440:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2440:26:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2567,
                  "nodeType": "ExpressionStatement",
                  "src": "2440:26:6"
                }
              ]
            },
            "baseFunctions": [
              32890
            ],
            "documentation": {
              "id": 2547,
              "nodeType": "StructuredDocumentation",
              "src": "2092:212:6",
              "text": "  @notice          Lets an owner a given amount of their tokens.\n  @dev             Caller should own the `_amount` of tokens.\n  @param _amount   The number of tokens to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "2318:4:6",
            "parameters": {
              "id": 2550,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2549,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2331:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2569,
                  "src": "2323:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2548,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2323:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2322:17:6"
            },
            "returnParameters": {
              "id": 2551,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2357:0:6"
            },
            "scope": 2834,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 2623,
            "nodeType": "FunctionDefinition",
            "src": "2770:430:6",
            "nodes": [],
            "body": {
              "id": 2622,
              "nodeType": "Block",
              "src": "2849:351:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 2579,
                          "name": "_canBurn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2792,
                          "src": "2867:8:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 2580,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2867:10:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206275726e2e",
                        "id": 2581,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2879:25:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bfd83d10623a5529dfc6af3e2d36b3506e4ee9af9c8ff0477cf2b779ec460a88",
                          "typeString": "literal_string \"Not authorized to burn.\""
                        },
                        "value": "Not authorized to burn."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bfd83d10623a5529dfc6af3e2d36b3506e4ee9af9c8ff0477cf2b779ec460a88",
                          "typeString": "literal_string \"Not authorized to burn.\""
                        }
                      ],
                      "id": 2578,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2859:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2582,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2859:46:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2583,
                  "nodeType": "ExpressionStatement",
                  "src": "2859:46:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2589,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 2586,
                              "name": "_account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2572,
                              "src": "2933:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2585,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 47562,
                            "src": "2923:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 2587,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2923:19:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2588,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2574,
                          "src": "2946:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2923:30:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682062616c616e6365",
                        "id": 2590,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2955:20:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        },
                        "value": "not enough balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        }
                      ],
                      "id": 2584,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2915:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2915:61:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2592,
                  "nodeType": "ExpressionStatement",
                  "src": "2915:61:6"
                },
                {
                  "assignments": [
                    2594
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2594,
                      "mutability": "mutable",
                      "name": "decreasedAllowance",
                      "nameLocation": "2994:18:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 2622,
                      "src": "2986:26:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2593,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2986:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2602,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 2596,
                          "name": "_account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2572,
                          "src": "3025:8:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "id": 2597,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3035:3:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 2598,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3039:6:6",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3035:10:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 2595,
                        "name": "allowance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 47605,
                        "src": "3015:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address,address) view returns (uint256)"
                        }
                      },
                      "id": 2599,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3015:31:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 2600,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2574,
                      "src": "3049:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3015:41:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2986:70:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2604,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2572,
                        "src": "3075:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 2605,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3085:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2606,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3089:6:6",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3085:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 2607,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3097:1:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 2603,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47985,
                      "src": "3066:8:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 2608,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3066:33:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2609,
                  "nodeType": "ExpressionStatement",
                  "src": "3066:33:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2611,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2572,
                        "src": "3118:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 2612,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3128:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2613,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3132:6:6",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3128:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2614,
                        "name": "decreasedAllowance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2594,
                        "src": "3140:18:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2610,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47985,
                      "src": "3109:8:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 2615,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3109:50:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2616,
                  "nodeType": "ExpressionStatement",
                  "src": "3109:50:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2618,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2572,
                        "src": "3175:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2619,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2574,
                        "src": "3185:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2617,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47940,
                      "src": "3169:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2620,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3169:24:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2621,
                  "nodeType": "ExpressionStatement",
                  "src": "3169:24:6"
                }
              ]
            },
            "baseFunctions": [
              32898
            ],
            "documentation": {
              "id": 2570,
              "nodeType": "StructuredDocumentation",
              "src": "2479:286:6",
              "text": "  @notice          Lets an owner burn a given amount of an account's tokens.\n  @dev             `_account` should own the `_amount` of tokens.\n  @param _account  The account to burn tokens from.\n  @param _amount   The number of tokens to burn."
            },
            "functionSelector": "79cc6790",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnFrom",
            "nameLocation": "2779:8:6",
            "overrides": {
              "id": 2576,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2840:8:6"
            },
            "parameters": {
              "id": 2575,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2572,
                  "mutability": "mutable",
                  "name": "_account",
                  "nameLocation": "2796:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2623,
                  "src": "2788:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2571,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2788:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2574,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2814:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2623,
                  "src": "2806:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2573,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2806:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2787:35:6"
            },
            "returnParameters": {
              "id": 2577,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2849:0:6"
            },
            "scope": 2834,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 2719,
            "nodeType": "FunctionDefinition",
            "src": "3489:925:6",
            "nodes": [],
            "body": {
              "id": 2718,
              "nodeType": "Block",
              "src": "3683:731:6",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2638,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2636,
                      "name": "_pricePerToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2632,
                      "src": "3697:14:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2637,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3715:1:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3697:19:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2649,
                  "nodeType": "IfStatement",
                  "src": "3693:103:6",
                  "trueBody": {
                    "id": 2648,
                    "nodeType": "Block",
                    "src": "3718:78:6",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2643,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2640,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "3740:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2641,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3744:5:6",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "3740:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2642,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3753:1:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "3740:14:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "2156616c7565",
                              "id": 2644,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3756:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              },
                              "value": "!Value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              }
                            ],
                            "id": 2639,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3732:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2645,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3732:33:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2646,
                        "nodeType": "ExpressionStatement",
                        "src": "3732:33:6"
                      },
                      {
                        "functionReturnParameters": 2635,
                        "id": 2647,
                        "nodeType": "Return",
                        "src": "3779:7:6"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    2651
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2651,
                      "mutability": "mutable",
                      "name": "totalPrice",
                      "nameLocation": "3814:10:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 2718,
                      "src": "3806:18:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2650,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3806:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2658,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2657,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2654,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2652,
                            "name": "_quantityToClaim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2628,
                            "src": "3828:16:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 2653,
                            "name": "_pricePerToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2632,
                            "src": "3847:14:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3828:33:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2655,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3827:35:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 2656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3865:7:6",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      },
                      "value": "1"
                    },
                    "src": "3827:45:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3806:66:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2662,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2660,
                          "name": "totalPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2651,
                          "src": "3890:10:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2661,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3903:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3890:14:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7175616e7469747920746f6f206c6f77",
                        "id": 2663,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3906:18:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        },
                        "value": "quantity too low"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        }
                      ],
                      "id": 2659,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3882:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2664,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3882:43:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2665,
                  "nodeType": "ExpressionStatement",
                  "src": "3882:43:6"
                },
                {
                  "assignments": [
                    2667
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2667,
                      "mutability": "mutable",
                      "name": "validMsgValue",
                      "nameLocation": "3941:13:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 2718,
                      "src": "3936:18:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 2666,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3936:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2668,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3936:18:6"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2672,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2669,
                      "name": "_currency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2630,
                      "src": "3968:9:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 2670,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65175,
                        "src": "3981:19:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$65175_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 2671,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "4001:12:6",
                      "memberName": "NATIVE_TOKEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64943,
                      "src": "3981:32:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3968:45:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 2688,
                    "nodeType": "Block",
                    "src": "4085:55:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 2686,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2681,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2667,
                            "src": "4099:13:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2685,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2682,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4115:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4119:5:6",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "4115:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2684,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4128:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "4115:14:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4099:30:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2687,
                        "nodeType": "ExpressionStatement",
                        "src": "4099:30:6"
                      }
                    ]
                  },
                  "id": 2689,
                  "nodeType": "IfStatement",
                  "src": "3964:176:6",
                  "trueBody": {
                    "id": 2680,
                    "nodeType": "Block",
                    "src": "4015:64:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 2678,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2673,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2667,
                            "src": "4029:13:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2677,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2674,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4045:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2675,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4049:5:6",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "4045:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 2676,
                              "name": "totalPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2651,
                              "src": "4058:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4045:23:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4029:39:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2679,
                        "nodeType": "ExpressionStatement",
                        "src": "4029:39:6"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2691,
                        "name": "validMsgValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2667,
                        "src": "4157:13:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c6964206d73672076616c7565",
                        "id": 2692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4172:19:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        },
                        "value": "Invalid msg value"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        }
                      ],
                      "id": 2690,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4149:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2693,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4149:43:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2694,
                  "nodeType": "ExpressionStatement",
                  "src": "4149:43:6"
                },
                {
                  "assignments": [
                    2696
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2696,
                      "mutability": "mutable",
                      "name": "saleRecipient",
                      "nameLocation": "4211:13:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 2718,
                      "src": "4203:21:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2695,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4203:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2707,
                  "initialValue": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 2702,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2697,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2626,
                        "src": "4227:21:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 2700,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4260:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 2699,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4252:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 2698,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4252:7:6",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2701,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4252:10:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "4227:35:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 2705,
                      "name": "_primarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2626,
                      "src": "4290:21:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 2706,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "4227:84:6",
                    "trueExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2703,
                        "name": "primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22648,
                        "src": "4265:20:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2704,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4265:22:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4203:108:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2711,
                        "name": "_currency",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2630,
                        "src": "4358:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 2712,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4369:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2713,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4373:6:6",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4369:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2714,
                        "name": "saleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2696,
                        "src": "4381:13:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2715,
                        "name": "totalPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2651,
                        "src": "4396:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 2708,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65175,
                        "src": "4321:19:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$65175_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 2710,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4341:16:6",
                      "memberName": "transferCurrency",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64980,
                      "src": "4321:36:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256)"
                      }
                    },
                    "id": 2716,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4321:86:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2717,
                  "nodeType": "ExpressionStatement",
                  "src": "4321:86:6"
                }
              ]
            },
            "baseFunctions": [
              20048
            ],
            "documentation": {
              "id": 2624,
              "nodeType": "StructuredDocumentation",
              "src": "3403:81:6",
              "text": "@dev Collects and distributes the primary sale value of tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_collectPriceOnClaim",
            "nameLocation": "3498:20:6",
            "overrides": {
              "id": 2634,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3674:8:6"
            },
            "parameters": {
              "id": 2633,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2626,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "3536:21:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2719,
                  "src": "3528:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2625,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3528:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2628,
                  "mutability": "mutable",
                  "name": "_quantityToClaim",
                  "nameLocation": "3575:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2719,
                  "src": "3567:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2627,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3567:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2630,
                  "mutability": "mutable",
                  "name": "_currency",
                  "nameLocation": "3609:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2719,
                  "src": "3601:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2629,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3601:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2632,
                  "mutability": "mutable",
                  "name": "_pricePerToken",
                  "nameLocation": "3636:14:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2719,
                  "src": "3628:22:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2631,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3628:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3518:138:6"
            },
            "returnParameters": {
              "id": 2635,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3683:0:6"
            },
            "scope": 2834,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2738,
            "nodeType": "FunctionDefinition",
            "src": "4469:210:6",
            "nodes": [],
            "body": {
              "id": 2737,
              "nodeType": "Block",
              "src": "4611:68:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2731,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2722,
                        "src": "4627:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2732,
                        "name": "_quantityBeingClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2724,
                        "src": "4632:21:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2730,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47868,
                      "src": "4621:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2733,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4621:33:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2734,
                  "nodeType": "ExpressionStatement",
                  "src": "4621:33:6"
                },
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 2735,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4671:1:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 2729,
                  "id": 2736,
                  "nodeType": "Return",
                  "src": "4664:8:6"
                }
              ]
            },
            "baseFunctions": [
              20058
            ],
            "documentation": {
              "id": 2720,
              "nodeType": "StructuredDocumentation",
              "src": "4420:44:6",
              "text": "@dev Transfers the tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "4478:22:6",
            "overrides": {
              "id": 2726,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4584:8:6"
            },
            "parameters": {
              "id": 2725,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2722,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "4518:3:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2738,
                  "src": "4510:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2721,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4510:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2724,
                  "mutability": "mutable",
                  "name": "_quantityBeingClaimed",
                  "nameLocation": "4539:21:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 2738,
                  "src": "4531:29:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2723,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4531:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4500:66:6"
            },
            "returnParameters": {
              "id": 2729,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2728,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2738,
                  "src": "4602:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2727,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4602:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4601:9:6"
            },
            "scope": 2834,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2752,
            "nodeType": "FunctionDefinition",
            "src": "4774:125:6",
            "nodes": [],
            "body": {
              "id": 2751,
              "nodeType": "Block",
              "src": "4854:45:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2749,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2745,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4871:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2746,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4875:6:6",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4871:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2747,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4885:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2748,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4885:7:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4871:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2744,
                  "id": 2750,
                  "nodeType": "Return",
                  "src": "4864:28:6"
                }
              ]
            },
            "baseFunctions": [
              20063
            ],
            "documentation": {
              "id": 2739,
              "nodeType": "StructuredDocumentation",
              "src": "4685:84:6",
              "text": "@dev Checks whether platform fee info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetClaimConditions",
            "nameLocation": "4783:22:6",
            "overrides": {
              "id": 2741,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4830:8:6"
            },
            "parameters": {
              "id": 2740,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4805:2:6"
            },
            "returnParameters": {
              "id": 2744,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2743,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2752,
                  "src": "4848:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2742,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4848:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4847:6:6"
            },
            "scope": 2834,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2766,
            "nodeType": "FunctionDefinition",
            "src": "4995:121:6",
            "nodes": [],
            "body": {
              "id": 2765,
              "nodeType": "Block",
              "src": "5071:45:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2763,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2759,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "5088:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2760,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5092:6:6",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "5088:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2761,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "5102:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2762,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5102:7:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5088:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2758,
                  "id": 2764,
                  "nodeType": "Return",
                  "src": "5081:28:6"
                }
              ]
            },
            "baseFunctions": [
              18092
            ],
            "documentation": {
              "id": 2753,
              "nodeType": "StructuredDocumentation",
              "src": "4905:85:6",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "5004:18:6",
            "overrides": {
              "id": 2755,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5047:8:6"
            },
            "parameters": {
              "id": 2754,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5022:2:6"
            },
            "returnParameters": {
              "id": 2758,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2757,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2766,
                  "src": "5065:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2756,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5065:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5064:6:6"
            },
            "scope": 2834,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2779,
            "nodeType": "FunctionDefinition",
            "src": "5204:102:6",
            "nodes": [],
            "body": {
              "id": 2778,
              "nodeType": "Block",
              "src": "5261:45:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2776,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2772,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "5278:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2773,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5282:6:6",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "5278:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2774,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "5292:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2775,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5292:7:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5278:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2771,
                  "id": 2777,
                  "nodeType": "Return",
                  "src": "5271:28:6"
                }
              ]
            },
            "documentation": {
              "id": 2767,
              "nodeType": "StructuredDocumentation",
              "src": "5122:77:6",
              "text": "@dev Returns whether tokens can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "5213:8:6",
            "parameters": {
              "id": 2768,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5221:2:6"
            },
            "returnParameters": {
              "id": 2771,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2770,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2779,
                  "src": "5255:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2769,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5255:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5254:6:6"
            },
            "scope": 2834,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2792,
            "nodeType": "FunctionDefinition",
            "src": "5394:102:6",
            "nodes": [],
            "body": {
              "id": 2791,
              "nodeType": "Block",
              "src": "5451:45:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2785,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "5468:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2786,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5472:6:6",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "5468:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2787,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "5482:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2788,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5482:7:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5468:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2784,
                  "id": 2790,
                  "nodeType": "Return",
                  "src": "5461:28:6"
                }
              ]
            },
            "documentation": {
              "id": 2780,
              "nodeType": "StructuredDocumentation",
              "src": "5312:77:6",
              "text": "@dev Returns whether tokens can be burned in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canBurn",
            "nameLocation": "5403:8:6",
            "parameters": {
              "id": 2781,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5411:2:6"
            },
            "returnParameters": {
              "id": 2784,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2783,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2792,
                  "src": "5445:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2782,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5445:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5444:6:6"
            },
            "scope": 2834,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2806,
            "nodeType": "FunctionDefinition",
            "src": "5580:115:6",
            "nodes": [],
            "body": {
              "id": 2805,
              "nodeType": "Block",
              "src": "5650:45:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2803,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2799,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "5667:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2800,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5671:6:6",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "5667:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2801,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "5681:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2802,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5681:7:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5667:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2798,
                  "id": 2804,
                  "nodeType": "Return",
                  "src": "5660:28:6"
                }
              ]
            },
            "baseFunctions": [
              21763
            ],
            "documentation": {
              "id": 2793,
              "nodeType": "StructuredDocumentation",
              "src": "5502:73:6",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "5589:12:6",
            "overrides": {
              "id": 2795,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5626:8:6"
            },
            "parameters": {
              "id": 2794,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5601:2:6"
            },
            "returnParameters": {
              "id": 2798,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2797,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2806,
                  "src": "5644:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2796,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5644:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5643:6:6"
            },
            "scope": 2834,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2820,
            "nodeType": "FunctionDefinition",
            "src": "5796:130:6",
            "nodes": [],
            "body": {
              "id": 2819,
              "nodeType": "Block",
              "src": "5881:45:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2817,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2813,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "5898:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2814,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5902:6:6",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "5898:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2815,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "5912:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2816,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5912:7:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5898:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2812,
                  "id": 2818,
                  "nodeType": "Return",
                  "src": "5891:28:6"
                }
              ]
            },
            "baseFunctions": [
              22702
            ],
            "documentation": {
              "id": 2807,
              "nodeType": "StructuredDocumentation",
              "src": "5701:90:6",
              "text": "@dev Returns whether primary sale recipient can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetPrimarySaleRecipient",
            "nameLocation": "5805:27:6",
            "overrides": {
              "id": 2809,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5857:8:6"
            },
            "parameters": {
              "id": 2808,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5832:2:6"
            },
            "returnParameters": {
              "id": 2812,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2811,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2820,
                  "src": "5875:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2810,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5875:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5874:6:6"
            },
            "scope": 2834,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2833,
            "nodeType": "FunctionDefinition",
            "src": "5999:117:6",
            "nodes": [],
            "body": {
              "id": 2832,
              "nodeType": "Block",
              "src": "6082:34:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 2829,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "6099:3:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 2830,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "6103:6:6",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "6099:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 2828,
                  "id": 2831,
                  "nodeType": "Return",
                  "src": "6092:17:6"
                }
              ]
            },
            "baseFunctions": [
              21205,
              49269
            ],
            "documentation": {
              "id": 2821,
              "nodeType": "StructuredDocumentation",
              "src": "5932:62:6",
              "text": "@notice Returns the sender in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "6008:10:6",
            "overrides": {
              "id": 2825,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 2823,
                  "name": "Multicall",
                  "nameLocations": [
                    "6044:9:6"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21206,
                  "src": "6044:9:6"
                },
                {
                  "id": 2824,
                  "name": "Context",
                  "nameLocations": [
                    "6055:7:6"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 49279,
                  "src": "6055:7:6"
                }
              ],
              "src": "6035:28:6"
            },
            "parameters": {
              "id": 2822,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6018:2:6"
            },
            "returnParameters": {
              "id": 2828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2827,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2833,
                  "src": "6073:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2826,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6073:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6072:9:6"
            },
            "scope": 2834,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2509,
              "name": "ContractMetadata",
              "nameLocations": [
                "1348:16:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18093,
              "src": "1348:16:6"
            },
            "id": 2510,
            "nodeType": "InheritanceSpecifier",
            "src": "1348:16:6"
          },
          {
            "baseName": {
              "id": 2511,
              "name": "Multicall",
              "nameLocations": [
                "1366:9:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21206,
              "src": "1366:9:6"
            },
            "id": 2512,
            "nodeType": "InheritanceSpecifier",
            "src": "1366:9:6"
          },
          {
            "baseName": {
              "id": 2513,
              "name": "Ownable",
              "nameLocations": [
                "1377:7:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21764,
              "src": "1377:7:6"
            },
            "id": 2514,
            "nodeType": "InheritanceSpecifier",
            "src": "1377:7:6"
          },
          {
            "baseName": {
              "id": 2515,
              "name": "ERC20Permit",
              "nameLocations": [
                "1386:11:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48293,
              "src": "1386:11:6"
            },
            "id": 2516,
            "nodeType": "InheritanceSpecifier",
            "src": "1386:11:6"
          },
          {
            "baseName": {
              "id": 2517,
              "name": "PrimarySale",
              "nameLocations": [
                "1399:11:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22703,
              "src": "1399:11:6"
            },
            "id": 2518,
            "nodeType": "InheritanceSpecifier",
            "src": "1399:11:6"
          },
          {
            "baseName": {
              "id": 2519,
              "name": "DropSinglePhase",
              "nameLocations": [
                "1412:15:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20064,
              "src": "1412:15:6"
            },
            "id": 2520,
            "nodeType": "InheritanceSpecifier",
            "src": "1412:15:6"
          },
          {
            "baseName": {
              "id": 2521,
              "name": "IBurnableERC20",
              "nameLocations": [
                "1429:14:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32899,
              "src": "1429:14:6"
            },
            "id": 2522,
            "nodeType": "InheritanceSpecifier",
            "src": "1429:14:6"
          }
        ],
        "canonicalName": "ERC20Drop",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2508,
          "nodeType": "StructuredDocumentation",
          "src": "488:836:6",
          "text": "      BASE:      ERC20\n      EXTENSION: DropSinglePhase\n  The `ERC20Drop` smart contract implements the ERC20 standard.\n  It includes the following additions to standard ERC20 logic:\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\n                             presenting a message signed by the account.\n  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism for tokens. It lets\n  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          2834,
          32899,
          20064,
          33357,
          32931,
          22703,
          33997,
          48293,
          14070,
          48051,
          14034,
          14015,
          49279,
          21764,
          33834,
          21206,
          33577,
          18093,
          33084
        ],
        "name": "ERC20Drop",
        "nameLocation": "1335:9:6",
        "scope": 2835,
        "usedErrors": [],
        "usedEvents": [
          14006,
          14014,
          33083,
          33322,
          33330,
          33833,
          33996
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 6
}