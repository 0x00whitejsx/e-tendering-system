{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_primarySaleRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "condition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimarySaleRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCondition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaimableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantityLimitPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "getSupplyClaimedByWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primarySaleRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "_condition",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_saleRecipient",
          "type": "address"
        }
      ],
      "name": "setPrimarySaleRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOverride",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b5060405162003f1b38038062003f1b8339810160408190526200005991620003b6565b8282818160056200006b8382620004d7565b5060066200007a8282620004d7565b50504660a052503060c0526200008f620000b5565b60805250620000a09050846200014c565b620000ab816200019e565b50505050620005a3565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000e262000237565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6001600160a01b038116620001ed5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b604482015260640160405180910390fd5b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b606060058054620002489062000446565b80601f0160208091040260200160405190810160405280929190818152602001828054620002769062000446565b8015620002c75780601f106200029b57610100808354040283529160200191620002c7565b820191906000526020600020905b815481529060010190602001808311620002a957829003601f168201915b5050505050905090565b80516001600160a01b0381168114620002e957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200031657600080fd5b81516001600160401b0380821115620003335762000333620002ee565b604051601f8301601f19908116603f011681019082821181831017156200035e576200035e620002ee565b81604052838152602092508660208588010111156200037c57600080fd5b600091505b83821015620003a0578582018301518183018401529082019062000381565b6000602085830101528094505050505092915050565b60008060008060808587031215620003cd57600080fd5b620003d885620002d1565b60208601519094506001600160401b0380821115620003f657600080fd5b620004048883890162000304565b945060408701519150808211156200041b57600080fd5b506200042a8782880162000304565b9250506200043b60608601620002d1565b905092959194509250565b600181811c908216806200045b57607f821691505b6020821081036200047c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004d2576000816000526020600020601f850160051c81016020861015620004ad5750805b601f850160051c820191505b81811015620004ce57828155600101620004b9565b5050505b505050565b81516001600160401b03811115620004f357620004f3620002ee565b6200050b8162000504845462000446565b8462000482565b602080601f8311600181146200054357600084156200052a5750858301515b600019600386901b1c1916600185901b178555620004ce565b600085815260208120601f198616915b82811015620005745788860151825594840194600190910190840162000553565b5085821015620005935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161393e620005dd600039600061113901526000610795015260006107bf015260006107e9015261393e6000f3fe6080604052600436106101a45760003560e01c806370a08231116100e857806370a082311461041c5780637ecebe001461043c57806384bb1e421461045c5780638da5cb5b1461046f5780638e539e8c14610484578063938e3d7b146104a457806395d89b41146104c45780639ab24eb0146104d9578063a457c2d7146104f9578063a9059cbb14610519578063ac9650d814610539578063c3cda52014610566578063d505accf14610586578063d637ed59146105a6578063dd62ed3e146105cf578063e8a3d485146105ef578063eec8897c14610604578063f1127ed81461062457600080fd5b806306fdde03146101a9578063079fe40e146101d4578063095ea7b31461020157806313af40351461023157806318160ddd1461025357806323b872dd14610272578063313ce5671461029257806335b65e1f146102ae5780633644e515146102f257806339509351146103075780633a46b1a814610327578063426cfaf31461034757806342966c6814610367578063587cde1e146103875780635c19a95c146103a75780636f4f2837146103c75780636fcfff45146103e7575b600080fd5b3480156101b557600080fd5b506101be61066e565b6040516101cb9190612edc565b60405180910390f35b3480156101e057600080fd5b506101e9610700565b6040516001600160a01b0390911681526020016101cb565b34801561020d57600080fd5b5061022161021c366004612f0b565b61070f565b60405190151581526020016101cb565b34801561023d57600080fd5b5061025161024c366004612f35565b610729565b005b34801561025f57600080fd5b506004545b6040519081526020016101cb565b34801561027e57600080fd5b5061022161028d366004612f50565b610762565b34801561029e57600080fd5b50604051601281526020016101cb565b3480156102ba57600080fd5b506102646102c9366004612f35565b60145460009081526015602090815260408083206001600160a01b039094168352929052205490565b3480156102fe57600080fd5b50610264610788565b34801561031357600080fd5b50610221610322366004612f0b565b610818565b34801561033357600080fd5b50610264610342366004612f0b565b610857565b34801561035357600080fd5b50610251610362366004612f9a565b61089a565b34801561037357600080fd5b50610251610382366004612ff1565b610aa6565b34801561039357600080fd5b506101e96103a2366004612f35565b610afd565b3480156103b357600080fd5b506102516103c2366004612f35565b610b1b565b3480156103d357600080fd5b506102516103e2366004612f35565b610b25565b3480156103f357600080fd5b50610407610402366004612f35565b610b52565b60405163ffffffff90911681526020016101cb565b34801561042857600080fd5b50610264610437366004612f35565b610b74565b34801561044857600080fd5b50610264610457366004612f35565b610b8f565b61025161046a3660046130a7565b610bad565b34801561047b57600080fd5b506101e9610c7a565b34801561049057600080fd5b5061026461049f366004612ff1565b610c89565b3480156104b057600080fd5b506102516104bf366004613151565b610cb5565b3480156104d057600080fd5b506101be610ce2565b3480156104e557600080fd5b506102646104f4366004612f35565b610cf1565b34801561050557600080fd5b50610221610514366004612f0b565b610d77565b34801561052557600080fd5b50610221610534366004612f0b565b610e14565b34801561054557600080fd5b50610559610554366004613199565b610e22565b6040516101cb919061320d565b34801561057257600080fd5b50610251610581366004613282565b610f87565b34801561059257600080fd5b506102516105a13660046132da565b6110e5565b3480156105b257600080fd5b506105bb61124b565b6040516101cb989796959493929190613344565b3480156105db57600080fd5b506102646105ea366004613399565b61130a565b3480156105fb57600080fd5b506101be611335565b34801561061057600080fd5b5061022161061f3660046133cc565b6113c3565b34801561063057600080fd5b5061064461063f36600461343d565b611770565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101cb565b60606005805461067d90613472565b80601f01602080910402602001604051908101604052809291908181526020018280546106a990613472565b80156106f65780601f106106cb576101008083540402835291602001916106f6565b820191906000526020600020905b8154815290600101906020018083116106d957829003601f168201915b5050505050905090565b600b546001600160a01b031690565b60003361071d8185856117f3565b60019150505b92915050565b610731611917565b6107565760405162461bcd60e51b815260040161074d906134a6565b60405180910390fd5b61075f8161193a565b50565b60003361077085828561198c565b61077b858585611a06565b60019150505b9392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156107e157507f000000000000000000000000000000000000000000000000000000000000000046145b1561080b57507f000000000000000000000000000000000000000000000000000000000000000090565b610813611bc8565b905090565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061071d90829086906108529087906134e4565b6117f3565b60004382106108785760405162461bcd60e51b815260040161074d906134f7565b6001600160a01b03831660009081526009602052604090206107819083611c5d565b6108a2611917565b6108be5760405162461bcd60e51b815260040161074d906134a6565b601454600e548215610908575060003360405160609190911b6001600160601b03191660208201524360348201526054016040516020818303038152906040528051906020012091505b83602001358111156109515760405162461bcd60e51b81526020600482015260126024820152711b585e081cdd5c1c1b1e4818db185a5b595960721b604482015260640161074d565b604051806101000160405280856000013581526020018560200135815260200182815260200185606001358152602001856080013581526020018560a0013581526020018560c00160208101906109a89190612f35565b6001600160a01b031681526020016109c360e087018761352e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152508051600c9081556020820151600d556040820151600e556060820151600f55608082015160105560a082015160115560c0820151601280546001600160a01b0319166001600160a01b0390921691909117905560e0820151601390610a5e90826135c3565b50505060148290556040517f6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b890610a9890869086906136ab565b60405180910390a150505050565b80610ab033610b74565b1015610af35760405162461bcd60e51b81526020600482015260126024820152716e6f7420656e6f7567682062616c616e636560701b604482015260640161074d565b61075f3382611d19565b6001600160a01b039081166000908152600860205260409020541690565b61075f3382611d31565b610b2d611917565b610b495760405162461bcd60e51b815260040161074d906134a6565b61075f81611db1565b6001600160a01b03811660009081526009602052604081205461072390611e45565b6001600160a01b031660009081526002602052604090205490565b6001600160a01b038116600090815260076020526040812054610723565b601454610bbd33878787876113c3565b5085600c6002016000828254610bd391906134e4565b9091555050600081815260156020908152604080832033845290915281208054889290610c019084906134e4565b90915550610c1490506000878787611eb6565b6000610c208888612009565b9050806001600160a01b038916336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de68a604051610c6891815260200190565b60405180910390a45050505050505050565b6001546001600160a01b031690565b6000438210610caa5760405162461bcd60e51b815260040161074d906134f7565b610723600a83611c5d565b610cbd611917565b610cd95760405162461bcd60e51b815260040161074d906134a6565b61075f8161201e565b60606006805461067d90613472565b6001600160a01b0381166000908152600960205260408120548015610d64576001600160a01b0383166000908152600960205260409020610d33600183613778565b81548110610d4357610d4361378b565b600091825260209091200154600160201b90046001600160e01b0316610d67565b60005b6001600160e01b03169392505050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919083811015610dfc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161074d565b610e0982868684036117f3565b506001949350505050565b60003361071d818585611a06565b6060816001600160401b03811115610e3c57610e3c61301c565b604051908082528060200260200182016040528015610e6f57816020015b6060815260200190600190039081610e5a5790505b509050336000805b84811015610f7e578115610ef657610ed430878784818110610e9b57610e9b61378b565b9050602002810190610ead919061352e565b86604051602001610ec0939291906137a1565b6040516020818303038152906040526120f9565b848281518110610ee657610ee661378b565b6020026020010181905250610f76565b610f5830878784818110610f0c57610f0c61378b565b9050602002810190610f1e919061352e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120f992505050565b848281518110610f6a57610f6a61378b565b60200260200101819052505b600101610e77565b50505092915050565b83421115610fd75760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161074d565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b03881691810191909152606081018690526080810185905260009060a001604051602081830303815290604052805190602001209050600061106b61104b610788565b8360405161190160f01b8152600281019290925260228201526042902090565b9050600061107b8287878761211e565b905061108681612148565b88146110d05760405162461bcd60e51b81526020600482015260196024820152784552433230566f7465733a20696e76616c6964206e6f6e636560381b604482015260640161074d565b6110da818a611d31565b505050505050505050565b834211156111355760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161074d565b60007f00000000000000000000000000000000000000000000000000000000000000008888886111648c612148565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006111c161104b610788565b905060006111d18287878761211e565b9050896001600160a01b0316816001600160a01b0316146112345760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161074d565b61123f8a8a8a6117f3565b50505050505050505050565b600c8054600d54600e54600f54601054601154601254601380549798969795969495939492936001600160a01b03909216929161128790613472565b80601f01602080910402602001604051908101604052809291908181526020018280546112b390613472565b80156113005780601f106112d557610100808354040283529160200191611300565b820191906000526020600020905b8154815290600101906020018083116112e357829003601f168201915b5050505050905088565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6000805461134290613472565b80601f016020809104026020016040519081016040528092919081815260200182805461136e90613472565b80156113bb5780601f10611390576101008083540402835291602001916113bb565b820191906000526020600020905b81548152906001019060200180831161139e57829003601f168201915b505050505081565b6040805161010081018252600c80548252600d546020830152600e5492820192909252600f546060820152601054608082015260115460a08201526012546001600160a01b031660c082015260138054600093849392909160e08401919061142a90613472565b80601f016020809104026020016040519081016040528092919081815260200182805461145690613472565b80156114a35780601f10611478576101008083540402835291602001916114a3565b820191906000526020600020905b81548152906001019060200180831161148657829003601f168201915b50505091909252505050606081015160a082015160c083015160808401519394509192909190156115835761157f6114db87806137c2565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505060808088015191508d9060208b01359060408c013590611530908d0160608e01612f35565b6040516001600160601b0319606095861b811660208301526034820194909452605481019290925290921b16607482015260880160405160208183030381529060405280519060200120612170565b5094505b841561160a57856020013560000361159b57826115a1565b85602001355b92506000198660400135036115b657816115bc565b85604001355b91506000198660400135141580156115ed575060006115e16080880160608901612f35565b6001600160a01b031614155b6115f75780611607565b6116076080870160608801612f35565b90505b60145460009081526015602090815260408083206001600160a01b03808f168552925290912054908981169083161415806116455750828814155b156116855760405162461bcd60e51b815260206004820152601060248201526f2150726963654f7243757272656e637960801b604482015260640161074d565b89158061169a575083611698828c6134e4565b115b156116d05760405162461bcd60e51b815260040161074d906020808252600490820152632151747960e01b604082015260600190565b84602001518a86604001516116e591906134e4565b11156117205760405162461bcd60e51b815260206004820152600a602482015269214d6178537570706c7960b01b604482015260640161074d565b84514210156117625760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b604482015260640161074d565b505050505095945050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600960205260409020805463ffffffff84169081106117b4576117b461378b565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091529392505050565b6001600160a01b0383166118555760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161074d565b6001600160a01b0382166118b65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161074d565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611921610c7a565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6000611998848461130a565b90506000198114611a0057818110156119f35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161074d565b611a0084848484036117f3565b50505050565b6001600160a01b038316611a6a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161074d565b6001600160a01b038216611acc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161074d565b6001600160a01b03831660009081526002602052604090205481811015611b445760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161074d565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290611b7b9084906134e4565b92505081905550826001600160a01b0316846001600160a01b03166000805160206138e983398151915284604051611bb591815260200190565b60405180910390a3611a00848484612239565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611bf361066e565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8154600090815b81811015611cc1576000611c788284612254565b905084868281548110611c8d57611c8d61378b565b60009182526020909120015463ffffffff161115611cad57809250611cbb565b611cb88160016134e4565b91505b50611c64565b8115611d045784611cd3600184613778565b81548110611ce357611ce361378b565b600091825260209091200154600160201b90046001600160e01b0316611d07565b60005b6001600160e01b031695945050505050565b611d23828261226f565b611a00600a6123b2836123be565b6000611d3c83610afd565b90506000611d4984610b74565b6001600160a01b0385811660008181526008602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611a00828483612535565b6001600160a01b038116611dfb5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b604482015260640161074d565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b600063ffffffff821115611eaa5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161074d565b5090565b505050505050565b80600003611efa573415611ef55760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b604482015260640161074d565b611a00565b6000670de0b6b3a7640000611f0f838661380b565b611f199190613822565b905060008111611f5e5760405162461bcd60e51b815260206004820152601060248201526f7175616e7469747920746f6f206c6f7760801b604482015260640161074d565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611f8e5750348114611f92565b5034155b80611fd35760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206d73672076616c756560781b604482015260640161074d565b60006001600160a01b03871615611fea5786611ff2565b611ff2610700565b905061200085338386612672565b50505050505050565b600061201583836126b3565b50600092915050565b600080805461202c90613472565b80601f016020809104026020016040519081016040528092919081815260200182805461205890613472565b80156120a55780601f1061207a576101008083540402835291602001916120a5565b820191906000526020600020905b81548152906001019060200180831161208857829003601f168201915b5050505050905081600090816120bb91906135c3565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516120ed929190613844565b60405180910390a15050565b606061078183836040518060600160405280602781526020016138c26027913961273d565b600080600061212f878787876127b5565b9150915061213c8161286f565b5090505b949350505050565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6000808281805b87518110156122285761218b60028361380b565b915060008882815181106121a1576121a161378b565b602002602001015190508084116121e357604080516020810186905290810182905260600160405160208183030381529060405280519060200120935061221f565b604080516020810183905290810185905260600160405160208183030381529060405280519060200120935060018361221c91906134e4565b92505b50600101612177565b50941495939450505050565b505050565b61223461224584610afd565b61224e84610afd565b83612535565b60006122636002848418613822565b610781908484166134e4565b6001600160a01b0382166122cf5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161074d565b6001600160a01b038216600090815260026020526040902054818110156123435760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161074d565b6001600160a01b0383166000908152600260205260408120838303905560048054849290612372908490613778565b90915550506040518281526000906001600160a01b038516906000805160206138e98339815191529060200160405180910390a361223483600084612239565b60006107818284613778565b82546000908190801561240857856123d7600183613778565b815481106123e7576123e761378b565b600091825260209091200154600160201b90046001600160e01b031661240b565b60005b6001600160e01b0316925061242483858763ffffffff16565b91506000811180156124625750438661243e600184613778565b8154811061244e5761244e61378b565b60009182526020909120015463ffffffff16145b156124c257612470826129b4565b8661247c600184613778565b8154811061248c5761248c61378b565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b0316021790555061252c565b8560405180604001604052806124d743611e45565b63ffffffff1681526020016124eb856129b4565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b50935093915050565b816001600160a01b0316836001600160a01b0316141580156125575750600081115b15612234576001600160a01b038316156125e5576001600160a01b03831660009081526009602052604081208190612592906123b2856123be565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516125da929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615612234576001600160a01b0382166000908152600960205260408120819061261b90612a1d856123be565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612663929190918252602082015260400190565b60405180910390a25050505050565b8015611a005773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038516016126a757611ef58282612a29565b611a0084848484612acb565b6126bd8282612b1e565b6004546001600160e01b03101561272f5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161074d565b611a00600a612a1d836123be565b6060600080856001600160a01b03168560405161275a9190613872565b600060405180830381855af49150503d8060008114612795576040519150601f19603f3d011682016040523d82523d6000602084013e61279a565b606091505b50915091506127ab86838387612bf7565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156127e25750600090506003612866565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612836573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661285f57600060019250925050612866565b9150600090505b94509492505050565b60008160048111156128835761288361388e565b0361288b5750565b600181600481111561289f5761289f61388e565b036128e75760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015260640161074d565b60028160048111156128fb576128fb61388e565b036129485760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161074d565b600381600481111561295c5761295c61388e565b0361075f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161074d565b60006001600160e01b03821115611eaa5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161074d565b600061078182846134e4565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612a76576040519150601f19603f3d011682016040523d82523d6000602084013e612a7b565b606091505b50509050806122345760405162461bcd60e51b815260206004820152601c60248201527b1b985d1a5d99481d1bdad95b881d1c985b9cd9995c8819985a5b195960221b604482015260640161074d565b816001600160a01b0316836001600160a01b03160315611a0057306001600160a01b03841603612b0957611ef56001600160a01b0385168383612c70565b611a006001600160a01b038516848484612cd3565b6001600160a01b038216612b745760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161074d565b8060046000828254612b8691906134e4565b90915550506001600160a01b03821660009081526002602052604081208054839290612bb39084906134e4565b90915550506040518181526001600160a01b038316906000906000805160206138e98339815191529060200160405180910390a3612bf360008383612239565b5050565b60608315612c66578251600003612c5f576001600160a01b0385163b612c5f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161074d565b5081612140565b6121408383612d0b565b6040516001600160a01b03831660248201526044810182905261223490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d35565b6040516001600160a01b0380851660248301528316604482015260648101829052611a009085906323b872dd60e01b90608401612c9c565b815115612d1b5781518083602001fd5b8060405162461bcd60e51b815260040161074d9190612edc565b6000612d8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e079092919063ffffffff16565b8051909150156122345780806020019051810190612da891906138a4565b6122345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161074d565b6060612140848460008585600080866001600160a01b03168587604051612e2e9190613872565b60006040518083038185875af1925050503d8060008114612e6b576040519150601f19603f3d011682016040523d82523d6000602084013e612e70565b606091505b5091509150612e8187838387612bf7565b979650505050505050565b60005b83811015612ea7578181015183820152602001612e8f565b50506000910152565b60008151808452612ec8816020860160208601612e8c565b601f01601f19169290920160200192915050565b6020815260006107816020830184612eb0565b80356001600160a01b0381168114612f0657600080fd5b919050565b60008060408385031215612f1e57600080fd5b612f2783612eef565b946020939093013593505050565b600060208284031215612f4757600080fd5b61078182612eef565b600080600060608486031215612f6557600080fd5b612f6e84612eef565b9250612f7c60208501612eef565b9150604084013590509250925092565b801515811461075f57600080fd5b60008060408385031215612fad57600080fd5b82356001600160401b03811115612fc357600080fd5b83016101008186031215612fd657600080fd5b91506020830135612fe681612f8c565b809150509250929050565b60006020828403121561300357600080fd5b5035919050565b60006080828403121561216a57600080fd5b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561304c5761304c61301c565b604051601f8501601f19908116603f011681019082821181831017156130745761307461301c565b8160405280935085815286868601111561308d57600080fd5b858560208301376000602087830101525050509392505050565b60008060008060008060c087890312156130c057600080fd5b6130c987612eef565b9550602087013594506130de60408801612eef565b93506060870135925060808701356001600160401b038082111561310157600080fd5b61310d8a838b0161300a565b935060a089013591508082111561312357600080fd5b508701601f8101891361313557600080fd5b61314489823560208401613032565b9150509295509295509295565b60006020828403121561316357600080fd5b81356001600160401b0381111561317957600080fd5b8201601f8101841361318a57600080fd5b61214084823560208401613032565b600080602083850312156131ac57600080fd5b82356001600160401b03808211156131c357600080fd5b818501915085601f8301126131d757600080fd5b8135818111156131e657600080fd5b8660208260051b85010111156131fb57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561326457603f19888603018452613252858351612eb0565b94509285019290850190600101613236565b5092979650505050505050565b803560ff81168114612f0657600080fd5b60008060008060008060c0878903121561329b57600080fd5b6132a487612eef565b955060208701359450604087013593506132c060608801613271565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a0312156132f557600080fd5b6132fe88612eef565b965061330c60208901612eef565b9550604088013594506060880135935061332860808901613271565b925060a0880135915060c0880135905092959891949750929550565b60006101008a83528960208401528860408401528760608401528660808401528560a084015260018060a01b03851660c08401528060e084015261338a81840185612eb0565b9b9a5050505050505050505050565b600080604083850312156133ac57600080fd5b6133b583612eef565b91506133c360208401612eef565b90509250929050565b600080600080600060a086880312156133e457600080fd5b6133ed86612eef565b94506020860135935061340260408701612eef565b92506060860135915060808601356001600160401b0381111561342457600080fd5b6134308882890161300a565b9150509295509295909350565b6000806040838503121561345057600080fd5b61345983612eef565b9150602083013563ffffffff81168114612fe657600080fd5b600181811c9082168061348657607f821691505b60208210810361216a57634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610723576107236134ce565b6020808252601f908201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604082015260600190565b6000808335601e1984360301811261354557600080fd5b8301803591506001600160401b0382111561355f57600080fd5b60200191503681900382131561357457600080fd5b9250929050565b601f821115612234576000816000526020600020601f850160051c810160208610156135a45750805b601f850160051c820191505b81811015611eae578281556001016135b0565b81516001600160401b038111156135dc576135dc61301c565b6135f0816135ea8454613472565b8461357b565b602080601f831160018114613625576000841561360d5750858301515b600019600386901b1c1916600185901b178555611eae565b600085815260208120601f198616915b8281101561365457888601518255948401946001909101908401613635565b50858210156136725787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152823560408201526020830135606082015260408301356080820152606083013560a0820152608083013560c082015260a083013560e082015260006136f660c08501612eef565b6001600160a01b03166101008381019190915260e08501359036869003601e1901821261372257600080fd5b602091860191820191356001600160401b0381111561374057600080fd5b80360383131561374f57600080fd5b8161012086015261376561014086018285613682565b9350505050610781602083018415159052565b81810381811115610723576107236134ce565b634e487b7160e01b600052603260045260246000fd5b8284823760609190911b6001600160601b0319169101908152601401919050565b6000808335601e198436030181126137d957600080fd5b8301803591506001600160401b038211156137f357600080fd5b6020019150600581901b360382131561357457600080fd5b8082028115828204841417610723576107236134ce565b60008261383f57634e487b7160e01b600052601260045260246000fd5b500490565b6040815260006138576040830185612eb0565b82810360208401526138698185612eb0565b95945050505050565b60008251613884818460208701612e8c565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156138b657600080fd5b815161078181612f8c56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220d9a063e4d80a5f4245bbbaef68718b8e3a33ca11ba69a98de86935a633eb9e6c64736f6c63430008170033",
    "sourceMap": "1334:3862:7:-:0;;;1443:95:226;1390:148;;1624:278:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1784:5;1791:7;1784:5;1791:7;2081:5:225;:13;1784:5:7;2081::225;:13;:::i;:::-;-1:-1:-1;2104:7:225;:17;2114:7;2104;:17;:::i;:::-;-1:-1:-1;;1877:13:226::1;1858:32;::::0;-1:-1:-1;1923:4:226::1;1900:28;::::0;1965:23:::1;:21;:23::i;:::-;1938:50;::::0;-1:-1:-1;1810:26:7::1;::::0;-1:-1:-1;1822:13:7;1810:11:::1;:26::i;:::-;1846:49;1873:21:::0;1846:26:::1;:49::i;:::-;1624:278:::0;;;;1334:3862;;3296:438:226;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;4754:25:821;;;;4795:18;;;4788:34;;;;3611:14:226;4838:18:821;;;4831:34;3647:13:226;4881:18:821;;;4874:34;3690:4:226;4924:19:821;;;4917:61;4726:19;;3416:297:226;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;1499:265:74:-;-1:-1:-1;;;;;1582:28:74;;1578:86;;1626:27;;-1:-1:-1;;;1626:27:74;;5191:2:821;1626:27:74;;;5173:21:821;5230:2;5210:18;;;5203:30;-1:-1:-1;;;5249:18:821;;;5242:47;5306:18;;1626:27:74;;;;;;;1578:86;1673:9;:26;;-1:-1:-1;;;;;;1673:26:74;-1:-1:-1;;;;;1673:26:74;;;;;;;;1714:43;;;;-1:-1:-1;;1714:43:74;1499:265;:::o;2193:98:225:-;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;14:177:821:-;93:13;;-1:-1:-1;;;;;135:31:821;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:844;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:821;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:821;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;914:3;907:4;902:2;894:6;890:15;886:26;883:35;880:55;;;931:1;928;921:12;880:55;953:1;944:10;;963:133;977:2;974:1;971:9;963:133;;;1065:14;;;1061:23;;1055:30;1034:14;;;1030:23;;1023:63;988:10;;;;963:133;;;1140:1;1133:4;1128:2;1120:6;1116:15;1112:26;1105:37;1160:6;1151:15;;;;;;328:844;;;;:::o;1177:733::-;1294:6;1302;1310;1318;1371:3;1359:9;1350:7;1346:23;1342:33;1339:53;;;1388:1;1385;1378:12;1339:53;1411:40;1441:9;1411:40;:::i;:::-;1495:2;1480:18;;1474:25;1401:50;;-1:-1:-1;;;;;;1548:14:821;;;1545:34;;;1575:1;1572;1565:12;1545:34;1598:61;1651:7;1642:6;1631:9;1627:22;1598:61;:::i;:::-;1588:71;;1705:2;1694:9;1690:18;1684:25;1668:41;;1734:2;1724:8;1721:16;1718:36;;;1750:1;1747;1740:12;1718:36;;1773:63;1828:7;1817:8;1806:9;1802:24;1773:63;:::i;:::-;1763:73;;;1855:49;1900:2;1889:9;1885:18;1855:49;:::i;:::-;1845:59;;1177:733;;;;;;;:::o;1915:380::-;1994:1;1990:12;;;;2037;;;2058:61;;2112:4;2104:6;2100:17;2090:27;;2058:61;2165:2;2157:6;2154:14;2134:18;2131:38;2128:161;;2211:10;2206:3;2202:20;2199:1;2192:31;2246:4;2243:1;2236:15;2274:4;2271:1;2264:15;2128:161;;1915:380;;;:::o;2426:543::-;2528:2;2523:3;2520:11;2517:446;;;2564:1;2588:5;2585:1;2578:16;2632:4;2629:1;2619:18;2702:2;2690:10;2686:19;2683:1;2679:27;2673:4;2669:38;2738:4;2726:10;2723:20;2720:47;;;-1:-1:-1;2761:4:821;2720:47;2816:2;2811:3;2807:12;2804:1;2800:20;2794:4;2790:31;2780:41;;2871:82;2889:2;2882:5;2879:13;2871:82;;;2934:17;;;2915:1;2904:13;2871:82;;;2875:3;;;2517:446;2426:543;;;:::o;3145:1345::-;3265:10;;-1:-1:-1;;;;;3287:30:821;;3284:56;;;3320:18;;:::i;:::-;3349:97;3439:6;3399:38;3431:4;3425:11;3399:38;:::i;:::-;3393:4;3349:97;:::i;:::-;3501:4;;3558:2;3547:14;;3575:1;3570:663;;;;4277:1;4294:6;4291:89;;;-1:-1:-1;4346:19:821;;;4340:26;4291:89;-1:-1:-1;;3102:1:821;3098:11;;;3094:24;3090:29;3080:40;3126:1;3122:11;;;3077:57;4393:81;;3540:944;;3570:663;2373:1;2366:14;;;2410:4;2397:18;;-1:-1:-1;;3606:20:821;;;3724:236;3738:7;3735:1;3732:14;3724:236;;;3827:19;;;3821:26;3806:42;;3919:27;;;;3887:1;3875:14;;;;3754:19;;3724:236;;;3728:3;3988:6;3979:7;3976:19;3973:201;;;4049:19;;;4043:26;-1:-1:-1;;4132:1:821;4128:14;;;4144:3;4124:24;4120:37;4116:42;4101:58;4086:74;;3973:201;-1:-1:-1;;;;;4220:1:821;4204:14;;;4200:22;4187:36;;-1:-1:-1;3145:1345:821:o;4989:341::-;1334:3862:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "1334:3862:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98:225;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;676:104:74;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;934:32:821;;;916:51;;904:2;889:18;676:104:74;770:203:821;4470:197:225;;;;;;;;;;-1:-1:-1;4470:197:225;;;;;:::i;:::-;;:::i;:::-;;;1676:14:821;;1669:22;1651:41;;1639:2;1624:18;4470:197:225;1511:187:821;1133:173:70;;;;;;;;;;-1:-1:-1;1133:173:70;;;;;:::i;:::-;;:::i;:::-;;3281:106:225;;;;;;;;;;-1:-1:-1;3368:12:225;;3281:106;;;2040:25:821;;;2028:2;2013:18;3281:106:225;1894:177:821;5229:256:225;;;;;;;;;;-1:-1:-1;5229:256:225;;;;;:::i;:::-;;:::i;3130:91::-;;;;;;;;;;-1:-1:-1;3130:91:225;;3212:2;2551:36:821;;2539:2;2524:18;3130:91:225;2409:184:821;6084:150:60;;;;;;;;;;-1:-1:-1;6084:150:60;;;;;:::i;:::-;6205:11;;6157:7;6183:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;6183:44:60;;;;;;;;;;;6084:150;3018:272:226;;;;;;;;;;;;;:::i;5880:236:225:-;;;;;;;;;;-1:-1:-1;5880:236:225;;;;;:::i;:::-;;:::i;2684:265:227:-;;;;;;;;;;-1:-1:-1;2684:265:227;;;;;:::i;:::-;;:::i;2330:1219:60:-;;;;;;;;;;-1:-1:-1;2330:1219:60;;;;;:::i;:::-;;:::i;2304:164:7:-;;;;;;;;;;-1:-1:-1;2304:164:7;;;;;:::i;:::-;;:::i;2077:126:227:-;;;;;;;;;;-1:-1:-1;2077:126:227;;;;;:::i;:::-;;:::i;5107:167::-;;;;;;;;;;-1:-1:-1;5107:167:227;;;;;:::i;:::-;;:::i;1189:228:74:-;;;;;;;;;;-1:-1:-1;1189:228:74;;;;;:::i;:::-;;:::i;1840:149:227:-;;;;;;;;;;-1:-1:-1;1840:149:227;;;;;:::i;:::-;;:::i;:::-;;;3791:10:821;3779:23;;;3761:42;;3749:2;3734:18;1840:149:227;3617:192:821;3445:125:225;;;;;;;;;;-1:-1:-1;3445:125:225;;;;;:::i;:::-;;:::i;2768:126:226:-;;;;;;;;;;-1:-1:-1;2768:126:226;;;;;:::i;:::-;;:::i;1181:1086:60:-;;;;;;:::i;:::-;;:::i;871:86:70:-;;;;;;;;;;;;;:::i;3228:256:227:-;;;;;;;;;;-1:-1:-1;3228:256:227;;;;;:::i;:::-;;:::i;1003:188:56:-;;;;;;;;;;-1:-1:-1;1003:188:56;;;;;:::i;:::-;;:::i;2404:102:225:-;;;;;;;;;;;;;:::i;2282:209:227:-;;;;;;;;;;-1:-1:-1;2282:209:227;;;;;:::i;:::-;;:::i;6603:429:225:-;;;;;;;;;;-1:-1:-1;6603:429:225;;;;;:::i;:::-;;:::i;3766:189::-;;;;;;;;;;-1:-1:-1;3766:189:225;;;;;:::i;:::-;;:::i;696:567:65:-;;;;;;;;;;-1:-1:-1;696:567:65;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5543:613:227:-;;;;;;;;;;-1:-1:-1;5543:613:227;;;;;:::i;:::-;;:::i;2056:651:226:-;;;;;;;;;;-1:-1:-1;2056:651:226;;;;;:::i;:::-;;:::i;463:36:60:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;4013:149:225:-;;;;;;;;;;-1:-1:-1;4013:149:225;;;;;:::i;:::-;;:::i;565:34:56:-;;;;;;;;;;;;;:::i;3646:2357:60:-;;;;;;;;;;-1:-1:-1;3646:2357:60;;;;;:::i;:::-;;:::i;1617:148:227:-;;;;;;;;;;-1:-1:-1;1617:148:227;;;;;:::i;:::-;;:::i;:::-;;;;11243:13:821;;11258:10;11239:30;11221:49;;11330:4;11318:17;;;11312:24;-1:-1:-1;;;;;11308:50:821;11286:20;;;11279:80;;;;11194:18;1617:148:227;11017:348:821;2193:98:225;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;676:104:74:-;764:9;;-1:-1:-1;;;;;764:9:74;;676:104::o;4470:197:225:-;4553:4;5177:10:7;4607:32:225;5177:10:7;4623:7:225;4632:6;4607:8;:32::i;:::-;4656:4;4649:11;;;4470:197;;;;;:::o;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;5229:256:225:-;5326:4;5177:10:7;5382:38:225;5398:4;5177:10:7;5413:6:225;5382:15;:38::i;:::-;5430:27;5440:4;5446:2;5450:6;5430:9;:27::i;:::-;5474:4;5467:11;;;5229:256;;;;;;:::o;3018:272:226:-;3076:7;3107:4;-1:-1:-1;;;;;3116:12:226;3099:29;;:66;;;;;3149:16;3132:13;:33;3099:66;3095:189;;;-1:-1:-1;3188:24:226;;3018:272::o;3095:189::-;3250:23;:21;:23::i;:::-;3243:30;;3018:272;:::o;5880:236:225:-;5177:10:7;5968:4:225;6047:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6047:27:225;;;;;;;;;;5968:4;;5177:10:7;6022:66:225;;5177:10:7;;6047:27:225;;:40;;6077:10;;6047:40;:::i;:::-;6022:8;:66::i;2684:265:227:-;2782:7;2823:12;2809:11;:26;2801:70;;;;-1:-1:-1;;;2801:70:227;;;;;;;:::i;:::-;-1:-1:-1;;;;;2907:21:227;;;;;;:12;:21;;;;;2888:54;;2930:11;2888:18;:54::i;2330:1219:60:-;2456:24;:22;:24::i;:::-;2451:80;;2496:24;;-1:-1:-1;;;2496:24:60;;;;;;;:::i;2451:80::-;2569:11;;2621:28;;2660:170;;;;-1:-1:-1;2725:1:60;5177:10:7;2770:48:60;;12922:2:821;12893:15;;;;-1:-1:-1;;;;;;12889:45:821;2770:48:60;;;12877:58:821;2805:12:60;12951::821;;;12944:28;12988:12;;2770:48:60;;;;;;;;;;;;2760:59;;;;;;2740:79;;2660:170;2867:10;:29;;;2844:20;:52;2840:111;;;2912:28;;-1:-1:-1;;;2912:28:60;;13213:2:821;2912:28:60;;;13195:21:821;13252:2;13232:18;;;13225:30;-1:-1:-1;;;13271:18:821;;;13264:48;13329:18;;2912:28:60;13011:342:821;2840:111:60;2978:450;;;;;;;;3023:10;:25;;;2978:450;;;;3082:10;:29;;;2978:450;;;;3140:20;2978:450;;;;3198:10;:33;;;2978:450;;;;3257:10;:21;;;2978:450;;;;3307:10;:24;;;2978:450;;;;3355:10;:19;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2978:450:60;;;;;3398:19;;;;:10;:19;:::i;:::-;2978:450;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2978:450:60;;-1:-1:-1;2961:467:60;;:14;:467;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2961:467:60;-1:-1:-1;;;;;2961:467:60;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;3438:11:60;:31;;;3485:57;;;;;;3507:10;;3519:22;;3485:57;:::i;:::-;;;;;;;;2441:1108;;2330:1219;;:::o;2304:164:7:-;2395:7;2370:21;2380:10;2370:9;:21::i;:::-;:32;;2362:63;;;;-1:-1:-1;;;2362:63:7;;17954:2:821;2362:63:7;;;17936:21:821;17993:2;17973:18;;;17966:30;-1:-1:-1;;;18012:18:821;;;18005:48;18070:18;;2362:63:7;17752:342:821;2362:63:7;2435:26;2441:10;2453:7;2435:5;:26::i;2077:126:227:-;-1:-1:-1;;;;;2177:19:227;;;2151:7;2177:19;;;:10;:19;;;;;;;;2077:126::o;5107:167::-;5233:34;5177:10:7;5257:9:227;5233;:34::i;1189:228:74:-;1279:29;:27;:29::i;:::-;1274:85;;1324:24;;-1:-1:-1;;;1324:24:74;;;;;;;:::i;1274:85::-;1368:42;1395:14;1368:26;:42::i;1840:149:227:-;-1:-1:-1;;;;;1953:21:227;;1910:6;1953:21;;;:12;:21;;;;;:28;1935:47;;:17;:47::i;3445:125:225:-;-1:-1:-1;;;;;3545:18:225;3519:7;3545:18;;;:9;:18;;;;;;;3445:125::o;2768:126:226:-;-1:-1:-1;;;;;2863:14:226;;2837:7;2863:14;;;:7;:14;;;;;918::233;2863:24:226;827:112:233;1181:1086:60;1558:11;;1580:84;5177:10:7;1610:9:60;1621;1632:14;1648:15;1580:11;:84::i;:::-;;1741:9;1709:14;:28;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;1760:40:60;;;;:21;:40;;;;;;;;5177:10:7;1760:58:60;;;;;;;:71;;1822:9;;1760:40;:71;;1822:9;;1760:71;:::i;:::-;;;;-1:-1:-1;1888:70:60;;-1:-1:-1;1917:1:60;1921:9;1932;1943:14;1888:20;:70::i;:::-;2015:20;2038:44;2061:9;2072;2038:22;:44::i;:::-;2015:67;-1:-1:-1;2015:67:60;-1:-1:-1;;;;;2098:67:60;;5177:10:7;-1:-1:-1;;;;;2098:67:60;;2155:9;2098:67;;;;2040:25:821;;2028:2;2013:18;;1894:177;2098:67:60;;;;;;;;1424:843;;1181:1086;;;;;;:::o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;3228:256:227:-;3315:7;3356:12;3342:11;:26;3334:70;;;;-1:-1:-1;;;3334:70:227;;;;;;;:::i;:::-;3421:56;3440:23;3465:11;3421:18;:56::i;1003:188:56:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:56;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;2404:102:225:-;2460:13;2492:7;2485:14;;;;;:::i;2282:209:227:-;-1:-1:-1;;;;;2388:21:227;;2355:7;2388:21;;;:12;:21;;;;;:28;2433:8;;:51;;-1:-1:-1;;;;;2448:21:227;;;;;;:12;:21;;;;;2470:7;2476:1;2470:3;:7;:::i;:::-;2448:30;;;;;;;;:::i;:::-;;;;;;;;;;:36;-1:-1:-1;;;2448:36:227;;-1:-1:-1;;;;;2448:36:227;2433:51;;;2444:1;2433:51;-1:-1:-1;;;;;2426:58:227;;2282:209;-1:-1:-1;;;2282:209:227:o;6603:429:225:-;5177:10:7;6696:4:225;6777:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6777:27:225;;;;;;;;;;6696:4;;5177:10:7;6822:35:225;;;;6814:85;;;;-1:-1:-1;;;6814:85:225;;18566:2:821;6814:85:225;;;18548:21:821;18605:2;18585:18;;;18578:30;18644:34;18624:18;;;18617:62;-1:-1:-1;;;18695:18:821;;;18688:35;18740:19;;6814:85:225;18364:401:821;6814:85:225;6933:60;6942:5;6949:7;6977:15;6958:16;:34;6933:8;:60::i;:::-;-1:-1:-1;7021:4:225;;6603:429;-1:-1:-1;;;;6603:429:225:o;3766:189::-;3845:4;5177:10:7;3899:28:225;5177:10:7;3916:2:225;3920:6;3899:9;:28::i;696:567:65:-;756:22;812:4;-1:-1:-1;;;;;800:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:34:65;-1:-1:-1;5177:10:7;834:14:65;;922:311;942:15;;;922:311;;;982:11;978:245;;;1026:78;1063:4;1087;;1092:1;1087:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1096:6;1070:33;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1026:28;:78::i;:::-;1013:7;1021:1;1013:10;;;;;;;;:::i;:::-;;;;;;:91;;;;978:245;;;1156:52;1193:4;1200;;1205:1;1200:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1156:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1156:28:65;;-1:-1:-1;;;1156:52:65:i;:::-;1143:7;1151:1;1143:10;;;;;;;;:::i;:::-;;;;;;:65;;;;978:245;959:3;;922:311;;;;1242:14;;696:567;;;;:::o;5543:613:227:-;5762:6;5743:15;:25;;5735:67;;;;-1:-1:-1;;;5735:67:227;;19855:2:821;5735:67:227;;;19837:21:821;19894:2;19874:18;;;19867:30;19933:31;19913:18;;;19906:59;19982:18;;5735:67:227;19653:353:821;5735:67:227;5844:58;;;1306:71;5844:58;;;20242:25:821;-1:-1:-1;;;;;20303:32:821;;20283:18;;;20276:60;;;;20352:18;;;20345:34;;;20395:18;;;20388:34;;;5813:18:227;;20214:19:821;;5844:58:227;;;;;;;;;;;;5834:69;;;;;;5813:90;;5913:12;5928:53;5950:18;:16;:18::i;:::-;5970:10;8549:4:239;8543:11;-1:-1:-1;;;8567:23:239;;8619:4;8610:14;;8603:39;;;;8671:4;8662:14;;8655:34;8725:4;8710:20;;;8349:397;5928:53:227;5913:68;;5991:14;6008:28;6022:4;6028:1;6031;6034;6008:13;:28::i;:::-;5991:45;;6064:17;6074:6;6064:9;:17::i;:::-;6055:5;:26;6047:64;;;;-1:-1:-1;;;6047:64:227;;20635:2:821;6047:64:227;;;20617:21:821;20674:2;20654:18;;;20647:30;-1:-1:-1;;;20693:18:821;;;20686:55;20758:18;;6047:64:227;20433:349:821;6047:64:227;6121:28;6131:6;6139:9;6121;:28::i;:::-;5725:431;;;5543:613;;;;;;:::o;2056:651:226:-;2291:8;2272:15;:27;;2264:69;;;;-1:-1:-1;;;2264:69:226;;20989:2:821;2264:69:226;;;20971:21:821;21028:2;21008:18;;;21001:30;21067:31;21047:18;;;21040:59;21116:18;;2264:69:226;20787:353:821;2264:69:226;2344:18;2386:16;2404:5;2411:7;2420:5;2427:16;2437:5;2427:9;:16::i;:::-;2375:79;;;;;;21432:25:821;;;;-1:-1:-1;;;;;21531:15:821;;;21511:18;;;21504:43;21583:15;;;;21563:18;;;21556:43;21615:18;;;21608:34;21658:19;;;21651:35;21702:19;;;21695:35;;;21404:19;;2375:79:226;;;;;;;;;;;;2365:90;;;;;;2344:111;;2466:12;2481:53;2503:18;:16;:18::i;2481:53::-;2466:68;;2545:14;2562:28;2576:4;2582:1;2585;2588;2562:13;:28::i;:::-;2545:45;;2618:5;-1:-1:-1;;;;;2608:15:226;:6;-1:-1:-1;;;;;2608:15:226;;2600:58;;;;-1:-1:-1;;;2600:58:226;;21943:2:821;2600:58:226;;;21925:21:821;21982:2;21962:18;;;21955:30;22021:32;22001:18;;;21994:60;22071:18;;2600:58:226;21741:354:821;2600:58:226;2669:31;2678:5;2685:7;2694:5;2669:8;:31::i;:::-;2254:453;;;2056:651;;;;;;;:::o;463:36:60:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;463:36:60;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4013:149:225:-;-1:-1:-1;;;;;4128:18:225;;;4102:7;4128:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4013:149::o;565:34:56:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3646:2357:60:-;3890:56;;;;;;;;3932:14;3890:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3890:56:60;;;;;;;;3863:15;;;;3890:56;3932:14;;3890:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3890:56:60;;;;-1:-1:-1;;;3977:40:60;;;;4048:31;;;;4113:26;;;;4349:28;;;;3890:56;;-1:-1:-1;3977:40:60;;4048:31;;4113:26;4349:42;4345:515;;4424:425;4460:21;:15;;:21;:::i;:::-;4424:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4499:28:60;;;;;;-1:-1:-1;4618:8:60;;4652:38;;;;;4716:29;;;;;4771:24;;;;;;;;:::i;:::-;4576:241;;-1:-1:-1;;;;;;22885:2:821;22921:15;;;22917:24;;4576:241:60;;;22905:37:821;22958:12;;;22951:28;;;;22995:12;;;22988:28;;;;23050:15;;;23046:24;23032:12;;;23025:46;23087:13;;4576:241:60;;;;;;;;;;;;4545:290;;;;;;4424:18;:425::i;:::-;-1:-1:-1;4407:442:60;-1:-1:-1;4345:515:60;4874:10;4870:534;;;4913:15;:38;;;4955:1;4913:43;:129;;5032:10;4913:129;;;4975:15;:38;;;4913:129;4900:142;;-1:-1:-1;;5069:15:60;:29;;;:50;:127;;5186:10;5069:127;;;5138:15;:29;;;5069:127;5056:140;;-1:-1:-1;;5226:15:60;:29;;;:50;;:92;;;;-1:-1:-1;5316:1:60;5280:24;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5280:38:60;;;5226:92;:167;;5380:13;5226:167;;;5337:24;;;;;;;;:::i;:::-;5210:183;;4870:534;5469:11;;5414:30;5447:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;5447:44:60;;;;;;;;;;;;5506:26;;;;;;;;;:58;;;5554:10;5536:14;:28;;5506:58;5502:115;;;5580:26;;-1:-1:-1;;;5580:26:60;;23313:2:821;5580:26:60;;;23295:21:821;23352:2;23332:18;;;23325:30;-1:-1:-1;;;23371:18:821;;;23364:46;23427:18;;5580:26:60;23111:340:821;5502:115:60;5631:14;;;:67;;-1:-1:-1;5687:10:60;5650:34;5662:22;5650:9;:34;:::i;:::-;:47;5631:67;5627:112;;;5714:14;;-1:-1:-1;;;5714:14:60;;;;;;23658:2:821;23640:21;;;23697:1;23677:18;;;23670:29;-1:-1:-1;;;23730:2:821;23715:18;;23708:34;23774:2;23759:18;;23456:327;5627:112:60;5799:17;:36;;;5787:9;5753:17;:31;;;:43;;;;:::i;:::-;:82;5749:133;;;5851:20;;-1:-1:-1;;;5851:20:60;;23990:2:821;5851:20:60;;;23972:21:821;24029:2;24009:18;;;24002:30;-1:-1:-1;;;24048:18:821;;;24041:40;24098:18;;5851:20:60;23788:334:821;5749:133:60;5896:32;;5931:15;-1:-1:-1;5892:105:60;;;5962:24;;-1:-1:-1;;;5962:24:60;;24329:2:821;5962:24:60;;;24311:21:821;24368:2;24348:18;;;24341:30;-1:-1:-1;;;24387:18:821;;;24380:44;24441:18;;5962:24:60;24127:338:821;5892:105:60;3880:2123;;;;;3646:2357;;;;;;;:::o;1617:148:227:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;1732:21:227;;;;;;:12;:21;;;;;:26;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1725:33;;;;;;;;;1732:26;;1725:33;;;;;;-1:-1:-1;;;1725:33:227;;-1:-1:-1;;;;;1725:33:227;;;;;;;;;1617:148;-1:-1:-1;;;1617:148:227:o;10100:340:225:-;-1:-1:-1;;;;;10201:19:225;;10193:68;;;;-1:-1:-1;;;10193:68:225;;24672:2:821;10193:68:225;;;24654:21:821;24711:2;24691:18;;;24684:30;24750:34;24730:18;;;24723:62;-1:-1:-1;;;24801:18:821;;;24794:34;24845:19;;10193:68:225;24470:400:821;10193:68:225;-1:-1:-1;;;;;10279:21:225;;10271:68;;;;-1:-1:-1;;;10271:68:225;;25077:2:821;10271:68:225;;;25059:21:821;25116:2;25096:18;;;25089:30;25155:34;25135:18;;;25128:62;-1:-1:-1;;;25206:18:821;;;25199:32;25248:19;;10271:68:225;24875:398:821;10271:68:225;-1:-1:-1;;;;;10350:18:225;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10401:32;;2040:25:821;;;10401:32:225;;2013:18:821;10401:32:225;;;;;;;10100:340;;;:::o;4658:115:7:-;4722:4;4759:7;:5;:7::i;:::-;-1:-1:-1;;;;;4745:21:7;:10;-1:-1:-1;;;;;4745:21:7;;4738:28;;4658:115;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;10717:411:225:-;10817:24;10844:25;10854:5;10861:7;10844:9;:25::i;:::-;10817:52;;-1:-1:-1;;10883:16:225;:37;10879:243;;10964:6;10944:16;:26;;10936:68;;;;-1:-1:-1;;;10936:68:225;;25480:2:821;10936:68:225;;;25462:21:821;25519:2;25499:18;;;25492:30;25558:31;25538:18;;;25531:59;25607:18;;10936:68:225;25278:353:821;10936:68:225;11046:51;11055:5;11062:7;11090:6;11071:16;:25;11046:8;:51::i;:::-;10807:321;10717:411;;;:::o;7495:621::-;-1:-1:-1;;;;;7591:18:225;;7583:68;;;;-1:-1:-1;;;7583:68:225;;25838:2:821;7583:68:225;;;25820:21:821;25877:2;25857:18;;;25850:30;25916:34;25896:18;;;25889:62;-1:-1:-1;;;25967:18:821;;;25960:35;26012:19;;7583:68:225;25636:401:821;7583:68:225;-1:-1:-1;;;;;7669:16:225;;7661:64;;;;-1:-1:-1;;;7661:64:225;;26244:2:821;7661:64:225;;;26226:21:821;26283:2;26263:18;;;26256:30;26322:34;26302:18;;;26295:62;-1:-1:-1;;;26373:18:821;;;26366:33;26416:19;;7661:64:225;26042:399:821;7661:64:225;-1:-1:-1;;;;;7807:15:225;;7785:19;7807:15;;;:9;:15;;;;;;7840:21;;;;7832:72;;;;-1:-1:-1;;;7832:72:225;;26648:2:821;7832:72:225;;;26630:21:821;26687:2;26667:18;;;26660:30;26726:34;26706:18;;;26699:62;-1:-1:-1;;;26777:18:821;;;26770:36;26823:19;;7832:72:225;26446:402:821;7832:72:225;-1:-1:-1;;;;;7938:15:225;;;;;;;:9;:15;;;;;;7956:20;;;7938:38;;7996:13;;;;;;;;:23;;7970:6;;7938:15;7996:23;;7970:6;;7996:23;:::i;:::-;;;;;;;;8050:2;-1:-1:-1;;;;;8035:26:225;8044:4;-1:-1:-1;;;;;8035:26:225;-1:-1:-1;;;;;;;;;;;8054:6:225;8035:26;;;;2040:25:821;;2028:2;2013:18;;1894:177;8035:26:225;;;;;;;;8072:37;8092:4;8098:2;8102:6;8072:19;:37::i;3296:438:226:-;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;27112:25:821;;;;27153:18;;;27146:34;;;;3611:14:226;27196:18:821;;;27189:34;3647:13:226;27239:18:821;;;27232:34;3690:4:226;27282:19:821;;;27275:61;27084:19;;3416:297:226;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;3568:1458:227:-;4689:12;;3667:7;;;4736:229;4749:4;4743:3;:10;4736:229;;;4769:11;4783:23;4796:3;4801:4;4783:12;:23::i;:::-;4769:37;;4847:11;4824:5;4830:3;4824:10;;;;;;;;:::i;:::-;;;;;;;;;;:20;;;:34;4820:135;;;4885:3;4878:10;;4820:135;;;4933:7;:3;4939:1;4933:7;:::i;:::-;4927:13;;4820:135;4755:210;4736:229;;;4982:9;;:37;;4998:5;5004:8;5011:1;5004:4;:8;:::i;:::-;4998:15;;;;;;;;:::i;:::-;;;;;;;;;;:21;-1:-1:-1;;;4998:21:227;;-1:-1:-1;;;;;4998:21:227;4982:37;;;4994:1;4982:37;-1:-1:-1;;;;;4975:44:227;;3568:1458;-1:-1:-1;;;;;3568:1458:227:o;6824:190::-;6908:28;6920:7;6929:6;6908:11;:28::i;:::-;6947:60;6964:23;6989:9;7000:6;6947:16;:60::i;7528:380::-;7612:23;7638:20;7648:9;7638;:20::i;:::-;7612:46;;7668:24;7695:20;7705:9;7695;:20::i;:::-;-1:-1:-1;;;;;7725:21:227;;;;;;;:10;:21;;;;;;:33;;-1:-1:-1;;;;;;7725:33:227;;;;;;;;;;7774:54;;7668:47;;-1:-1:-1;7725:33:227;7774:54;;;;;;7725:21;7774:54;7839:62;7856:15;7873:9;7884:16;7839;:62::i;1499:265:74:-;-1:-1:-1;;;;;1582:28:74;;1578:86;;1626:27;;-1:-1:-1;;;1626:27:74;;27549:2:821;1626:27:74;;;27531:21:821;27588:2;27568:18;;;27561:30;-1:-1:-1;;;27607:18:821;;;27600:47;27664:18;;1626:27:74;27347:341:821;1578:86:74;1673:9;:26;;-1:-1:-1;;;;;;1673:26:74;-1:-1:-1;;;;;1673:26:74;;;;;;;;1714:43;;;;-1:-1:-1;;1714:43:74;1499:265;:::o;3045:187:242:-;3101:6;3136:16;3127:25;;;3119:76;;;;-1:-1:-1;;;3119:76:242;;27895:2:821;3119:76:242;;;27877:21:821;27934:2;27914:18;;;27907:30;27973:34;27953:18;;;27946:62;-1:-1:-1;;;28024:18:821;;;28017:36;28070:19;;3119:76:242;27693:402:821;3119:76:242;-1:-1:-1;3219:5:242;3045:187::o;6677:237:60:-;;;;;;;:::o;2757:925:7:-;2965:14;2983:1;2965:19;2961:103;;3008:9;:14;3000:33;;;;-1:-1:-1;;;3000:33:7;;28302:2:821;3000:33:7;;;28284:21:821;28341:1;28321:18;;;28314:29;-1:-1:-1;;;28359:18:821;;;28352:36;28405:18;;3000:33:7;28100:329:821;3000:33:7;3047:7;;2961:103;3074:18;3133:7;3096:33;3115:14;3096:16;:33;:::i;:::-;3095:45;;;;:::i;:::-;3074:66;;3171:1;3158:10;:14;3150:43;;;;-1:-1:-1;;;3150:43:7;;29031:2:821;3150:43:7;;;29013:21:821;29070:2;29050:18;;;29043:30;-1:-1:-1;;;29089:18:821;;;29082:46;29145:18;;3150:43:7;28829:340:821;3150:43:7;3204:18;-1:-1:-1;;;;;;;3236:45:7;;;3232:176;;-1:-1:-1;3313:9:7;:23;;3232:176;;;-1:-1:-1;3383:9:7;:14;3232:176;3425:13;3417:43;;;;-1:-1:-1;;;3417:43:7;;29376:2:821;3417:43:7;;;29358:21:821;29415:2;29395:18;;;29388:30;-1:-1:-1;;;29434:18:821;;;29427:47;29491:18;;3417:43:7;29174:341:821;3417:43:7;3471:21;-1:-1:-1;;;;;3495:35:7;;;:84;;3558:21;3495:84;;;3533:22;:20;:22::i;:::-;3471:108;;3589:86;3626:9;3637:10;3649:13;3664:10;3589:36;:86::i;:::-;2951:731;;;2757:925;;;;:::o;3737:210::-;3870:7;3889:33;3895:3;3900:21;3889:5;:33::i;:::-;-1:-1:-1;3939:1:7;3737:210;;;;:::o;1273:185:56:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1398:4;1384:11;:18;;;;;;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;6671:198:289:-;6754:12;6785:77;6806:6;6814:4;6785:77;;;;;;;;;;;;;;;;;:20;:77::i;6611:232:239:-;6696:7;6716:17;6735:18;6757:25;6768:4;6774:1;6777;6780;6757:10;:25::i;:::-;6715:67;;;;6792:18;6804:5;6792:11;:18::i;:::-;-1:-1:-1;6827:9:239;-1:-1:-1;6611:232:239;;;;;;;:::o;3865:203:226:-;-1:-1:-1;;;;;3985:14:226;;3925:15;3985:14;;;:7;:14;;;;;918::233;;1050:1;1032:19;;;;918:14;4044:17:226;3942:126;3865:203;;;:::o;112:876:294:-;203:4;;251;203;;293:567;317:5;:12;313:1;:16;293:567;;;350:10;359:1;350:10;;:::i;:::-;;;374:20;397:5;403:1;397:8;;;;;;;;:::i;:::-;;;;;;;374:31;;440:12;424;:28;420:430;;575:44;;;;;;30065:19:821;;;30100:12;;;30093:28;;;30137:12;;575:44:294;;;;;;;;;;;;565:55;;;;;;550:70;;420:430;;;762:44;;;;;;30065:19:821;;;30100:12;;;30093:28;;;30137:12;;762:44:294;;;;;;;;;;;;752:55;;;;;;737:70;;834:1;825:10;;;;;:::i;:::-;;;420:430;-1:-1:-1;331:3:294;;293:567;;;-1:-1:-1;953:20:294;;;;;-1:-1:-1;;;;112:876:294:o;11712:91:225:-;;;;:::o;7147:224:227:-;7308:56;7325:15;7335:4;7325:9;:15::i;:::-;7342:13;7352:2;7342:9;:13::i;:::-;7357:6;7308:16;:56::i;678:153:241:-;740:7;813:11;823:1;814:5;;;813:11;:::i;:::-;803:21;;804:5;;;803:21;:::i;9101:576:225:-;-1:-1:-1;;;;;9184:21:225;;9176:67;;;;-1:-1:-1;;;9176:67:225;;30362:2:821;9176:67:225;;;30344:21:821;30401:2;30381:18;;;30374:30;30440:34;30420:18;;;30413:62;-1:-1:-1;;;30491:18:821;;;30484:31;30532:19;;9176:67:225;30160:397:821;9176:67:225;-1:-1:-1;;;;;9339:18:225;;9314:22;9339:18;;;:9;:18;;;;;;9375:24;;;;9367:71;;;;-1:-1:-1;;;9367:71:225;;30764:2:821;9367:71:225;;;30746:21:821;30803:2;30783:18;;;30776:30;30842:34;30822:18;;;30815:62;-1:-1:-1;;;30893:18:821;;;30886:32;30935:19;;9367:71:225;30562:398:821;9367:71:225;-1:-1:-1;;;;;9472:18:225;;;;;;:9;:18;;;;;9493:23;;;9472:44;;9536:12;:22;;9510:6;;9472:18;9536:22;;9510:6;;9536:22;:::i;:::-;;;;-1:-1:-1;;9574:37:225;;2040:25:821;;;9600:1:225;;-1:-1:-1;;;;;9574:37:225;;;-1:-1:-1;;;;;;;;;;;9574:37:225;2028:2:821;2013:18;9574:37:225;;;;;;;9622:48;9642:7;9659:1;9663:6;9622:19;:48::i;9288:101:227:-;9351:7;9377:5;9381:1;9377;:5;:::i;8517:663::-;8749:12;;8687:17;;;;8783:8;;:35;;8798:5;8804:7;8810:1;8804:3;:7;:::i;:::-;8798:14;;;;;;;;:::i;:::-;;;;;;;;;;:20;-1:-1:-1;;;8798:20:227;;-1:-1:-1;;;;;8798:20:227;8783:35;;;8794:1;8783:35;-1:-1:-1;;;;;8771:47:227;;;8840:20;8843:9;8854:5;8840:2;:20;;:::i;:::-;8828:32;;8881:1;8875:3;:7;:51;;;;-1:-1:-1;8914:12:227;8886:5;8892:7;8898:1;8892:3;:7;:::i;:::-;8886:14;;;;;;;;:::i;:::-;;;;;;;;;;:24;;;:40;8875:51;8871:303;;;8965:29;8984:9;8965:18;:29::i;:::-;8942:5;8948:7;8954:1;8948:3;:7;:::i;:::-;8942:14;;;;;;;;:::i;:::-;;;;;;;;:20;;;:52;;;;;-1:-1:-1;;;;;8942:52:227;;;;;-1:-1:-1;;;;;8942:52:227;;;;;;8871:303;;;9025:5;9053:96;;;;;;;;9077:31;9095:12;9077:17;:31::i;:::-;9053:96;;;;;;9117:29;9136:9;9117:18;:29::i;:::-;-1:-1:-1;;;;;9053:96:227;;;;;;9025:138;;;;;;;-1:-1:-1;9025:138:227;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9025:138:227;;;;;;;;;;;;8871:303;8725:455;8517:663;;;;;;:::o;7914:597::-;8011:3;-1:-1:-1;;;;;8004:10:227;:3;-1:-1:-1;;;;;8004:10:227;;;:24;;;;;8027:1;8018:6;:10;8004:24;8000:505;;;-1:-1:-1;;;;;8048:17:227;;;8044:221;;-1:-1:-1;;;;;8143:17:227;;8086;8143;;;:12;:17;;;;;8086;;8126:54;;8162:9;8173:6;8126:16;:54::i;:::-;8085:95;;;;8224:3;-1:-1:-1;;;;;8203:47:227;;8229:9;8240;8203:47;;;;;;31139:25:821;;;31195:2;31180:18;;31173:34;31127:2;31112:18;;30965:248;8203:47:227;;;;;;;;8067:198;;8044:221;-1:-1:-1;;;;;8283:17:227;;;8279:216;;-1:-1:-1;;;;;8378:17:227;;8321;8378;;;:12;:17;;;;;8321;;8361:49;;8397:4;8403:6;8361:16;:49::i;:::-;8320:90;;;;8454:3;-1:-1:-1;;;;;8433:47:227;;8459:9;8470;8433:47;;;;;;31139:25:821;;;31195:2;31180:18;;31173:34;31127:2;31112:18;;30965:248;8433:47:227;;;;;;;;8302:193;;7914:597;;;:::o;534:347:292:-;643:49;;675:7;643:49;-1:-1:-1;;;;;;;706:25:292;;;702:173;;747:37;771:3;776:7;747:23;:37::i;702:173::-;815:49;833:9;844:5;851:3;856:7;815:17;:49::i;6450:285:227:-;6534:28;6546:7;6555:6;6534:11;:28::i;:::-;3368:12:225;;-1:-1:-1;;;;;;6580:29:227;6572:90;;;;-1:-1:-1;;;6572:90:227;;31420:2:821;6572:90:227;;;31402:21:821;31459:2;31439:18;;;31432:30;31498:34;31478:18;;;31471:62;-1:-1:-1;;;31549:18:821;;;31542:46;31605:19;;6572:90:227;31218:412:821;6572:90:227;6673:55;6690:23;6715:4;6721:6;6673:16;:55::i;7055:325:289:-;7196:12;7221;7235:23;7262:6;-1:-1:-1;;;;;7262:19:289;7282:4;7262:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7220:67;;;;7304:69;7331:6;7339:7;7348:10;7360:12;7304:26;:69::i;:::-;7297:76;7055:325;-1:-1:-1;;;;;;7055:325:289:o;5022:1456:239:-;5110:7;;-1:-1:-1;;;;;6021:79:239;;6017:161;;;-1:-1:-1;6132:1:239;;-1:-1:-1;6136:30:239;6116:51;;6017:161;6289:24;;;6272:14;6289:24;;;;;;;;;32154:25:821;;;32227:4;32215:17;;32195:18;;;32188:45;;;;32249:18;;;32242:34;;;32292:18;;;32285:34;;;6289:24:239;;32126:19:821;;6289:24:239;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6289:24:239;;-1:-1:-1;;6289:24:239;;;-1:-1:-1;;;;;;;6327:20:239;;6323:101;;6379:1;6383:29;6363:50;;;;;;;6323:101;6442:6;-1:-1:-1;6450:20:239;;-1:-1:-1;5022:1456:239;;;;;;;;:::o;583:511::-;660:20;651:5;:29;;;;;;;;:::i;:::-;;647:441;;583:511;:::o;647:441::-;756:29;747:5;:38;;;;;;;;:::i;:::-;;743:345;;801:34;;-1:-1:-1;;;801:34:239;;32664:2:821;801:34:239;;;32646:21:821;32703:2;32683:18;;;32676:30;-1:-1:-1;;;32722:18:821;;;32715:54;32786:18;;801:34:239;32462:348:821;743:345:239;865:35;856:5;:44;;;;;;;;:::i;:::-;;852:236;;916:41;;-1:-1:-1;;;916:41:239;;33017:2:821;916:41:239;;;32999:21:821;33056:2;33036:18;;;33029:30;33095:33;33075:18;;;33068:61;33146:18;;916:41:239;32815:355:821;852:236:239;987:30;978:5;:39;;;;;;;;:::i;:::-;;974:114;;1033:44;;-1:-1:-1;;;1033:44:239;;33377:2:821;1033:44:239;;;33359:21:821;33416:2;33396:18;;;33389:30;33455:34;33435:18;;;33428:62;-1:-1:-1;;;33506:18:821;;;33499:32;33548:19;;1033:44:239;33175:398:821;1135:192:242;1192:7;-1:-1:-1;;;;;1219:26:242;;;1211:78;;;;-1:-1:-1;;;1211:78:242;;33780:2:821;1211:78:242;;;33762:21:821;33819:2;33799:18;;;33792:30;33858:34;33838:18;;;33831:62;-1:-1:-1;;;33909:18:821;;;33902:37;33956:19;;1211:78:242;33578:403:821;9186:96:227;9244:7;9270:5;9274:1;9270;:5;:::i;2482:292:292:-;2664:12;2682:2;-1:-1:-1;;;;;2682:7:292;2698:5;2682:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2663:46;;;2727:7;2719:48;;;;-1:-1:-1;;;2719:48:292;;34398:2:821;2719:48:292;;;34380:21:821;34437:2;34417:18;;;34410:30;-1:-1:-1;;;34456:18:821;;;34449:58;34524:18;;2719:48:292;34196:352:821;2061:358:292;2184:3;-1:-1:-1;;;;;2175:12:292;:5;-1:-1:-1;;;;;2175:12:292;;2171:49;2203:7;2171:49;2251:4;-1:-1:-1;;;;;2234:22:292;;;2230:183;;2272:44;-1:-1:-1;;;;;2272:30:292;;2303:3;2308:7;2272:30;:44::i;2230:183::-;2347:55;-1:-1:-1;;;;;2347:34:292;;2382:5;2389:3;2394:7;2347:34;:55::i;8392:389:225:-;-1:-1:-1;;;;;8475:21:225;;8467:65;;;;-1:-1:-1;;;8467:65:225;;34755:2:821;8467:65:225;;;34737:21:821;34794:2;34774:18;;;34767:30;34833:33;34813:18;;;34806:61;34884:18;;8467:65:225;34553:355:821;8467:65:225;8619:6;8603:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8635:18:225;;;;;;:9;:18;;;;;:28;;8657:6;;8635:18;:28;;8657:6;;8635:28;:::i;:::-;;;;-1:-1:-1;;8678:37:225;;2040:25:821;;;-1:-1:-1;;;;;8678:37:225;;;8695:1;;-1:-1:-1;;;;;;;;;;;8678:37:225;2028:2:821;2013:18;8678:37:225;;;;;;;8726:48;8754:1;8758:7;8767:6;8726:19;:48::i;:::-;8392:389;;:::o;7668:628:289:-;7848:12;7876:7;7872:418;;;7903:10;:17;7924:1;7903:22;7899:286;;-1:-1:-1;;;;;1695:19:289;;;8110:60;;;;-1:-1:-1;;;8110:60:289;;35115:2:821;8110:60:289;;;35097:21:821;35154:2;35134:18;;;35127:30;35193:31;35173:18;;;35166:59;35242:18;;8110:60:289;34913:353:821;8110:60:289;-1:-1:-1;8205:10:289;8198:17;;7872:418;8246:33;8254:10;8266:12;8246:7;:33::i;759:175:228:-;868:58;;-1:-1:-1;;;;;35463:32:821;;868:58:228;;;35445:51:821;35512:18;;;35505:34;;;841:86:228;;861:5;;-1:-1:-1;;;891:23:228;35418:18:821;;868:58:228;;;;-1:-1:-1;;868:58:228;;;;;;;;;;;;;;-1:-1:-1;;;;;868:58:228;-1:-1:-1;;;;;;868:58:228;;;;;;;;;;841:19;:86::i;940:203::-;1067:68;;-1:-1:-1;;;;;35808:15:821;;;1067:68:228;;;35790:34:821;35860:15;;35840:18;;;35833:43;35892:18;;;35885:34;;;1040:96:228;;1060:5;;-1:-1:-1;;;1090:27:228;35725:18:821;;1067:68:228;35550:375:821;8818:540:289;8977:17;;:21;8973:379;;9205:10;9199:17;9261:15;9248:10;9244:2;9240:19;9233:44;8973:379;9328:12;9321:20;;-1:-1:-1;;;9321:20:289;;;;;;;;:::i;3107:706:228:-;3526:23;3552:69;3580:4;3552:69;;;;;;;;;;;;;;;;;3560:5;-1:-1:-1;;;;;3552:27:228;;;:69;;;;;:::i;:::-;3635:17;;3526:95;;-1:-1:-1;3635:21:228;3631:176;;3730:10;3719:30;;;;;;;;;;;;:::i;:::-;3711:85;;;;-1:-1:-1;;;3711:85:228;;36382:2:821;3711:85:228;;;36364:21:821;36421:2;36401:18;;;36394:30;36460:34;36440:18;;;36433:62;-1:-1:-1;;;36511:18:821;;;36504:40;36561:19;;3711:85:228;36180:406:821;4108:223:530;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4241;5446;5460:23;5487:6;-1:-1:-1;;;;;5487:11:530;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:530:o;14:250:821:-;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:821;238:16;;231:27;14:250::o;269:271::-;311:3;349:5;343:12;376:6;371:3;364:19;392:76;461:6;454:4;449:3;445:14;438:4;431:5;427:16;392:76;:::i;:::-;522:2;501:15;-1:-1:-1;;497:29:821;488:39;;;;529:4;484:50;;269:271;-1:-1:-1;;269:271:821:o;545:220::-;694:2;683:9;676:21;657:4;714:45;755:2;744:9;740:18;732:6;714:45;:::i;978:173::-;1046:20;;-1:-1:-1;;;;;1095:31:821;;1085:42;;1075:70;;1141:1;1138;1131:12;1075:70;978:173;;;:::o;1156:254::-;1224:6;1232;1285:2;1273:9;1264:7;1260:23;1256:32;1253:52;;;1301:1;1298;1291:12;1253:52;1324:29;1343:9;1324:29;:::i;:::-;1314:39;1400:2;1385:18;;;;1372:32;;-1:-1:-1;;;1156:254:821:o;1703:186::-;1762:6;1815:2;1803:9;1794:7;1790:23;1786:32;1783:52;;;1831:1;1828;1821:12;1783:52;1854:29;1873:9;1854:29;:::i;2076:328::-;2153:6;2161;2169;2222:2;2210:9;2201:7;2197:23;2193:32;2190:52;;;2238:1;2235;2228:12;2190:52;2261:29;2280:9;2261:29;:::i;:::-;2251:39;;2309:38;2343:2;2332:9;2328:18;2309:38;:::i;:::-;2299:48;;2394:2;2383:9;2379:18;2366:32;2356:42;;2076:328;;;;;:::o;2780:118::-;2866:5;2859:13;2852:21;2845:5;2842:32;2832:60;;2888:1;2885;2878:12;2903:524;3003:6;3011;3064:2;3052:9;3043:7;3039:23;3035:32;3032:52;;;3080:1;3077;3070:12;3032:52;3120:9;3107:23;-1:-1:-1;;;;;3145:6:821;3142:30;3139:50;;;3185:1;3182;3175:12;3139:50;3208:22;;3264:3;3246:16;;;3242:26;3239:46;;;3281:1;3278;3271:12;3239:46;3304:2;-1:-1:-1;3356:2:821;3341:18;;3328:32;3369:28;3328:32;3369:28;:::i;:::-;3416:5;3406:15;;;2903:524;;;;;:::o;3432:180::-;3491:6;3544:2;3532:9;3523:7;3519:23;3515:32;3512:52;;;3560:1;3557;3550:12;3512:52;-1:-1:-1;3583:23:821;;3432:180;-1:-1:-1;3432:180:821:o;3814:163::-;3881:5;3926:3;3917:6;3912:3;3908:16;3904:26;3901:46;;;3943:1;3940;3933:12;3982:127;4043:10;4038:3;4034:20;4031:1;4024:31;4074:4;4071:1;4064:15;4098:4;4095:1;4088:15;4114:631;4178:5;-1:-1:-1;;;;;4249:2:821;4241:6;4238:14;4235:40;;;4255:18;;:::i;:::-;4330:2;4324:9;4298:2;4384:15;;-1:-1:-1;;4380:24:821;;;4406:2;4376:33;4372:42;4360:55;;;4430:18;;;4450:22;;;4427:46;4424:72;;;4476:18;;:::i;:::-;4516:10;4512:2;4505:22;4545:6;4536:15;;4575:6;4567;4560:22;4615:3;4606:6;4601:3;4597:16;4594:25;4591:45;;;4632:1;4629;4622:12;4591:45;4682:6;4677:3;4670:4;4662:6;4658:17;4645:44;4737:1;4730:4;4721:6;4713;4709:19;4705:30;4698:41;;;;4114:631;;;;;:::o;4750:1006::-;4898:6;4906;4914;4922;4930;4938;4991:3;4979:9;4970:7;4966:23;4962:33;4959:53;;;5008:1;5005;4998:12;4959:53;5031:29;5050:9;5031:29;:::i;:::-;5021:39;;5107:2;5096:9;5092:18;5079:32;5069:42;;5130:38;5164:2;5153:9;5149:18;5130:38;:::i;:::-;5120:48;;5215:2;5204:9;5200:18;5187:32;5177:42;;5270:3;5259:9;5255:19;5242:33;-1:-1:-1;;;;;5335:2:821;5327:6;5324:14;5321:34;;;5351:1;5348;5341:12;5321:34;5374:74;5440:7;5431:6;5420:9;5416:22;5374:74;:::i;:::-;5364:84;;5501:3;5490:9;5486:19;5473:33;5457:49;;5531:2;5521:8;5518:16;5515:36;;;5547:1;5544;5537:12;5515:36;-1:-1:-1;5570:24:821;;5625:4;5617:13;;5613:27;-1:-1:-1;5603:55:821;;5654:1;5651;5644:12;5603:55;5677:73;5742:7;5737:2;5724:16;5719:2;5715;5711:11;5677:73;:::i;:::-;5667:83;;;4750:1006;;;;;;;;:::o;5761:450::-;5830:6;5883:2;5871:9;5862:7;5858:23;5854:32;5851:52;;;5899:1;5896;5889:12;5851:52;5939:9;5926:23;-1:-1:-1;;;;;5964:6:821;5961:30;5958:50;;;6004:1;6001;5994:12;5958:50;6027:22;;6080:4;6072:13;;6068:27;-1:-1:-1;6058:55:821;;6109:1;6106;6099:12;6058:55;6132:73;6197:7;6192:2;6179:16;6174:2;6170;6166:11;6132:73;:::i;6216:626::-;6313:6;6321;6374:2;6362:9;6353:7;6349:23;6345:32;6342:52;;;6390:1;6387;6380:12;6342:52;6430:9;6417:23;-1:-1:-1;;;;;6500:2:821;6492:6;6489:14;6486:34;;;6516:1;6513;6506:12;6486:34;6554:6;6543:9;6539:22;6529:32;;6599:7;6592:4;6588:2;6584:13;6580:27;6570:55;;6621:1;6618;6611:12;6570:55;6661:2;6648:16;6687:2;6679:6;6676:14;6673:34;;;6703:1;6700;6693:12;6673:34;6756:7;6751:2;6741:6;6738:1;6734:14;6730:2;6726:23;6722:32;6719:45;6716:65;;;6777:1;6774;6767:12;6716:65;6808:2;6800:11;;;;;6830:6;;-1:-1:-1;6216:626:821;;-1:-1:-1;;;;6216:626:821:o;6847:801::-;7007:4;7036:2;7076;7065:9;7061:18;7106:2;7095:9;7088:21;7129:6;7164;7158:13;7195:6;7187;7180:22;7233:2;7222:9;7218:18;7211:25;;7295:2;7285:6;7282:1;7278:14;7267:9;7263:30;7259:39;7245:53;;7333:2;7325:6;7321:15;7354:1;7364:255;7378:6;7375:1;7372:13;7364:255;;;7471:2;7467:7;7455:9;7447:6;7443:22;7439:36;7434:3;7427:49;7499:40;7532:6;7523;7517:13;7499:40;:::i;:::-;7489:50;-1:-1:-1;7597:12:821;;;;7562:15;;;;7400:1;7393:9;7364:255;;;-1:-1:-1;7636:6:821;;6847:801;-1:-1:-1;;;;;;;6847:801:821:o;7653:156::-;7719:20;;7779:4;7768:16;;7758:27;;7748:55;;7799:1;7796;7789:12;7814:531;7916:6;7924;7932;7940;7948;7956;8009:3;7997:9;7988:7;7984:23;7980:33;7977:53;;;8026:1;8023;8016:12;7977:53;8049:29;8068:9;8049:29;:::i;:::-;8039:39;;8125:2;8114:9;8110:18;8097:32;8087:42;;8176:2;8165:9;8161:18;8148:32;8138:42;;8199:36;8231:2;8220:9;8216:18;8199:36;:::i;:::-;8189:46;;8282:3;8271:9;8267:19;8254:33;8244:43;;8334:3;8323:9;8319:19;8306:33;8296:43;;7814:531;;;;;;;;:::o;8350:606::-;8461:6;8469;8477;8485;8493;8501;8509;8562:3;8550:9;8541:7;8537:23;8533:33;8530:53;;;8579:1;8576;8569:12;8530:53;8602:29;8621:9;8602:29;:::i;:::-;8592:39;;8650:38;8684:2;8673:9;8669:18;8650:38;:::i;:::-;8640:48;;8735:2;8724:9;8720:18;8707:32;8697:42;;8786:2;8775:9;8771:18;8758:32;8748:42;;8809:37;8841:3;8830:9;8826:19;8809:37;:::i;:::-;8799:47;;8893:3;8882:9;8878:19;8865:33;8855:43;;8945:3;8934:9;8930:19;8917:33;8907:43;;8350:606;;;;;;;;;;:::o;8961:769::-;9269:4;9298:3;9328:6;9317:9;9310:25;9371:6;9366:2;9355:9;9351:18;9344:34;9414:6;9409:2;9398:9;9394:18;9387:34;9457:6;9452:2;9441:9;9437:18;9430:34;9501:6;9495:3;9484:9;9480:19;9473:35;9545:6;9539:3;9528:9;9524:19;9517:35;9618:1;9614;9609:3;9605:11;9601:19;9593:6;9589:32;9583:3;9572:9;9568:19;9561:61;9659:2;9653:3;9642:9;9638:19;9631:31;9679:45;9720:2;9709:9;9705:18;9697:6;9679:45;:::i;:::-;9671:53;8961:769;-1:-1:-1;;;;;;;;;;;8961:769:821:o;9735:260::-;9803:6;9811;9864:2;9852:9;9843:7;9839:23;9835:32;9832:52;;;9880:1;9877;9870:12;9832:52;9903:29;9922:9;9903:29;:::i;:::-;9893:39;;9951:38;9985:2;9974:9;9970:18;9951:38;:::i;:::-;9941:48;;9735:260;;;;;:::o;10000:657::-;10130:6;10138;10146;10154;10162;10215:3;10203:9;10194:7;10190:23;10186:33;10183:53;;;10232:1;10229;10222:12;10183:53;10255:29;10274:9;10255:29;:::i;:::-;10245:39;;10331:2;10320:9;10316:18;10303:32;10293:42;;10354:38;10388:2;10377:9;10373:18;10354:38;:::i;:::-;10344:48;;10439:2;10428:9;10424:18;10411:32;10401:42;;10494:3;10483:9;10479:19;10466:33;-1:-1:-1;;;;;10514:6:821;10511:30;10508:50;;;10554:1;10551;10544:12;10508:50;10577:74;10643:7;10634:6;10623:9;10619:22;10577:74;:::i;:::-;10567:84;;;10000:657;;;;;;;;:::o;10662:350::-;10729:6;10737;10790:2;10778:9;10769:7;10765:23;10761:32;10758:52;;;10806:1;10803;10796:12;10758:52;10829:29;10848:9;10829:29;:::i;:::-;10819:39;;10908:2;10897:9;10893:18;10880:32;10952:10;10945:5;10941:22;10934:5;10931:33;10921:61;;10978:1;10975;10968:12;11370:380;11449:1;11445:12;;;;11492;;;11513:61;;11567:4;11559:6;11555:17;11545:27;;11513:61;11620:2;11612:6;11609:14;11589:18;11586:38;11583:161;;11666:10;11661:3;11657:20;11654:1;11647:31;11701:4;11698:1;11691:15;11729:4;11726:1;11719:15;11755:338;11957:2;11939:21;;;11996:2;11976:18;;;11969:30;-1:-1:-1;;;12030:2:821;12015:18;;12008:44;12084:2;12069:18;;11755:338::o;12098:127::-;12159:10;12154:3;12150:20;12147:1;12140:31;12190:4;12187:1;12180:15;12214:4;12211:1;12204:15;12230:125;12295:9;;;12316:10;;;12313:36;;;12329:18;;:::i;12360:355::-;12562:2;12544:21;;;12601:2;12581:18;;;12574:30;12640:33;12635:2;12620:18;;12613:61;12706:2;12691:18;;12360:355::o;13358:522::-;13436:4;13442:6;13502:11;13489:25;13596:2;13592:7;13581:8;13565:14;13561:29;13557:43;13537:18;13533:68;13523:96;;13615:1;13612;13605:12;13523:96;13642:33;;13694:20;;;-1:-1:-1;;;;;;13726:30:821;;13723:50;;;13769:1;13766;13759:12;13723:50;13802:4;13790:17;;-1:-1:-1;13833:14:821;13829:27;;;13819:38;;13816:58;;;13870:1;13867;13860:12;13816:58;13358:522;;;;;:::o;14011:543::-;14113:2;14108:3;14105:11;14102:446;;;14149:1;14173:5;14170:1;14163:16;14217:4;14214:1;14204:18;14287:2;14275:10;14271:19;14268:1;14264:27;14258:4;14254:38;14323:4;14311:10;14308:20;14305:47;;;-1:-1:-1;14346:4:821;14305:47;14401:2;14396:3;14392:12;14389:1;14385:20;14379:4;14375:31;14365:41;;14456:82;14474:2;14467:5;14464:13;14456:82;;;14519:17;;;14500:1;14489:13;14456:82;;14730:1345;14856:3;14850:10;-1:-1:-1;;;;;14875:6:821;14872:30;14869:56;;;14905:18;;:::i;:::-;14934:97;15024:6;14984:38;15016:4;15010:11;14984:38;:::i;:::-;14978:4;14934:97;:::i;:::-;15086:4;;15143:2;15132:14;;15160:1;15155:663;;;;15862:1;15879:6;15876:89;;;-1:-1:-1;15931:19:821;;;15925:26;15876:89;-1:-1:-1;;14687:1:821;14683:11;;;14679:24;14675:29;14665:40;14711:1;14707:11;;;14662:57;15978:81;;15125:944;;15155:663;13958:1;13951:14;;;13995:4;13982:18;;-1:-1:-1;;15191:20:821;;;15309:236;15323:7;15320:1;15317:14;15309:236;;;15412:19;;;15406:26;15391:42;;15504:27;;;;15472:1;15460:14;;;;15339:19;;15309:236;;;15313:3;15573:6;15564:7;15561:19;15558:201;;;15634:19;;;15628:26;-1:-1:-1;;15717:1:821;15713:14;;;15729:3;15709:24;15705:37;15701:42;15686:58;15671:74;;15558:201;-1:-1:-1;;;;;15805:1:821;15789:14;;;15785:22;15772:36;;-1:-1:-1;14730:1345:821:o;16080:267::-;16169:6;16164:3;16157:19;16221:6;16214:5;16207:4;16202:3;16198:14;16185:43;-1:-1:-1;16273:1:821;16248:16;;;16266:4;16244:27;;;16237:38;;;;16329:2;16308:15;;;-1:-1:-1;;16304:29:821;16295:39;;;16291:50;;16080:267::o;16352:1395::-;16571:2;16560:9;16553:21;16623:6;16610:20;16605:2;16594:9;16590:18;16583:48;16692:4;16684:6;16680:17;16667:31;16662:2;16651:9;16647:18;16640:59;16761:2;16753:6;16749:15;16736:29;16730:3;16719:9;16715:19;16708:58;16828:2;16820:6;16816:15;16803:29;16797:3;16786:9;16782:19;16775:58;16895:3;16887:6;16883:16;16870:30;16864:3;16853:9;16849:19;16842:59;16963:3;16955:6;16951:16;16938:30;16932:3;16921:9;16917:19;16910:59;16534:4;16998:36;17029:3;17021:6;17017:16;16998:36;:::i;:::-;-1:-1:-1;;;;;17095:38:821;17053:6;17075:18;;;17068:66;;;;17194:3;17182:16;;17169:30;;17250:14;17246:27;;;-1:-1:-1;;17242:41:821;17218:66;;17208:94;;17298:1;17295;17288:12;17208:94;17432:4;17324:31;;;17421:16;;;;17378:19;-1:-1:-1;;;;;17449:30:821;;17446:50;;;17492:1;17489;17482:12;17446:50;17541:6;17525:14;17521:27;17512:7;17508:41;17505:61;;;17562:1;17559;17552:12;17505:61;17603:2;17597:3;17586:9;17582:19;17575:31;17623:64;17682:3;17671:9;17667:19;17659:6;17650:7;17623:64;:::i;:::-;17615:72;;;;;17696:45;17735:4;17724:9;17720:20;17712:6;1485:13;1478:21;1466:34;;1415:91;18099:128;18166:9;;;18187:11;;;18184:37;;;18201:18;;:::i;18232:127::-;18293:10;18288:3;18284:20;18281:1;18274:31;18324:4;18321:1;18314:15;18348:4;18345:1;18338:15;19296:352;19507:6;19499;19494:3;19481:33;19602:2;19573:15;;;;-1:-1:-1;;;;;;19569:45:821;19533:16;;19558:57;;;19639:2;19631:11;;19296:352;-1:-1:-1;19296:352:821:o;22100:545::-;22193:4;22199:6;22259:11;22246:25;22353:2;22349:7;22338:8;22322:14;22318:29;22314:43;22294:18;22290:68;22280:96;;22372:1;22369;22362:12;22280:96;22399:33;;22451:20;;;-1:-1:-1;;;;;;22483:30:821;;22480:50;;;22526:1;22523;22516:12;22480:50;22559:4;22547:17;;-1:-1:-1;22610:1:821;22606:14;;;22590;22586:35;22576:46;;22573:66;;;22635:1;22632;22625:12;28434:168;28507:9;;;28538;;28555:15;;;28549:22;;28535:37;28525:71;;28576:18;;:::i;28607:217::-;28647:1;28673;28663:132;;28717:10;28712:3;28708:20;28705:1;28698:31;28752:4;28749:1;28742:15;28780:4;28777:1;28770:15;28663:132;-1:-1:-1;28809:9:821;;28607:217::o;29520:383::-;29717:2;29706:9;29699:21;29680:4;29743:45;29784:2;29773:9;29769:18;29761:6;29743:45;:::i;:::-;29836:9;29828:6;29824:22;29819:2;29808:9;29804:18;29797:50;29864:33;29890:6;29882;29864:33;:::i;:::-;29856:41;29520:383;-1:-1:-1;;;;;29520:383:821:o;31635:287::-;31764:3;31802:6;31796:13;31818:66;31877:6;31872:3;31865:4;31857:6;31853:17;31818:66;:::i;:::-;31900:16;;;;;31635:287;-1:-1:-1;;31635:287:821:o;32330:127::-;32391:10;32386:3;32382:20;32379:1;32372:31;32422:4;32419:1;32412:15;32446:4;32443:1;32436:15;35930:245;35997:6;36050:2;36038:9;36029:7;36025:23;36021:32;36018:52;;;36066:1;36063;36056:12;36018:52;36098:9;36092:16;36117:28;36139:5;36117:28;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "48074": [
        {
          "start": 2025,
          "length": 32
        }
      ],
      "48076": [
        {
          "start": 1983,
          "length": 32
        }
      ],
      "48078": [
        {
          "start": 1941,
          "length": 32
        }
      ],
      "48083": [
        {
          "start": 4409,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DOMAIN_SEPARATOR()": "3644e515",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "checkpoints(address,uint32)": "f1127ed8",
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": "84bb1e42",
    "claimCondition()": "d637ed59",
    "contractURI()": "e8a3d485",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "delegate(address)": "5c19a95c",
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "c3cda520",
    "delegates(address)": "587cde1e",
    "getPastTotalSupply(uint256)": "8e539e8c",
    "getPastVotes(address,uint256)": "3a46b1a8",
    "getSupplyClaimedByWallet(address)": "35b65e1f",
    "getVotes(address)": "9ab24eb0",
    "increaseAllowance(address,uint256)": "39509351",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nonces(address)": "7ecebe00",
    "numCheckpoints(address)": "6fcfff45",
    "owner()": "8da5cb5b",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
    "primarySaleRecipient()": "079fe40e",
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": "426cfaf3",
    "setContractURI(string)": "938e3d7b",
    "setOwner(address)": "13af4035",
    "setPrimarySaleRecipient(address)": "6f4f2837",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": "eec8897c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_primarySaleRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getSupplyClaimedByWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySaleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"_condition\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setPrimarySaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\"},\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"},\"PrimarySaleRecipientUpdated(address)\":{\"details\":\"Emitted when a new sale recipient is set.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Caller should own the `_amount` of tokens.\",\"params\":{\"_amount\":\"The number of tokens to burn.\"}},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"details\":\"Lets an account claim tokens.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getSupplyClaimedByWallet(address)\":{\"details\":\"Returns the supply claimed by claimer for active conditionId.\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"primarySaleRecipient()\":{\"details\":\"Returns primary sale recipient address.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"details\":\"Lets a contract admin set claim conditions.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setPrimarySaleRecipient(address)\":{\"details\":\"Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\",\"params\":{\"_saleRecipient\":\"Address to be set as new recipient of primary sales.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))\":{\"details\":\"Checks a request to claim NFTs against the active claim condition's criteria.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed via `claim`.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner a given amount of their tokens.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setPrimarySaleRecipient(address)\":{\"notice\":\"Updates primary sale recipient.\"}},\"notice\":\"BASE:      ERC20Votes      EXTENSION: DropSinglePhase  The `ERC20Drop` contract uses the `DropSinglePhase` extensions, along with `ERC20Votes`.  It implements the ERC20 standard, along with the following additions to standard ERC20 logic:      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by                             presenting a message signed by the account.  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism tokens. It lets  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC20DropVote.sol\":\"ERC20DropVote\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC20DropVote.sol\":{\"keccak256\":\"0x559c06bc3a2d9b1ef92685f0aa615ebde924c3684399838218761d555ee58505\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://529d0c823ae65b17856385c6ec55576242eb6d9456b77fcb2804890f6dc3de54\",\"dweb:/ipfs/QmQCFnyGRn6BQQRCXmQEVrZymVFrEfm4h79BC4TZor7oni\"]},\"contracts/eip/interface/IERC20.sol\":{\"keccak256\":\"0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a08cdc1bfc92ed80fc6686fb51a018b896ee862ac9fa1a1599b3fa0198760ce8\",\"dweb:/ipfs/QmTxqXNnbht1GfzkTAKpQnpZdEADS9YXZdE8Cdr6cSJrNP\"]},\"contracts/eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"contracts/eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DropSinglePhase.sol\":{\"keccak256\":\"0xf44716630a3fd79499f1fee77324c28068f29e518edd784f548c65195029cd4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0c54dc4d5e409cbf6870d654b5e90e7ed4e462ab421a578c7042f85c47cd784b\",\"dweb:/ipfs/QmTMWwiYP36wEMbQRJ6m8rmLRymVJCKHhHuwxpHqnhpBVR\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e\",\"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/PrimarySale.sol\":{\"keccak256\":\"0x18c6ef2ca61c26a6885529abf17cbb668fa8cbc21d49337dfb778b9431fc58eb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://46beec7099679394ef4e35541056cc3049570f26fb7c30ac1811096ad4a7dab8\",\"dweb:/ipfs/QmTdLQbxxvVpdJk8bgAjATKP9tW1qvSwzmdsyXv3EBZiEE\"]},\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDropSinglePhase.sol\":{\"keccak256\":\"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9\",\"dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IPrimarySale.sol\":{\"keccak256\":\"0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869\",\"dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF\"]},\"contracts/external-deps/openzeppelin/governance/utils/IVotes.sol\":{\"keccak256\":\"0x0e774440198e74443c22645f90a9cc505ae55a055c4527ca9eae5db1fc1ab110\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7431e8b27ceeb7d60e8d61e9a9dfb7f721d8ae9984dbd3fcd98186741009749a\",\"dweb:/ipfs/QmWUkeWPPb95qedSpHWxqUVaaH99e2wcesPbEvd6oBCQhB\"]},\"contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x541806757302ea976b52d48ff7df59f50ec72c10684254e4f17c181f46fd381f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b84a81fe700e99fc4741c535a84b008481160ec152da34d8ca49a99ea3a9396b\",\"dweb:/ipfs/Qmb3nCYyECbyFiobDHRNDop3qTYoGNt7FusxXpQNWj5dDn\"]},\"contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a\",\"dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn\"]},\"contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol\":{\"keccak256\":\"0x7c62135b4b377f5d5bbbceb1e850e2b6a99f334ea1005116eef207db2f3f9ec1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7bdb28a4dd8b3d8aeb0537c906c7ff60a5979dadd14103fa3662e3e511e257d\",\"dweb:/ipfs/QmNd6D8ohBbXNTqET38aAFxyQKkJUu5PQHfFQvN833N1fn\"]},\"contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xda67ad8d28cb66bbef1831a14d3506e3d0ac8c8446990a63474f4e56037f1a58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cda94d0193ca3e3cf4ac4d561c0c668dffc3e9b2c55c5454e9b03a12fd7141fb\",\"dweb:/ipfs/Qmbaw5cPuCmqE7hy8CpM3ibFC77TMWnH4jGDcWduvdNZaA\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x2f1ee59fbdefde38381074fcd365a919dbd9ab6d6240e07b1753961f8e6fcd3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://108be415a1fe17915fa42ba5eb6cdf812b25d88b299c8dc05721241078871ebe\",\"dweb:/ipfs/Qmc8AJ6jfL3jTi597Z86hkQYEX2FaP66s1tWs9uuEyTRPn\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]},\"contracts/external-deps/openzeppelin/utils/math/Math.sol\":{\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6\",\"dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr\"]},\"contracts/external-deps/openzeppelin/utils/math/SafeCast.sol\":{\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1\",\"dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E\"]},\"contracts/infra/interface/IWETH.sol\":{\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1\",\"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU\"]},\"contracts/lib/Address.sol\":{\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5\",\"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn\"]},\"contracts/lib/CurrencyTransferLib.sol\":{\"keccak256\":\"0x98c7ce207342926b3145a95c1f0781dec816ac831fc35256dd2a8787b8f161ac\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0b42e9253d38d4051a817dd3387c388daea5e99e378a7e0f07fbe98d2bf4e006\",\"dweb:/ipfs/QmQ1ZHDwYrAMtYe39HeCFSZbuvDAsVJAEozUCk3xSWLHZ1\"]},\"contracts/lib/MerkleProof.sol\":{\"keccak256\":\"0x00d989813c0653bd2f45623a73d805512c9070c7f0e8ad30838954dcf6a5acad\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://31de8046c697ed04df40a33a6b6087dedd41a85ef8c79bf7712507d5b9839732\",\"dweb:/ipfs/QmSXSeDCbLt1hwEcZyutFrNLPBbBQm1PKiE89hp5xLQ2wU\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_primarySaleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fromDelegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "toDelegate",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "DelegateChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "previousBalance",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DelegateVotesChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PrimarySaleRecipientUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "pos",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkpoints",
          "outputs": [
            {
              "internalType": "struct ERC20Votes.Checkpoint",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlock",
                  "type": "uint32"
                },
                {
                  "internalType": "uint224",
                  "name": "votes",
                  "type": "uint224"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimCondition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegateBySig"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "delegates",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastTotalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupplyClaimedByWallet",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "nonces",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "numCheckpoints",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permit"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "primarySaleRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "_condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "_resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_saleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPrimarySaleRecipient"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isOverride",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Caller should own the `_amount` of tokens.",
            "params": {
              "_amount": "The number of tokens to burn."
            }
          },
          "checkpoints(address,uint32)": {
            "details": "Get the `pos`-th checkpoint for `account`."
          },
          "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "details": "Lets an account claim tokens."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "delegate(address)": {
            "details": "Delegate votes from the sender to `delegatee`."
          },
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "Delegates votes from signer to `delegatee`"
          },
          "delegates(address)": {
            "details": "Get the address `account` is currently delegating to."
          },
          "getPastTotalSupply(uint256)": {
            "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
          },
          "getPastVotes(address,uint256)": {
            "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
          },
          "getSupplyClaimedByWallet(address)": {
            "details": "Returns the supply claimed by claimer for active conditionId."
          },
          "getVotes(address)": {
            "details": "Gets the current votes balance for `account`"
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "nonces(address)": {
            "details": "See {IERC20Permit-nonces}."
          },
          "numCheckpoints(address)": {
            "details": "Get number of checkpoints for `account`."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "See {IERC20Permit-permit}."
          },
          "primarySaleRecipient()": {
            "details": "Returns primary sale recipient address."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "details": "Lets a contract admin set claim conditions."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setPrimarySaleRecipient(address)": {
            "details": "Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.",
            "params": {
              "_saleRecipient": "Address to be set as new recipient of primary sales."
            }
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": {
            "details": "Checks a request to claim NFTs against the active claim condition's criteria."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner a given amount of their tokens."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setPrimarySaleRecipient(address)": {
            "notice": "Updates primary sale recipient."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "lib/sstore2/=lib/dynamic-contracts/lib/sstore2/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC20DropVote.sol": "ERC20DropVote"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC20DropVote.sol": {
        "keccak256": "0x559c06bc3a2d9b1ef92685f0aa615ebde924c3684399838218761d555ee58505",
        "urls": [
          "bzz-raw://529d0c823ae65b17856385c6ec55576242eb6d9456b77fcb2804890f6dc3de54",
          "dweb:/ipfs/QmQCFnyGRn6BQQRCXmQEVrZymVFrEfm4h79BC4TZor7oni"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20.sol": {
        "keccak256": "0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1",
        "urls": [
          "bzz-raw://a08cdc1bfc92ed80fc6686fb51a018b896ee862ac9fa1a1599b3fa0198760ce8",
          "dweb:/ipfs/QmTxqXNnbht1GfzkTAKpQnpZdEADS9YXZdE8Cdr6cSJrNP"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Metadata.sol": {
        "keccak256": "0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734",
        "urls": [
          "bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65",
          "dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Permit.sol": {
        "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
        "urls": [
          "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
          "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
        ],
        "license": "MIT"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DropSinglePhase.sol": {
        "keccak256": "0xf44716630a3fd79499f1fee77324c28068f29e518edd784f548c65195029cd4f",
        "urls": [
          "bzz-raw://0c54dc4d5e409cbf6870d654b5e90e7ed4e462ab421a578c7042f85c47cd784b",
          "dweb:/ipfs/QmTMWwiYP36wEMbQRJ6m8rmLRymVJCKHhHuwxpHqnhpBVR"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
        "urls": [
          "bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
          "dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/PrimarySale.sol": {
        "keccak256": "0x18c6ef2ca61c26a6885529abf17cbb668fa8cbc21d49337dfb778b9431fc58eb",
        "urls": [
          "bzz-raw://46beec7099679394ef4e35541056cc3049570f26fb7c30ac1811096ad4a7dab8",
          "dweb:/ipfs/QmTdLQbxxvVpdJk8bgAjATKP9tW1qvSwzmdsyXv3EBZiEE"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDropSinglePhase.sol": {
        "keccak256": "0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36",
        "urls": [
          "bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9",
          "dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IPrimarySale.sol": {
        "keccak256": "0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004",
        "urls": [
          "bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869",
          "dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/governance/utils/IVotes.sol": {
        "keccak256": "0x0e774440198e74443c22645f90a9cc505ae55a055c4527ca9eae5db1fc1ab110",
        "urls": [
          "bzz-raw://7431e8b27ceeb7d60e8d61e9a9dfb7f721d8ae9984dbd3fcd98186741009749a",
          "dweb:/ipfs/QmWUkeWPPb95qedSpHWxqUVaaH99e2wcesPbEvd6oBCQhB"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol": {
        "keccak256": "0x541806757302ea976b52d48ff7df59f50ec72c10684254e4f17c181f46fd381f",
        "urls": [
          "bzz-raw://b84a81fe700e99fc4741c535a84b008481160ec152da34d8ca49a99ea3a9396b",
          "dweb:/ipfs/Qmb3nCYyECbyFiobDHRNDop3qTYoGNt7FusxXpQNWj5dDn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol": {
        "keccak256": "0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c",
        "urls": [
          "bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a",
          "dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol": {
        "keccak256": "0x7c62135b4b377f5d5bbbceb1e850e2b6a99f334ea1005116eef207db2f3f9ec1",
        "urls": [
          "bzz-raw://f7bdb28a4dd8b3d8aeb0537c906c7ff60a5979dadd14103fa3662e3e511e257d",
          "dweb:/ipfs/QmNd6D8ohBbXNTqET38aAFxyQKkJUu5PQHfFQvN833N1fn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0xda67ad8d28cb66bbef1831a14d3506e3d0ac8c8446990a63474f4e56037f1a58",
        "urls": [
          "bzz-raw://cda94d0193ca3e3cf4ac4d561c0c668dffc3e9b2c55c5454e9b03a12fd7141fb",
          "dweb:/ipfs/Qmbaw5cPuCmqE7hy8CpM3ibFC77TMWnH4jGDcWduvdNZaA"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Counters.sol": {
        "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
        "urls": [
          "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
          "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol": {
        "keccak256": "0x2f1ee59fbdefde38381074fcd365a919dbd9ab6d6240e07b1753961f8e6fcd3b",
        "urls": [
          "bzz-raw://108be415a1fe17915fa42ba5eb6cdf812b25d88b299c8dc05721241078871ebe",
          "dweb:/ipfs/Qmc8AJ6jfL3jTi597Z86hkQYEX2FaP66s1tWs9uuEyTRPn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol": {
        "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
        "urls": [
          "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
          "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/math/Math.sol": {
        "keccak256": "0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2",
        "urls": [
          "bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6",
          "dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/math/SafeCast.sol": {
        "keccak256": "0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7",
        "urls": [
          "bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1",
          "dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E"
        ],
        "license": "MIT"
      },
      "contracts/infra/interface/IWETH.sol": {
        "keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
        "urls": [
          "bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
          "dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/Address.sol": {
        "keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
        "urls": [
          "bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
          "dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/CurrencyTransferLib.sol": {
        "keccak256": "0x98c7ce207342926b3145a95c1f0781dec816ac831fc35256dd2a8787b8f161ac",
        "urls": [
          "bzz-raw://0b42e9253d38d4051a817dd3387c388daea5e99e378a7e0f07fbe98d2bf4e006",
          "dweb:/ipfs/QmQ1ZHDwYrAMtYe39HeCFSZbuvDAsVJAEozUCk3xSWLHZ1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/MerkleProof.sol": {
        "keccak256": "0x00d989813c0653bd2f45623a73d805512c9070c7f0e8ad30838954dcf6a5acad",
        "urls": [
          "bzz-raw://31de8046c697ed04df40a33a6b6087dedd41a85ef8c79bf7712507d5b9839732",
          "dweb:/ipfs/QmSXSeDCbLt1hwEcZyutFrNLPBbBQm1PKiE89hp5xLQ2wU"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/Strings.sol": {
        "keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
        "urls": [
          "bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
          "dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
        ],
        "license": "Apache-2.0"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [
          "bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
          "dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC20DropVote.sol",
    "id": 3103,
    "exportedSymbols": {
      "Address": [
        64760
      ],
      "Context": [
        49279
      ],
      "ContractMetadata": [
        18093
      ],
      "Counters": [
        49353
      ],
      "CurrencyTransferLib": [
        65175
      ],
      "DropSinglePhase": [
        20064
      ],
      "ECDSA": [
        50541
      ],
      "EIP712": [
        50695
      ],
      "ERC20": [
        48051
      ],
      "ERC20DropVote": [
        3102
      ],
      "ERC20Permit": [
        48293
      ],
      "ERC20Votes": [
        48940
      ],
      "IClaimCondition": [
        32931
      ],
      "IContractMetadata": [
        33084
      ],
      "IDropSinglePhase": [
        33357
      ],
      "IERC20": [
        14015
      ],
      "IERC20Metadata": [
        14034
      ],
      "IERC20Permit": [
        14070
      ],
      "IMulticall": [
        33577
      ],
      "IOwnable": [
        33834
      ],
      "IPrimarySale": [
        33997
      ],
      "IVotes": [
        46179
      ],
      "Math": [
        50783
      ],
      "MerkleProof": [
        65274
      ],
      "Multicall": [
        21206
      ],
      "Ownable": [
        21764
      ],
      "PrimarySale": [
        22703
      ],
      "SafeCast": [
        51176
      ],
      "Strings": [
        66084
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:5158:7",
    "nodes": [
      {
        "id": 2836,
        "nodeType": "PragmaDirective",
        "src": "39:23:7",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 2837,
        "nodeType": "ImportDirective",
        "src": "86:77:7",
        "nodes": [],
        "absolutePath": "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol",
        "file": "../external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3103,
        "sourceUnit": 48941,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2838,
        "nodeType": "ImportDirective",
        "src": "165:43:7",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3103,
        "sourceUnit": 18094,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2839,
        "nodeType": "ImportDirective",
        "src": "209:36:7",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3103,
        "sourceUnit": 21207,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2840,
        "nodeType": "ImportDirective",
        "src": "246:34:7",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3103,
        "sourceUnit": 21765,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2841,
        "nodeType": "ImportDirective",
        "src": "281:38:7",
        "nodes": [],
        "absolutePath": "contracts/extension/PrimarySale.sol",
        "file": "../extension/PrimarySale.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3103,
        "sourceUnit": 22704,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2842,
        "nodeType": "ImportDirective",
        "src": "320:42:7",
        "nodes": [],
        "absolutePath": "contracts/extension/DropSinglePhase.sol",
        "file": "../extension/DropSinglePhase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3103,
        "sourceUnit": 20065,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2844,
        "nodeType": "ImportDirective",
        "src": "364:69:7",
        "nodes": [],
        "absolutePath": "contracts/lib/CurrencyTransferLib.sol",
        "file": "../lib/CurrencyTransferLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3103,
        "sourceUnit": 65176,
        "symbolAliases": [
          {
            "foreign": {
              "id": 2843,
              "name": "CurrencyTransferLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 65175,
              "src": "373:19:7",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 3102,
        "nodeType": "ContractDefinition",
        "src": "1334:3862:7",
        "nodes": [
          {
            "id": 2881,
            "nodeType": "FunctionDefinition",
            "src": "1624:278:7",
            "nodes": [],
            "body": {
              "id": 2880,
              "nodeType": "Block",
              "src": "1800:102:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2873,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2859,
                        "src": "1822:13:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2872,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21757,
                      "src": "1810:11:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2874,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1810:26:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2875,
                  "nodeType": "ExpressionStatement",
                  "src": "1810:26:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2877,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2865,
                        "src": "1873:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2876,
                      "name": "_setupPrimarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22696,
                      "src": "1846:26:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2878,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1846:49:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2879,
                  "nodeType": "ExpressionStatement",
                  "src": "1846:49:7"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 2868,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2861,
                    "src": "1784:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 2869,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2863,
                    "src": "1791:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 2870,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 2867,
                  "name": "ERC20Permit",
                  "nameLocations": [
                    "1772:11:7"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48293,
                  "src": "1772:11:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "1772:27:7"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 2866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2859,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1653:13:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "1645:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2858,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1645:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2861,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1690:5:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "1676:19:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2860,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1676:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2863,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1719:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "1705:21:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2862,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1705:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2865,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "1744:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "1736:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2864,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1736:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1635:136:7"
            },
            "returnParameters": {
              "id": 2871,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1800:0:7"
            },
            "scope": 3102,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2904,
            "nodeType": "FunctionDefinition",
            "src": "2304:164:7",
            "nodes": [],
            "body": {
              "id": 2903,
              "nodeType": "Block",
              "src": "2352:116:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2893,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2889,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "2380:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2890,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2384:6:7",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2380:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2888,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 47562,
                            "src": "2370:9:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 2891,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2370:21:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2892,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2884,
                          "src": "2395:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2370:32:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682062616c616e6365",
                        "id": 2894,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2404:20:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        },
                        "value": "not enough balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        }
                      ],
                      "id": 2887,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2362:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2895,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2362:63:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2896,
                  "nodeType": "ExpressionStatement",
                  "src": "2362:63:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2898,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2441:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2899,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2445:6:7",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2441:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2900,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2884,
                        "src": "2453:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2897,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        48677
                      ],
                      "referencedDeclaration": 48677,
                      "src": "2435:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2901,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2435:26:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2902,
                  "nodeType": "ExpressionStatement",
                  "src": "2435:26:7"
                }
              ]
            },
            "documentation": {
              "id": 2882,
              "nodeType": "StructuredDocumentation",
              "src": "2087:212:7",
              "text": "  @notice          Lets an owner a given amount of their tokens.\n  @dev             Caller should own the `_amount` of tokens.\n  @param _amount   The number of tokens to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "2313:4:7",
            "parameters": {
              "id": 2885,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2884,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2326:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2904,
                  "src": "2318:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2318:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2317:17:7"
            },
            "returnParameters": {
              "id": 2886,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2352:0:7"
            },
            "scope": 3102,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 3000,
            "nodeType": "FunctionDefinition",
            "src": "2757:925:7",
            "nodes": [],
            "body": {
              "id": 2999,
              "nodeType": "Block",
              "src": "2951:731:7",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2919,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2917,
                      "name": "_pricePerToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2913,
                      "src": "2965:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2918,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2983:1:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2965:19:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2930,
                  "nodeType": "IfStatement",
                  "src": "2961:103:7",
                  "trueBody": {
                    "id": 2929,
                    "nodeType": "Block",
                    "src": "2986:78:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2924,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2921,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "3008:3:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2922,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3012:5:7",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "3008:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2923,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3021:1:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "3008:14:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "2156616c7565",
                              "id": 2925,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3024:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              },
                              "value": "!Value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              }
                            ],
                            "id": 2920,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3000:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2926,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3000:33:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2927,
                        "nodeType": "ExpressionStatement",
                        "src": "3000:33:7"
                      },
                      {
                        "functionReturnParameters": 2916,
                        "id": 2928,
                        "nodeType": "Return",
                        "src": "3047:7:7"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    2932
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2932,
                      "mutability": "mutable",
                      "name": "totalPrice",
                      "nameLocation": "3082:10:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 2999,
                      "src": "3074:18:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2931,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3074:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2939,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2938,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2935,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2933,
                            "name": "_quantityToClaim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2909,
                            "src": "3096:16:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 2934,
                            "name": "_pricePerToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2913,
                            "src": "3115:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3096:33:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2936,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3095:35:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 2937,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3133:7:7",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      },
                      "value": "1"
                    },
                    "src": "3095:45:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3074:66:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2943,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2941,
                          "name": "totalPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2932,
                          "src": "3158:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2942,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3171:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3158:14:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7175616e7469747920746f6f206c6f77",
                        "id": 2944,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3174:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        },
                        "value": "quantity too low"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        }
                      ],
                      "id": 2940,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3150:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3150:43:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2946,
                  "nodeType": "ExpressionStatement",
                  "src": "3150:43:7"
                },
                {
                  "assignments": [
                    2948
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2948,
                      "mutability": "mutable",
                      "name": "validMsgValue",
                      "nameLocation": "3209:13:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 2999,
                      "src": "3204:18:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 2947,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3204:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2949,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3204:18:7"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2953,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2950,
                      "name": "_currency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2911,
                      "src": "3236:9:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 2951,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65175,
                        "src": "3249:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$65175_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 2952,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "3269:12:7",
                      "memberName": "NATIVE_TOKEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64943,
                      "src": "3249:32:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3236:45:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 2969,
                    "nodeType": "Block",
                    "src": "3353:55:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 2967,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2962,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2948,
                            "src": "3367:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2966,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2963,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3383:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2964,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3387:5:7",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "3383:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3396:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3383:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3367:30:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2968,
                        "nodeType": "ExpressionStatement",
                        "src": "3367:30:7"
                      }
                    ]
                  },
                  "id": 2970,
                  "nodeType": "IfStatement",
                  "src": "3232:176:7",
                  "trueBody": {
                    "id": 2961,
                    "nodeType": "Block",
                    "src": "3283:64:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 2959,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2954,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2948,
                            "src": "3297:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2958,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2955,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3313:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2956,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3317:5:7",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "3313:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 2957,
                              "name": "totalPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2932,
                              "src": "3326:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3313:23:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3297:39:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2960,
                        "nodeType": "ExpressionStatement",
                        "src": "3297:39:7"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2972,
                        "name": "validMsgValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2948,
                        "src": "3425:13:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c6964206d73672076616c7565",
                        "id": 2973,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3440:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        },
                        "value": "Invalid msg value"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        }
                      ],
                      "id": 2971,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3417:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2974,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3417:43:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2975,
                  "nodeType": "ExpressionStatement",
                  "src": "3417:43:7"
                },
                {
                  "assignments": [
                    2977
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2977,
                      "mutability": "mutable",
                      "name": "saleRecipient",
                      "nameLocation": "3479:13:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 2999,
                      "src": "3471:21:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2976,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3471:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2988,
                  "initialValue": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 2983,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2978,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2907,
                        "src": "3495:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 2981,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3528:1:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 2980,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3520:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 2979,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3520:7:7",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2982,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3520:10:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3495:35:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 2986,
                      "name": "_primarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2907,
                      "src": "3558:21:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 2987,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "3495:84:7",
                    "trueExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2984,
                        "name": "primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22648,
                        "src": "3533:20:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2985,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3533:22:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3471:108:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2992,
                        "name": "_currency",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2911,
                        "src": "3626:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 2993,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3637:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2994,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3641:6:7",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3637:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2995,
                        "name": "saleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2977,
                        "src": "3649:13:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2996,
                        "name": "totalPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2932,
                        "src": "3664:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 2989,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65175,
                        "src": "3589:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$65175_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 2991,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3609:16:7",
                      "memberName": "transferCurrency",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64980,
                      "src": "3589:36:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256)"
                      }
                    },
                    "id": 2997,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3589:86:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2998,
                  "nodeType": "ExpressionStatement",
                  "src": "3589:86:7"
                }
              ]
            },
            "baseFunctions": [
              20048
            ],
            "documentation": {
              "id": 2905,
              "nodeType": "StructuredDocumentation",
              "src": "2671:81:7",
              "text": "@dev Collects and distributes the primary sale value of tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_collectPriceOnClaim",
            "nameLocation": "2766:20:7",
            "overrides": {
              "id": 2915,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2942:8:7"
            },
            "parameters": {
              "id": 2914,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2907,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "2804:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3000,
                  "src": "2796:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2906,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2796:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2909,
                  "mutability": "mutable",
                  "name": "_quantityToClaim",
                  "nameLocation": "2843:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3000,
                  "src": "2835:24:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2908,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2835:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2911,
                  "mutability": "mutable",
                  "name": "_currency",
                  "nameLocation": "2877:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3000,
                  "src": "2869:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2910,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2869:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2913,
                  "mutability": "mutable",
                  "name": "_pricePerToken",
                  "nameLocation": "2904:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3000,
                  "src": "2896:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2912,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2896:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2786:138:7"
            },
            "returnParameters": {
              "id": 2916,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2951:0:7"
            },
            "scope": 3102,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3019,
            "nodeType": "FunctionDefinition",
            "src": "3737:210:7",
            "nodes": [],
            "body": {
              "id": 3018,
              "nodeType": "Block",
              "src": "3879:68:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3012,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3003,
                        "src": "3895:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3013,
                        "name": "_quantityBeingClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3005,
                        "src": "3900:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3011,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        48654
                      ],
                      "referencedDeclaration": 48654,
                      "src": "3889:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3014,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3889:33:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3015,
                  "nodeType": "ExpressionStatement",
                  "src": "3889:33:7"
                },
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 3016,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3939:1:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 3010,
                  "id": 3017,
                  "nodeType": "Return",
                  "src": "3932:8:7"
                }
              ]
            },
            "baseFunctions": [
              20058
            ],
            "documentation": {
              "id": 3001,
              "nodeType": "StructuredDocumentation",
              "src": "3688:44:7",
              "text": "@dev Transfers the tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "3746:22:7",
            "overrides": {
              "id": 3007,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3852:8:7"
            },
            "parameters": {
              "id": 3006,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3003,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "3786:3:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3019,
                  "src": "3778:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3002,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3778:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3005,
                  "mutability": "mutable",
                  "name": "_quantityBeingClaimed",
                  "nameLocation": "3807:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3019,
                  "src": "3799:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3004,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3799:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3768:66:7"
            },
            "returnParameters": {
              "id": 3010,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3009,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3019,
                  "src": "3870:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3008,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3870:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3869:9:7"
            },
            "scope": 3102,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3033,
            "nodeType": "FunctionDefinition",
            "src": "4042:125:7",
            "nodes": [],
            "body": {
              "id": 3032,
              "nodeType": "Block",
              "src": "4122:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3030,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3026,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4139:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3027,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4143:6:7",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4139:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3028,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4153:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3029,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4153:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4139:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3025,
                  "id": 3031,
                  "nodeType": "Return",
                  "src": "4132:28:7"
                }
              ]
            },
            "baseFunctions": [
              20063
            ],
            "documentation": {
              "id": 3020,
              "nodeType": "StructuredDocumentation",
              "src": "3953:84:7",
              "text": "@dev Checks whether platform fee info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetClaimConditions",
            "nameLocation": "4051:22:7",
            "overrides": {
              "id": 3022,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4098:8:7"
            },
            "parameters": {
              "id": 3021,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4073:2:7"
            },
            "returnParameters": {
              "id": 3025,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3024,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3033,
                  "src": "4116:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3023,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4116:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4115:6:7"
            },
            "scope": 3102,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3047,
            "nodeType": "FunctionDefinition",
            "src": "4263:121:7",
            "nodes": [],
            "body": {
              "id": 3046,
              "nodeType": "Block",
              "src": "4339:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3044,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3040,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4356:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3041,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4360:6:7",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4356:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3042,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4370:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3043,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4370:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4356:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3039,
                  "id": 3045,
                  "nodeType": "Return",
                  "src": "4349:28:7"
                }
              ]
            },
            "baseFunctions": [
              18092
            ],
            "documentation": {
              "id": 3034,
              "nodeType": "StructuredDocumentation",
              "src": "4173:85:7",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "4272:18:7",
            "overrides": {
              "id": 3036,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4315:8:7"
            },
            "parameters": {
              "id": 3035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4290:2:7"
            },
            "returnParameters": {
              "id": 3039,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3038,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3047,
                  "src": "4333:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3037,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4333:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4332:6:7"
            },
            "scope": 3102,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3060,
            "nodeType": "FunctionDefinition",
            "src": "4472:102:7",
            "nodes": [],
            "body": {
              "id": 3059,
              "nodeType": "Block",
              "src": "4529:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3057,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3053,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4546:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3054,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4550:6:7",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4546:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3055,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4560:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3056,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4560:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4546:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3052,
                  "id": 3058,
                  "nodeType": "Return",
                  "src": "4539:28:7"
                }
              ]
            },
            "documentation": {
              "id": 3048,
              "nodeType": "StructuredDocumentation",
              "src": "4390:77:7",
              "text": "@dev Returns whether tokens can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "4481:8:7",
            "parameters": {
              "id": 3049,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4489:2:7"
            },
            "returnParameters": {
              "id": 3052,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3051,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3060,
                  "src": "4523:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3050,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4523:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4522:6:7"
            },
            "scope": 3102,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3074,
            "nodeType": "FunctionDefinition",
            "src": "4658:115:7",
            "nodes": [],
            "body": {
              "id": 3073,
              "nodeType": "Block",
              "src": "4728:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3071,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3067,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4745:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3068,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4749:6:7",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4745:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3069,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4759:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3070,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4759:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4745:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3066,
                  "id": 3072,
                  "nodeType": "Return",
                  "src": "4738:28:7"
                }
              ]
            },
            "baseFunctions": [
              21763
            ],
            "documentation": {
              "id": 3061,
              "nodeType": "StructuredDocumentation",
              "src": "4580:73:7",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "4667:12:7",
            "overrides": {
              "id": 3063,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4704:8:7"
            },
            "parameters": {
              "id": 3062,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4679:2:7"
            },
            "returnParameters": {
              "id": 3066,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3065,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3074,
                  "src": "4722:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3064,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4722:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4721:6:7"
            },
            "scope": 3102,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3088,
            "nodeType": "FunctionDefinition",
            "src": "4874:130:7",
            "nodes": [],
            "body": {
              "id": 3087,
              "nodeType": "Block",
              "src": "4959:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3085,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3081,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4976:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3082,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4980:6:7",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4976:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3083,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4990:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3084,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4990:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4976:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3080,
                  "id": 3086,
                  "nodeType": "Return",
                  "src": "4969:28:7"
                }
              ]
            },
            "baseFunctions": [
              22702
            ],
            "documentation": {
              "id": 3075,
              "nodeType": "StructuredDocumentation",
              "src": "4779:90:7",
              "text": "@dev Returns whether primary sale recipient can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetPrimarySaleRecipient",
            "nameLocation": "4883:27:7",
            "overrides": {
              "id": 3077,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4935:8:7"
            },
            "parameters": {
              "id": 3076,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4910:2:7"
            },
            "returnParameters": {
              "id": 3080,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3079,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3088,
                  "src": "4953:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3078,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4953:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4952:6:7"
            },
            "scope": 3102,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3101,
            "nodeType": "FunctionDefinition",
            "src": "5077:117:7",
            "nodes": [],
            "body": {
              "id": 3100,
              "nodeType": "Block",
              "src": "5160:34:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 3097,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "5177:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 3098,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "5181:6:7",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "5177:10:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 3096,
                  "id": 3099,
                  "nodeType": "Return",
                  "src": "5170:17:7"
                }
              ]
            },
            "baseFunctions": [
              21205,
              49269
            ],
            "documentation": {
              "id": 3089,
              "nodeType": "StructuredDocumentation",
              "src": "5010:62:7",
              "text": "@notice Returns the sender in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "5086:10:7",
            "overrides": {
              "id": 3093,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 3091,
                  "name": "Multicall",
                  "nameLocations": [
                    "5122:9:7"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21206,
                  "src": "5122:9:7"
                },
                {
                  "id": 3092,
                  "name": "Context",
                  "nameLocations": [
                    "5133:7:7"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 49279,
                  "src": "5133:7:7"
                }
              ],
              "src": "5113:28:7"
            },
            "parameters": {
              "id": 3090,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5096:2:7"
            },
            "returnParameters": {
              "id": 3096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3095,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3101,
                  "src": "5151:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3094,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5151:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5150:9:7"
            },
            "scope": 3102,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2846,
              "name": "ContractMetadata",
              "nameLocations": [
                "1360:16:7"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18093,
              "src": "1360:16:7"
            },
            "id": 2847,
            "nodeType": "InheritanceSpecifier",
            "src": "1360:16:7"
          },
          {
            "baseName": {
              "id": 2848,
              "name": "Multicall",
              "nameLocations": [
                "1378:9:7"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21206,
              "src": "1378:9:7"
            },
            "id": 2849,
            "nodeType": "InheritanceSpecifier",
            "src": "1378:9:7"
          },
          {
            "baseName": {
              "id": 2850,
              "name": "Ownable",
              "nameLocations": [
                "1389:7:7"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21764,
              "src": "1389:7:7"
            },
            "id": 2851,
            "nodeType": "InheritanceSpecifier",
            "src": "1389:7:7"
          },
          {
            "baseName": {
              "id": 2852,
              "name": "ERC20Votes",
              "nameLocations": [
                "1398:10:7"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48940,
              "src": "1398:10:7"
            },
            "id": 2853,
            "nodeType": "InheritanceSpecifier",
            "src": "1398:10:7"
          },
          {
            "baseName": {
              "id": 2854,
              "name": "PrimarySale",
              "nameLocations": [
                "1410:11:7"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22703,
              "src": "1410:11:7"
            },
            "id": 2855,
            "nodeType": "InheritanceSpecifier",
            "src": "1410:11:7"
          },
          {
            "baseName": {
              "id": 2856,
              "name": "DropSinglePhase",
              "nameLocations": [
                "1423:15:7"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20064,
              "src": "1423:15:7"
            },
            "id": 2857,
            "nodeType": "InheritanceSpecifier",
            "src": "1423:15:7"
          }
        ],
        "canonicalName": "ERC20DropVote",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2845,
          "nodeType": "StructuredDocumentation",
          "src": "435:897:7",
          "text": "      BASE:      ERC20Votes\n      EXTENSION: DropSinglePhase\n  The `ERC20Drop` contract uses the `DropSinglePhase` extensions, along with `ERC20Votes`.\n  It implements the ERC20 standard, along with the following additions to standard ERC20 logic:\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\n                             presenting a message signed by the account.\n  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism tokens. It lets\n  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens."
        },
        "fullyImplemented": true,
        "internalFunctionIDs": {
          "48925": 1,
          "48939": 2
        },
        "linearizedBaseContracts": [
          3102,
          20064,
          33357,
          32931,
          22703,
          33997,
          48940,
          48293,
          14070,
          48051,
          14034,
          14015,
          49279,
          46179,
          21764,
          33834,
          21206,
          33577,
          18093,
          33084
        ],
        "name": "ERC20DropVote",
        "nameLocation": "1343:13:7",
        "scope": 3103,
        "usedErrors": [],
        "usedEvents": [
          14006,
          14014,
          33083,
          33322,
          33330,
          33833,
          33996,
          46113,
          46122
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 7
}