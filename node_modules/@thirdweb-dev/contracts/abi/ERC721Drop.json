{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_primarySaleRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "condition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimarySaleRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "name": "TokenURIRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCondition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaimableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantityLimitPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "encryptDecrypt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encryptedData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "getRevealURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "getSupplyClaimedByWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        }
      ],
      "name": "isEncryptedBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primarySaleRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "_condition",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_saleRecipient",
          "type": "address"
        }
      ],
      "name": "setPrimarySaleRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOverride",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b50604051620046113803806200461183398101604081905262000034916200030a565b848460026200004483826200045d565b5060036200005382826200045d565b50506000805550620000658662000091565b6200007a836001600160801b038416620000e3565b62000085816200018f565b50505050505062000529565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6127108111156200012d5760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b60448201526064015b60405180910390fd5b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b6001600160a01b038116620001db5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b604482015260640162000124565b600f80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b80516001600160a01b03811681146200023d57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026a57600080fd5b81516001600160401b038082111562000287576200028762000242565b604051601f8301601f19908116603f01168101908282118183101715620002b257620002b262000242565b8160405283815260209250866020858801011115620002d057600080fd5b600091505b83821015620002f45785820183015181830184015290820190620002d5565b6000602085830101528094505050505092915050565b60008060008060008060c087890312156200032457600080fd5b6200032f8762000225565b60208801519096506001600160401b03808211156200034d57600080fd5b6200035b8a838b0162000258565b965060408901519150808211156200037257600080fd5b506200038189828a0162000258565b945050620003926060880162000225565b60808801519093506001600160801b0381168114620003b057600080fd5b9150620003c060a0880162000225565b90509295509295509295565b600181811c90821680620003e157607f821691505b6020821081036200040257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000458576000816000526020600020601f850160051c81016020861015620004335750805b601f850160051c820191505b8181101562000454578281556001016200043f565b5050505b505050565b81516001600160401b0381111562000479576200047962000242565b62000491816200048a8454620003cc565b8462000408565b602080601f831160018114620004c95760008415620004b05750858301515b600019600386901b1c1916600185901b17855562000454565b600085815260208120601f198616915b82811015620004fa57888601518255948401946001909101908401620004d9565b5085821015620005195787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6140d880620005396000396000f3fe6080604052600436106101fc5760003560e01c806370a082311161011457806370a0823114610508578063830405321461052857806384bb1e42146105585780638da5cb5b1461056b578063938e3d7b1461058057806395d89b41146105a05780639bcf7a15146105b55780639fc4d68f146105d5578063a05112fc146105f5578063a22cb46514610615578063ac9650d814610635578063acd083f814610662578063b24f2d3914610677578063b88d4fde146106a2578063c87b56dd146106c2578063ce805642146106e2578063d37c353b14610702578063d637ed5914610722578063e71503221461074b578063e8a3d4851461076b578063e985e9c514610780578063eec8897c146107c957600080fd5b806301ffc9a71461020157806306fdde0314610236578063079fe40e14610258578063081812fc14610285578063095ea7b3146102a557806313af4035146102c757806318160ddd146102e757806323b872dd1461030a5780632419f51b1461032a5780632a55205a1461034a57806335b65e1f146103785780633b1475a7146103bc578063426cfaf3146103d157806342842e0e146103f157806342966c6814610411578063492e224b146104315780634cc157df14610451578063600dd5ea146104935780636352211e146104b357806363b45e2d146104d35780636f4f2837146104e8575b600080fd5b34801561020d57600080fd5b5061022161021c3660046132af565b6107e9565b60405190151581526020015b60405180910390f35b34801561024257600080fd5b5061024b610856565b60405161022d919061331c565b34801561026457600080fd5b5061026d6108e8565b6040516001600160a01b03909116815260200161022d565b34801561029157600080fd5b5061026d6102a036600461332f565b6108f7565b3480156102b157600080fd5b506102c56102c0366004613364565b61093b565b005b3480156102d357600080fd5b506102c56102e236600461338e565b6109c1565b3480156102f357600080fd5b50600154600054035b60405190815260200161022d565b34801561031657600080fd5b506102c56103253660046133a9565b6109fa565b34801561033657600080fd5b506102fc61034536600461332f565b610a05565b34801561035657600080fd5b5061036a6103653660046133e5565b610a73565b60405161022d929190613407565b34801561038457600080fd5b506102fc61039336600461338e565b601a546000908152601b602090815260408083206001600160a01b039094168352929052205490565b3480156103c857600080fd5b506010546102fc565b3480156103dd57600080fd5b506102c56103ec36600461342e565b610ab0565b3480156103fd57600080fd5b506102c561040c3660046133a9565b610cbc565b34801561041d57600080fd5b506102c561042c36600461332f565b610cd7565b34801561043d57600080fd5b5061022161044c36600461332f565b610ce2565b34801561045d57600080fd5b5061047161046c36600461332f565b610d08565b604080516001600160a01b03909316835261ffff90911660208301520161022d565b34801561049f57600080fd5b506102c56104ae366004613364565b610d73565b3480156104bf57600080fd5b5061026d6104ce36600461332f565b610da5565b3480156104df57600080fd5b50600c546102fc565b3480156104f457600080fd5b506102c561050336600461338e565b610db7565b34801561051457600080fd5b506102fc61052336600461338e565b610de4565b34801561053457600080fd5b5061022161054336600461332f565b600e6020526000908152604090205460ff1681565b6102c5610566366004613568565b610e32565b34801561057757600080fd5b5061026d610f0d565b34801561058c57600080fd5b506102c561059b3660046135fe565b610f1c565b3480156105ac57600080fd5b5061024b610f49565b3480156105c157600080fd5b506102c56105d0366004613646565b610f58565b3480156105e157600080fd5b5061024b6105f03660046136b3565b610f87565b34801561060157600080fd5b5061024b61061036600461332f565b611107565b34801561062157600080fd5b506102c56106303660046136fe565b6111a1565b34801561064157600080fd5b5061065561065036600461371a565b611236565b60405161022d919061378e565b34801561066e57600080fd5b506000546102fc565b34801561068357600080fd5b50600a546001600160a01b03811690600160a01b900461ffff16610471565b3480156106ae57600080fd5b506102c56106bd3660046137f2565b61139b565b3480156106ce57600080fd5b5061024b6106dd36600461332f565b6113ec565b3480156106ee57600080fd5b5061024b6106fd3660046136b3565b61145b565b34801561070e57600080fd5b506102fc61071d366004613859565b6114fe565b34801561072e57600080fd5b50610737611596565b60405161022d9897969594939291906138d2565b34801561075757600080fd5b5061024b610766366004613927565b611655565b34801561077757600080fd5b5061024b6116ca565b34801561078c57600080fd5b5061022161079b366004613982565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156107d557600080fd5b506102216107e43660046139b5565b6116d7565b60006301ffc9a760e01b6001600160e01b03198316148061081a57506380ac58cd60e01b6001600160e01b03198316145b806108355750635b5e139f60e01b6001600160e01b03198316145b8061085057506001600160e01b0319821663152a902d60e11b145b92915050565b60606002805461086590613a26565b80601f016020809104026020016040519081016040528092919081815260200182805461089190613a26565b80156108de5780601f106108b3576101008083540402835291602001916108de565b820191906000526020600020905b8154815290600101906020018083116108c157829003601f168201915b5050505050905090565b600f546001600160a01b031690565b600061090282611a84565b61091f576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061094682610da5565b9050806001600160a01b0316836001600160a01b03160361097a5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216146109b157610994813361079b565b6109b1576040516367d9dca160e11b815260040160405180910390fd5b6109bc838383611aaf565b505050565b6109c9611b0b565b6109ee5760405162461bcd60e51b81526004016109e590613a5a565b60405180910390fd5b6109f781611b2e565b50565b6109bc838383611b80565b6000610a10600c5490565b8210610a4e5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016109e5565b600c8281548110610a6157610a61613a82565b90600052602060002001549050919050565b600080600080610a8286610d08565b90945084925061ffff169050612710610a9b8287613aae565b610aa59190613adb565b925050509250929050565b610ab8611b0b565b610ad45760405162461bcd60e51b81526004016109e590613a5a565b601a546014548215610b1e575060003360405160609190911b6001600160601b03191660208201524360348201526054016040516020818303038152906040528051906020012091505b8360200135811115610b675760405162461bcd60e51b81526020600482015260126024820152711b585e081cdd5c1c1b1e4818db185a5b595960721b60448201526064016109e5565b604051806101000160405280856000013581526020018560200135815260200182815260200185606001358152602001856080013581526020018560a0013581526020018560c0016020810190610bbe919061338e565b6001600160a01b03168152602001610bd960e0870187613aef565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505091525080516012908155602082015160135560408201516014556060820151601555608082015160165560a082015160175560c0820151601880546001600160a01b0319166001600160a01b0390921691909117905560e0820151601990610c749082613b7d565b505050601a8290556040517f6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b890610cae9086908690613c65565b60405180910390a150505050565b6109bc8383836040518060200160405280600081525061139b565b6109f7816001611d5a565b60008181526011602052604081208054829190610cfe90613a26565b9050119050919050565b6000818152600b60209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252829115610d4f5780516020820151610d69565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610d7b611b0b565b610d975760405162461bcd60e51b81526004016109e590613a5a565b610da18282611f09565b5050565b6000610db082611f8d565b5192915050565b610dbf611b0b565b610ddb5760405162461bcd60e51b81526004016109e590613a5a565b6109f7816120a7565b60006001600160a01b038216610e0d576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610e4086868686868661213b565b601a54610e5033878787876116d7565b508560126002016000828254610e669190613d32565b90915550506000818152601b6020908152604080832033845290915281208054889290610e94908490613d32565b90915550610ea79050600087878761219d565b6000610eb3888861229a565b9050806001600160a01b038916336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de68a604051610efb91815260200190565b60405180910390a45050505050505050565b6009546001600160a01b031690565b610f24611b0b565b610f405760405162461bcd60e51b81526004016109e590613a5a565b6109f7816122a7565b60606003805461086590613a26565b610f60611b0b565b610f7c5760405162461bcd60e51b81526004016109e590613a5a565b6109bc838383612383565b600083815260116020526040812080546060929190610fa590613a26565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd190613a26565b801561101e5780601f10610ff35761010080835404028352916020019161101e565b820191906000526020600020905b81548152906001019060200180831161100157829003601f168201915b50505050509050805160000361106a5760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81d1bc81c995d99585b607a1b60448201526064016109e5565b600080828060200190518101906110819190613d45565b91509150611090828787611655565b935080848787466040516020016110aa9493929190613dc5565b60405160208183030381529060405280519060200120146110fd5760405162461bcd60e51b815260206004820152600d60248201526c496e636f7272656374206b657960981b60448201526064016109e5565b5050509392505050565b6011602052600090815260409020805461112090613a26565b80601f016020809104026020016040519081016040528092919081815260200182805461114c90613a26565b80156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b505050505081565b336001600160a01b038316036111ca5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b038111156112505761125061349d565b60405190808252806020026020018201604052801561128357816020015b606081526020019060019003908161126e5790505b509050336000805b8481101561139257811561130a576112e8308787848181106112af576112af613a82565b90506020028101906112c19190613aef565b866040516020016112d493929190613dee565b60405160208183030381529060405261242a565b8482815181106112fa576112fa613a82565b602002602001018190525061138a565b61136c3087878481811061132057611320613a82565b90506020028101906113329190613aef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061242a92505050565b84828151811061137e5761137e613a82565b60200260200101819052505b60010161128b565b50505092915050565b6113a6848484611b80565b6113b8836001600160a01b0316612456565b156113e6576113c984848484612465565b6113e6576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606060006113f983612551565b509050600061140784612656565b905061141282610ce2565b1561144057806040516020016114289190613e0f565b60405160208183030381529060405292505050919050565b8061144a856127b7565b604051602001611428929190613e34565b6060611465611b0b565b6114815760405162461bcd60e51b81526004016109e590613a5a565b600061148c85610a05565b9050611499818585610f87565b91506114b481604051806020016040528060008152506128b7565b6114be81836128cf565b847f6df1d8db2a036436ffe0b2d1833f2c5f1e624818dfce2578c0faa4b83ef9998d836040516114ee919061331c565b60405180910390a2509392505050565b6000811561157f5760008061151584860186613e63565b91509150815160001415801561152a57508015155b1561157c5761157c886010546115409190613d32565b86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128b792505050565b50505b61158c8686868686612974565b9695505050505050565b60128054601354601454601554601654601754601854601980549798969795969495939492936001600160a01b0390921692916115d290613a26565b80601f01602080910402602001604051908101604052809291908181526020018280546115fe90613a26565b801561164b5780601f106116205761010080835404028352916020019161164b565b820191906000526020600020905b81548152906001019060200180831161162e57829003601f168201915b5050505050905088565b8251604080518083016020019091528181529060005b818110156116c157600085858360405160200161168a93929190613ea7565b60408051601f198184030181529190528051602091820120888401820151188584018201526116ba915082613d32565b905061166b565b50509392505050565b6008805461112090613a26565b60408051610100810182526012805482526013546020830152601454928201929092526015546060820152601654608082015260175460a08201526018546001600160a01b031660c082015260198054600093849392909160e08401919061173e90613a26565b80601f016020809104026020016040519081016040528092919081815260200182805461176a90613a26565b80156117b75780601f1061178c576101008083540402835291602001916117b7565b820191906000526020600020905b81548152906001019060200180831161179a57829003601f168201915b50505091909252505050606081015160a082015160c08301516080840151939450919290919015611897576118936117ef8780613eb9565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505060808088015191508d9060208b01359060408c013590611844908d0160608e0161338e565b6040516001600160601b0319606095861b811660208301526034820194909452605481019290925290921b16607482015260880160405160208183030381529060405280519060200120612a81565b5094505b841561191e5785602001356000036118af57826118b5565b85602001355b92506000198660400135036118ca57816118d0565b85604001355b9150600019866040013514158015611901575060006118f5608088016060890161338e565b6001600160a01b031614155b61190b578061191b565b61191b608087016060880161338e565b90505b601a546000908152601b602090815260408083206001600160a01b03808f168552925290912054908981169083161415806119595750828814155b156119995760405162461bcd60e51b815260206004820152601060248201526f2150726963654f7243757272656e637960801b60448201526064016109e5565b8915806119ae5750836119ac828c613d32565b115b156119e45760405162461bcd60e51b81526004016109e5906020808252600490820152632151747960e01b604082015260600190565b84602001518a86604001516119f99190613d32565b1115611a345760405162461bcd60e51b815260206004820152600a602482015269214d6178537570706c7960b01b60448201526064016109e5565b8451421015611a765760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b60448201526064016109e5565b505050505095945050505050565b6000805482108015610850575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611b15610f0d565b6001600160a01b0316336001600160a01b031614905090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6000611b8b82611f8d565b9050836001600160a01b031681600001516001600160a01b031614611bc25760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480611be05750611be0853361079b565b80611bfb575033611bf0846108f7565b6001600160a01b0316145b905080611c1b57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038416611c4257604051633a954ecd60e21b815260040160405180910390fd5b611c4e60008487611aaf565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021783558701808452922080549193909116611d21576000548214611d2157805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061408383398151915260405160405180910390a45050505050565b6000611d6583611f8d565b80519091508215611dcb576000336001600160a01b0383161480611d8e5750611d8e823361079b565b80611da9575033611d9e866108f7565b6001600160a01b0316145b905080611dc957604051632ce44b5f60e11b815260040160405180910390fd5b505b611dd760008583611aaf565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b178555918901808452922080549194909116611ed1576000548214611ed157805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020614083833981519152908390a4505060018054810190555050565b612710811115611f2b5760405162461bcd60e51b81526004016109e590613f02565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561208e57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529061208c5780516001600160a01b031615612023579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215612087579392505050565b612023565b505b604051636f96cda160e11b815260040160405180910390fd5b6001600160a01b0381166120f15760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b60448201526064016109e5565b600f80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b6010548560005461214c9190613d32565b11156121955760405162461bcd60e51b81526020600482015260186024820152774e6f7420656e6f756768206d696e74656420746f6b656e7360401b60448201526064016109e5565b505050505050565b806000036121e15734156121dc5760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b60448201526064016109e5565b6113e6565b60006121ed8285613aae565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0385160161221f5750348114612223565b5034155b806122645760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206d73672076616c756560781b60448201526064016109e5565b60006001600160a01b0387161561227b5786612283565b6122836108e8565b905061229185338386612b45565b50505050505050565b6000546108508383612b86565b6000600880546122b690613a26565b80601f01602080910402602001604051908101604052809291908181526020018280546122e290613a26565b801561232f5780601f106123045761010080835404028352916020019161232f565b820191906000526020600020905b81548152906001019060200180831161231257829003601f168201915b5050505050905081600890816123459190613b7d565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051612377929190613f2b565b60405180910390a15050565b6127108111156123a55760405162461bcd60e51b81526004016109e590613f02565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b606061244f838360405180606001604052806027815260200161405c60279139612ba0565b9392505050565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061249a903390899088908890600401613f59565b6020604051808303816000875af19250505080156124d5575060408051601f3d908101601f191682019092526124d291810190613f8c565b60015b612533573d808015612503576040519150601f19603f3d011682016040523d82523d6000602084013e612508565b606091505b50805160000361252b576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b600080600061255f600c5490565b90506000600c8054806020026020016040519081016040528092919081815260200182805480156125af57602002820191906000526020600020905b81548152602001906001019080831161259b575b5050505050905060005b8281101561261b578181815181106125d3576125d3613a82565b6020026020010151861015612609578093508181815181106125f7576125f7613a82565b60200260200101519450505050915091565b612614600182613d32565b90506125b9565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b60448201526064016109e5565b60606000612663600c5490565b90506000600c8054806020026020016040519081016040528092919081815260200182805480156126b357602002820191906000526020600020905b81548152602001906001019080831161269f575b5050505050905060005b8281101561261b578181815181106126d7576126d7613a82565b60200260200101518510156127a557600d60008383815181106126fc576126fc613a82565b60200260200101518152602001908152602001600020805461271d90613a26565b80601f016020809104026020016040519081016040528092919081815260200182805461274990613a26565b80156127965780601f1061276b57610100808354040283529160200191612796565b820191906000526020600020905b81548152906001019060200180831161277957829003601f168201915b50505050509350505050919050565b6127b0600182613d32565b90506126bd565b6060816000036127de5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561280857806127f281613fa9565b91506128019050600a83613adb565b91506127e2565b6000816001600160401b038111156128225761282261349d565b6040519080825280601f01601f19166020018201604052801561284c576020820181803683370190505b5090505b841561254957612861600183613fc2565b915061286e600a86613fd5565b612879906030613d32565b60f81b81838151811061288e5761288e613a82565b60200101906001600160f81b031916908160001a9053506128b0600a86613adb565b9450612850565b60008281526011602052604090206109bc8282613b7d565b6000828152600e602052604090205460ff161561291d5760405162461bcd60e51b815260206004820152600c60248201526b2130ba31b410333937bd32b760a11b60448201526064016109e5565b6000828152600d602052604090206129358282613b7d565b507f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c61296083612c0e565b604080519182526020820185905201612377565b600061297e611b0b565b61299a5760405162461bcd60e51b81526004016109e590613a5a565b856000036129d25760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b60448201526064016109e5565b60006010549050612a1a818888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d1e92505050565b6010919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001612a508a84613d32565b612a5a9190613fc2565b88888888604051612a6f959493929190613fe9565b60405180910390a25095945050505050565b6000808281805b8751811015612b3957612a9c600283613aae565b91506000888281518110612ab257612ab2613a82565b60200260200101519050808411612af4576040805160208101869052908101829052606001604051602081830303815290604052805190602001209350612b30565b6040805160208101839052908101859052606001604051602081830303815290604052805190602001209350600183612b2d9190613d32565b92505b50600101612a88565b50941495939450505050565b80156113e65773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601612b7a576121dc8282612d82565b6113e684848484612e24565b610da1828260405180602001604052806000815250612e77565b6060600080856001600160a01b031685604051612bbd9190614022565b600060405180830381855af49150503d8060008114612bf8576040519150601f19603f3d011682016040523d82523d6000602084013e612bfd565b606091505b509150915061158c86838387613013565b600080612c1a600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015612c6a57602002820191906000526020600020905b815481526020019060010190808311612c56575b5050505050905060005b82811015612ce357818181518110612c8e57612c8e613a82565b60200260200101518503612cdb578015612cd05781612cae600183613fc2565b81518110612cbe57612cbe613a82565b60200260200101519350505050919050565b506000949350505050565b600101612c74565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818985d18da1259608a1b60448201526064016109e5565b600080612d2b8486613d32565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d60205260409020909250829150612d798482613b7d565b50935093915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612dcf576040519150601f19603f3d011682016040523d82523d6000602084013e612dd4565b606091505b50509050806109bc5760405162461bcd60e51b815260206004820152601c60248201527b1b985d1a5d99481d1bdad95b881d1c985b9cd9995c8819985a5b195960221b60448201526064016109e5565b816001600160a01b0316836001600160a01b031603156113e657306001600160a01b03841603612e62576121dc6001600160a01b038516838361308a565b6113e66001600160a01b0385168484846130e0565b6000546001600160a01b038416612ea057604051622e076360e81b815260040160405180910390fd5b82600003612ec15760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b4290931692909202919091179055819081850190612f5a90612456565b15612fd0575b60405182906001600160a01b03881690600090600080516020614083833981519152908290a4612f996000878480600101955087612465565b612fb6576040516368d2bf6b60e11b815260040160405180910390fd5b808210612f60578260005414612fcb57600080fd5b613003565b5b6040516001830192906001600160a01b03881690600090600080516020614083833981519152908290a4808210612fd1575b5060009081556113e69085838684565b606083156130805782516000036130795761302d85612456565b6130795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109e5565b5081612549565b6125498383613118565b6109bc8363a9059cbb60e01b84846040516024016130a9929190613407565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613142565b6040516001600160a01b03808516602483015283166044820152606481018290526113e69085906323b872dd60e01b906084016130a9565b8151156131285781518083602001fd5b8060405162461bcd60e51b81526004016109e5919061331c565b6000613197826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132149092919063ffffffff16565b8051909150156109bc57808060200190518101906131b5919061403e565b6109bc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109e5565b6060612549848460008585600080866001600160a01b0316858760405161323b9190614022565b60006040518083038185875af1925050503d8060008114613278576040519150601f19603f3d011682016040523d82523d6000602084013e61327d565b606091505b509150915061328e87838387613013565b979650505050505050565b6001600160e01b0319811681146109f757600080fd5b6000602082840312156132c157600080fd5b813561244f81613299565b60005b838110156132e75781810151838201526020016132cf565b50506000910152565b600081518084526133088160208601602086016132cc565b601f01601f19169290920160200192915050565b60208152600061244f60208301846132f0565b60006020828403121561334157600080fd5b5035919050565b80356001600160a01b038116811461335f57600080fd5b919050565b6000806040838503121561337757600080fd5b61338083613348565b946020939093013593505050565b6000602082840312156133a057600080fd5b61244f82613348565b6000806000606084860312156133be57600080fd5b6133c784613348565b92506133d560208501613348565b9150604084013590509250925092565b600080604083850312156133f857600080fd5b50508035926020909101359150565b6001600160a01b03929092168252602082015260400190565b80151581146109f757600080fd5b6000806040838503121561344157600080fd5b82356001600160401b0381111561345757600080fd5b8301610100818603121561346a57600080fd5b9150602083013561347a81613420565b809150509250929050565b60006080828403121561349757600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156134db576134db61349d565b604052919050565b60006001600160401b038211156134fc576134fc61349d565b50601f01601f191660200190565b600061351d613518846134e3565b6134b3565b905082815283838301111561353157600080fd5b828260208301376000602084830101529392505050565b600082601f83011261355957600080fd5b61244f8383356020850161350a565b60008060008060008060c0878903121561358157600080fd5b61358a87613348565b95506020870135945061359f60408801613348565b93506060870135925060808701356001600160401b03808211156135c257600080fd5b6135ce8a838b01613485565b935060a08901359150808211156135e457600080fd5b506135f189828a01613548565b9150509295509295509295565b60006020828403121561361057600080fd5b81356001600160401b0381111561362657600080fd5b8201601f8101841361363757600080fd5b6125498482356020840161350a565b60008060006060848603121561365b57600080fd5b833592506133d560208501613348565b60008083601f84011261367d57600080fd5b5081356001600160401b0381111561369457600080fd5b6020830191508360208285010111156136ac57600080fd5b9250929050565b6000806000604084860312156136c857600080fd5b8335925060208401356001600160401b038111156136e557600080fd5b6136f18682870161366b565b9497909650939450505050565b6000806040838503121561371157600080fd5b61346a83613348565b6000806020838503121561372d57600080fd5b82356001600160401b038082111561374457600080fd5b818501915085601f83011261375857600080fd5b81358181111561376757600080fd5b8660208260051b850101111561377c57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156137e557603f198886030184526137d38583516132f0565b945092850192908501906001016137b7565b5092979650505050505050565b6000806000806080858703121561380857600080fd5b61381185613348565b935061381f60208601613348565b92506040850135915060608501356001600160401b0381111561384157600080fd5b61384d87828801613548565b91505092959194509250565b60008060008060006060868803121561387157600080fd5b8535945060208601356001600160401b038082111561388f57600080fd5b61389b89838a0161366b565b909650945060408801359150808211156138b457600080fd5b506138c18882890161366b565b969995985093965092949392505050565b60006101008a83528960208401528860408401528760608401528660808401528560a084015260018060a01b03851660c08401528060e0840152613918818401856132f0565b9b9a5050505050505050505050565b60008060006040848603121561393c57600080fd5b83356001600160401b038082111561395357600080fd5b61395f87838801613548565b9450602086013591508082111561397557600080fd5b506136f18682870161366b565b6000806040838503121561399557600080fd5b61399e83613348565b91506139ac60208401613348565b90509250929050565b600080600080600060a086880312156139cd57600080fd5b6139d686613348565b9450602086013593506139eb60408701613348565b92506060860135915060808601356001600160401b03811115613a0d57600080fd5b613a1988828901613485565b9150509295509295909350565b600181811c90821680613a3a57607f821691505b60208210810361349757634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761085057610850613a98565b634e487b7160e01b600052601260045260246000fd5b600082613aea57613aea613ac5565b500490565b6000808335601e19843603018112613b0657600080fd5b8301803591506001600160401b03821115613b2057600080fd5b6020019150368190038213156136ac57600080fd5b601f8211156109bc576000816000526020600020601f850160051c81016020861015613b5e5750805b601f850160051c820191505b8181101561219557828155600101613b6a565b81516001600160401b03811115613b9657613b9661349d565b613baa81613ba48454613a26565b84613b35565b602080601f831160018114613bdf5760008415613bc75750858301515b600019600386901b1c1916600185901b178555612195565b600085815260208120601f198616915b82811015613c0e57888601518255948401946001909101908401613bef565b5085821015613c2c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152823560408201526020830135606082015260408301356080820152606083013560a0820152608083013560c082015260a083013560e08201526000613cb060c08501613348565b6001600160a01b03166101008381019190915260e08501359036869003601e19018212613cdc57600080fd5b602091860191820191356001600160401b03811115613cfa57600080fd5b803603831315613d0957600080fd5b81610120860152613d1f61014086018285613c3c565b935050505061244f602083018415159052565b8082018082111561085057610850613a98565b60008060408385031215613d5857600080fd5b82516001600160401b03811115613d6e57600080fd5b8301601f81018513613d7f57600080fd5b8051613d8d613518826134e3565b818152866020838501011115613da257600080fd5b613db38260208301602086016132cc565b60209590950151949694955050505050565b60008551613dd7818460208a016132cc565b820184868237909301918252506020019392505050565b8284823760609190911b6001600160601b0319169101908152601401919050565b60008251613e218184602087016132cc565b600360fc1b920191825250600101919050565b60008351613e468184602088016132cc565b835190830190613e5a8183602088016132cc565b01949350505050565b60008060408385031215613e7657600080fd5b82356001600160401b03811115613e8c57600080fd5b613e9885828601613548565b95602094909401359450505050565b82848237909101908152602001919050565b6000808335601e19843603018112613ed057600080fd5b8301803591506001600160401b03821115613eea57600080fd5b6020019150600581901b36038213156136ac57600080fd5b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b604081526000613f3e60408301856132f0565b8281036020840152613f5081856132f0565b95945050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061158c908301846132f0565b600060208284031215613f9e57600080fd5b815161244f81613299565b600060018201613fbb57613fbb613a98565b5060010190565b8181038181111561085057610850613a98565b600082613fe457613fe4613ac5565b500690565b858152606060208201526000614003606083018688613c3c565b8281036040840152614016818587613c3c565b98975050505050505050565b600082516140348184602087016132cc565b9190910192915050565b60006020828403121561405057600080fd5b815161244f8161342056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203725f1dce9d391039fb40be1d53666885f92030dfee3f38b4dfde219b2c3d04964736f6c63430008170033",
    "sourceMap": "1675:10457:13:-:0;;;2610:404;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2830:5;2837:7;1883:5:25;:13;2830:5:13;1883::25;:13;:::i;:::-;-1:-1:-1;1906:7:25;:17;1916:7;1906;:17;:::i;:::-;-1:-1:-1;;2119:7:25;1933:31;;-1:-1:-1;2856:26:13::1;2868:13:::0;2856:11:::1;:26::i;:::-;2892:56;2917:17:::0;-1:-1:-1;;;;;2892:56:13;::::1;:24;:56::i;:::-;2958:49;2985:21:::0;2958:26:::1;:49::i;:::-;2610:404:::0;;;;;;1675:10457;;1421:172:70;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;4951:2:821;3549:25:77;;;4933:21:821;4990:2;4970:18;;;4963:30;-1:-1:-1;;;5009:18:821;;;5002:45;5064:18;;3549:25:77;;;;;;;;3509:76;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;5239:25:821;;;3689:46:77;;5227:2:821;5212:18;3689:46:77;;;;;;;3408:334;;:::o;1499:265:74:-;-1:-1:-1;;;;;1582:28:74;;1578:86;;1626:27;;-1:-1:-1;;;1626:27:74;;5477:2:821;1626:27:74;;;5459:21:821;5516:2;5496:18;;;5489:30;-1:-1:-1;;;5535:18:821;;;5528:47;5592:18;;1626:27:74;5275:341:821;1578:86:74;1673:9;:26;;-1:-1:-1;;;;;;1673:26:74;-1:-1:-1;;;;;1673:26:74;;;;;;;;1714:43;;;;-1:-1:-1;;1714:43:74;1499:265;:::o;14:177:821:-;93:13;;-1:-1:-1;;;;;135:31:821;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:844;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:821;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:821;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;914:3;907:4;902:2;894:6;890:15;886:26;883:35;880:55;;;931:1;928;921:12;880:55;953:1;944:10;;963:133;977:2;974:1;971:9;963:133;;;1065:14;;;1061:23;;1055:30;1034:14;;;1030:23;;1023:63;988:10;;;;963:133;;;1140:1;1133:4;1128:2;1120:6;1116:15;1112:26;1105:37;1160:6;1151:15;;;;;;328:844;;;;:::o;1177:987::-;1312:6;1320;1328;1336;1344;1352;1405:3;1393:9;1384:7;1380:23;1376:33;1373:53;;;1422:1;1419;1412:12;1373:53;1445:40;1475:9;1445:40;:::i;:::-;1529:2;1514:18;;1508:25;1435:50;;-1:-1:-1;;;;;;1582:14:821;;;1579:34;;;1609:1;1606;1599:12;1579:34;1632:61;1685:7;1676:6;1665:9;1661:22;1632:61;:::i;:::-;1622:71;;1739:2;1728:9;1724:18;1718:25;1702:41;;1768:2;1758:8;1755:16;1752:36;;;1784:1;1781;1774:12;1752:36;;1807:63;1862:7;1851:8;1840:9;1836:24;1807:63;:::i;:::-;1797:73;;;1889:49;1934:2;1923:9;1919:18;1889:49;:::i;:::-;1981:3;1966:19;;1960:26;1879:59;;-1:-1:-1;;;;;;2015:31:821;;2005:42;;1995:70;;2061:1;2058;2051:12;1995:70;2084:5;-1:-1:-1;2108:50:821;2153:3;2138:19;;2108:50;:::i;:::-;2098:60;;1177:987;;;;;;;;:::o;2169:380::-;2248:1;2244:12;;;;2291;;;2312:61;;2366:4;2358:6;2354:17;2344:27;;2312:61;2419:2;2411:6;2408:14;2388:18;2385:38;2382:161;;2465:10;2460:3;2456:20;2453:1;2446:31;2500:4;2497:1;2490:15;2528:4;2525:1;2518:15;2382:161;;2169:380;;;:::o;2680:543::-;2782:2;2777:3;2774:11;2771:446;;;2818:1;2842:5;2839:1;2832:16;2886:4;2883:1;2873:18;2956:2;2944:10;2940:19;2937:1;2933:27;2927:4;2923:38;2992:4;2980:10;2977:20;2974:47;;;-1:-1:-1;3015:4:821;2974:47;3070:2;3065:3;3061:12;3058:1;3054:20;3048:4;3044:31;3034:41;;3125:82;3143:2;3136:5;3133:13;3125:82;;;3188:17;;;3169:1;3158:13;3125:82;;;3129:3;;;2771:446;2680:543;;;:::o;3399:1345::-;3519:10;;-1:-1:-1;;;;;3541:30:821;;3538:56;;;3574:18;;:::i;:::-;3603:97;3693:6;3653:38;3685:4;3679:11;3653:38;:::i;:::-;3647:4;3603:97;:::i;:::-;3755:4;;3812:2;3801:14;;3829:1;3824:663;;;;4531:1;4548:6;4545:89;;;-1:-1:-1;4600:19:821;;;4594:26;4545:89;-1:-1:-1;;3356:1:821;3352:11;;;3348:24;3344:29;3334:40;3380:1;3376:11;;;3331:57;4647:81;;3794:944;;3824:663;2627:1;2620:14;;;2664:4;2651:18;;-1:-1:-1;;3860:20:821;;;3978:236;3992:7;3989:1;3986:14;3978:236;;;4081:19;;;4075:26;4060:42;;4173:27;;;;4141:1;4129:14;;;;4008:19;;3978:236;;;3982:3;4242:6;4233:7;4230:19;4227:201;;;4303:19;;;4297:26;-1:-1:-1;;4386:1:821;4382:14;;;4398:3;4378:24;4374:37;4370:42;4355:58;4340:74;;4227:201;-1:-1:-1;;;;;4474:1:821;4458:14;;;4454:22;4441:36;;-1:-1:-1;3399:1345:821:o;5275:341::-;1675:10457:13;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "1675:10457:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3306:444;;;;;;;;;;-1:-1:-1;3306:444:13;;;;;:::i;:::-;;:::i;:::-;;;661:14:821;;654:22;636:41;;624:2;609:18;3306:444:13;;;;;;;;6129:98:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;676:104:74:-;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1608:32:821;;;1590:51;;1578:2;1563:18;676:104:74;1444:203:821;7615:200:25;;;;;;;;;;-1:-1:-1;7615:200:25;;;;;:::i;:::-;;:::i;7162:392::-;;;;;;;;;;-1:-1:-1;7162:392:25;;;;;:::i;:::-;;:::i;:::-;;1133:173:70;;;;;;;;;;-1:-1:-1;1133:173:70;;;;;:::i;:::-;;:::i;2282:306:25:-;;;;;;;;;;-1:-1:-1;2541:12:25;;2335:7;2525:13;:28;2282:306;;;2611:25:821;;;2599:2;2584:18;2282:306:25;2465:177:821;8454:134:25;;;;;;;;;;-1:-1:-1;8454:134:25;;;;;:::i;:::-;;:::i;2029:203:54:-;;;;;;;;;;-1:-1:-1;2029:203:54;;;;;:::i;:::-;;:::i;1421:325:77:-;;;;;;;;;;-1:-1:-1;1421:325:77;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;6084:150:60:-;;;;;;;;;;-1:-1:-1;6084:150:60;;;;;:::i;:::-;6205:11;;6157:7;6183:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;6183:44:60;;;;;;;;;;;6084:150;6019:112:13;;;;;;;;;;-1:-1:-1;6103:21:13;;6019:112;;2330:1219:60;;;;;;;;;;-1:-1:-1;2330:1219:60;;;;;:::i;:::-;;:::i;8654:149:25:-;;;;;;;;;;-1:-1:-1;8654:149:25;;;;;:::i;:::-;;:::i;7663:87:13:-;;;;;;;;;;-1:-1:-1;7663:87:13;;;;;:::i;:::-;;:::i;3937:129:57:-;;;;;;;;;;-1:-1:-1;3937:129:57;;;;;:::i;:::-;;:::i;1986:381:77:-;;;;;;;;;;-1:-1:-1;1986:381:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4354:32:821;;;4336:51;;4435:6;4423:19;;;4418:2;4403:18;;4396:47;4309:18;1986:381:77;4164:285:821;3065:256:77;;;;;;;;;;-1:-1:-1;3065:256:77;;;;;:::i;:::-;;:::i;5944:123:25:-;;;;;;;;;;-1:-1:-1;5944:123:25;;;;;:::i;:::-;;:::i;1711:96:54:-;;;;;;;;;;-1:-1:-1;1785:8:54;:15;1711:96;;1189:228:74;;;;;;;;;;-1:-1:-1;1189:228:74;;;;;:::i;:::-;;:::i;3370:203:25:-;;;;;;;;;;-1:-1:-1;3370:203:25;;;;;:::i;:::-;;:::i;954:43:54:-;;;;;;;;;;-1:-1:-1;954:43:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;1181:1086:60;;;;;;:::i;:::-;;:::i;871:86:70:-;;;;;;;;;;;;;:::i;1003:188:56:-;;;;;;;;;;-1:-1:-1;1003:188:56;;;;;:::i;:::-;;:::i;6291:102:25:-;;;;;;;;;;;;;:::i;4259:258:77:-;;;;;;;;;;-1:-1:-1;4259:258:77;;;;;:::i;:::-;;:::i;1383:534:57:-;;;;;;;;;;-1:-1:-1;1383:534:57;;;;;:::i;:::-;;:::i;568:46::-;;;;;;;;;;-1:-1:-1;568:46:57;;;;;:::i;:::-;;:::i;7882:282:25:-;;;;;;;;;;-1:-1:-1;7882:282:25;;;;;:::i;:::-;;:::i;696:567:65:-;;;;;;;;;;-1:-1:-1;696:567:65;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6209:105:13:-;;;;;;;;;;-1:-1:-1;6268:7:13;6294:13;6209:105;;2477:144:77;;;;;;;;;;-1:-1:-1;2577:16:77;;-1:-1:-1;;;;;2577:16:77;;;-1:-1:-1;;;2602:10:77;;;;2477:144;;8869:343:25;;;;;;;;;;-1:-1:-1;8869:343:25;;;;;:::i;:::-;;:::i;4162:410:13:-;;;;;;;;;;-1:-1:-1;4162:410:13;;;;;:::i;:::-;;:::i;6793:411::-;;;;;;;;;;-1:-1:-1;6793:411:13;;;;;:::i;:::-;;:::i;5386:551::-;;;;;;;;;;-1:-1:-1;5386:551:13;;;;;:::i;:::-;;:::i;463:36:60:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;2409:1283:57:-;;;;;;;;;;-1:-1:-1;2409:1283:57;;;;;:::i;:::-;;:::i;565:34:56:-;;;;;;;;;;;;;:::i;8230:162:25:-;;;;;;;;;;-1:-1:-1;8230:162:25;;;;;:::i;:::-;-1:-1:-1;;;;;8350:25:25;;;8327:4;8350:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8230:162;3646:2357:60;;;;;;;;;;-1:-1:-1;3646:2357:60;;;;;:::i;:::-;;:::i;3306:444:13:-;3409:4;-1:-1:-1;;;;;;;;;3444:25:13;;;;:100;;-1:-1:-1;;;;;;;;;;3519:25:13;;;3444:100;:175;;;-1:-1:-1;;;;;;;;;;3594:25:13;;;3444:175;:274;;;-1:-1:-1;;;;;;;3677:41:13;;-1:-1:-1;;;3677:41:13;3444:274;3425:293;3306:444;-1:-1:-1;;3306:444:13:o;6129:98:25:-;6183:13;6215:5;6208:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6129:98;:::o;676:104:74:-;764:9;;-1:-1:-1;;;;;764:9:74;;676:104::o;7615:200:25:-;7683:7;7707:16;7715:7;7707;:16::i;:::-;7702:64;;7732:34;;-1:-1:-1;;;7732:34:25;;;;;;;;;;;7702:64;-1:-1:-1;7784:24:25;;;;:15;:24;;;;;;-1:-1:-1;;;;;7784:24:25;;7615:200::o;7162:392::-;7242:13;7258:24;7274:7;7258:15;:24::i;:::-;7242:40;;7302:5;-1:-1:-1;;;;;7296:11:25;:2;-1:-1:-1;;;;;7296:11:25;;7292:48;;7316:24;;-1:-1:-1;;;7316:24:25;;;;;;;;;;;7292:48;12113:10:13;-1:-1:-1;;;;;7355:21:25;;;7351:158;;7395:37;7412:5;12113:10:13;8230:162:25;:::i;7395:37::-;7390:119;;7459:35;;-1:-1:-1;;;7459:35:25;;;;;;;;;;;7390:119;7519:28;7528:2;7532:7;7541:5;7519:8;:28::i;:::-;7232:322;7162:392;;:::o;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;8454:134:25:-;8553:28;8563:4;8569:2;8573:7;8553:9;:28::i;2029:203:54:-;2093:7;2126:17;1785:8;:15;;1711:96;2126:17;2116:6;:27;2112:81;;2159:23;;-1:-1:-1;;;2159:23:54;;14866:2:821;2159:23:54;;;14848:21:821;14905:2;14885:18;;;14878:30;-1:-1:-1;;;14924:18:821;;;14917:43;14977:18;;2159:23:54;14664:337:821;2112:81:54;2209:8;2218:6;2209:16;;;;;;;;:::i;:::-;;;;;;;;;2202:23;;2029:203;;;:::o;1421:325:77:-;1540:16;1558:21;1592:17;1611:11;1626:31;1649:7;1626:22;:31::i;:::-;1591:66;;-1:-1:-1;1591:66:77;;-1:-1:-1;1591:66:77;;;-1:-1:-1;1733:6:77;1714:15;1591:66;1714:9;:15;:::i;:::-;1713:26;;;;:::i;:::-;1697:42;;1581:165;;1421:325;;;;;:::o;2330:1219:60:-;2456:24;:22;:24::i;:::-;2451:80;;2496:24;;-1:-1:-1;;;2496:24:60;;;;;;;:::i;2451:80::-;2569:11;;2621:28;;2660:170;;;;-1:-1:-1;2725:1:60;12113:10:13;2770:48:60;;15902:2:821;15873:15;;;;-1:-1:-1;;;;;;15869:45:821;2770:48:60;;;15857:58:821;2805:12:60;15931::821;;;15924:28;15968:12;;2770:48:60;;;;;;;;;;;;2760:59;;;;;;2740:79;;2660:170;2867:10;:29;;;2844:20;:52;2840:111;;;2912:28;;-1:-1:-1;;;2912:28:60;;16193:2:821;2912:28:60;;;16175:21:821;16232:2;16212:18;;;16205:30;-1:-1:-1;;;16251:18:821;;;16244:48;16309:18;;2912:28:60;15991:342:821;2840:111:60;2978:450;;;;;;;;3023:10;:25;;;2978:450;;;;3082:10;:29;;;2978:450;;;;3140:20;2978:450;;;;3198:10;:33;;;2978:450;;;;3257:10;:21;;;2978:450;;;;3307:10;:24;;;2978:450;;;;3355:10;:19;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2978:450:60;;;;;3398:19;;;;:10;:19;:::i;:::-;2978:450;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2978:450:60;;-1:-1:-1;2961:467:60;;:14;:467;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2961:467:60;-1:-1:-1;;;;;2961:467:60;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;3438:11:60;:31;;;3485:57;;;;;;3507:10;;3519:22;;3485:57;:::i;:::-;;;;;;;;2441:1108;;2330:1219;;:::o;8654:149:25:-;8757:39;8774:4;8780:2;8784:7;8757:39;;;;;;;;;;;;:16;:39::i;7663:87:13:-;7722:21;7728:8;7738:4;7722:5;:21::i;3937:129:57:-;4002:4;4025:23;;;:13;:23;;;;;:30;;4002:4;;4025:23;:30;;;:::i;:::-;;;:34;4018:41;;3937:129;;;:::o;1986:381:77:-;2066:7;2130:29;;;:19;:29;;;;;;;;2093:66;;;;;;;;;;-1:-1:-1;;;;;2093:66:77;;;;;;;;;;;;;;;;2066:7;;2189:39;:171;;2305:25;;2339:19;;;;2189:171;;;2248:16;;-1:-1:-1;;;;;2248:16:77;;;-1:-1:-1;;;2273:10:77;;;;2189:171;2170:190;;;;;1986:381;;;:::o;3065:256::-;3177:20;:18;:20::i;:::-;3172:76;;3213:24;;-1:-1:-1;;;3213:24:77;;;;;;;:::i;3172:76::-;3258:56;3283:17;3302:11;3258:24;:56::i;:::-;3065:256;;:::o;5944:123:25:-;6008:7;6034:21;6047:7;6034:12;:21::i;:::-;:26;;5944:123;-1:-1:-1;;5944:123:25:o;1189:228:74:-;1279:29;:27;:29::i;:::-;1274:85;;1324:24;;-1:-1:-1;;;1324:24:74;;;;;;;:::i;1274:85::-;1368:42;1395:14;1368:26;:42::i;3370:203:25:-;3434:7;-1:-1:-1;;;;;3457:19:25;;3453:60;;3485:28;;-1:-1:-1;;;3485:28:25;;;;;;;;;;;3453:60;-1:-1:-1;;;;;;3538:19:25;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3538:27:25;;3370:203::o;1181:1086:60:-;1434:85;1447:9;1458;1469;1480:14;1496:15;1513:5;1434:12;:85::i;:::-;1558:11;;1580:84;12113:10:13;1610:9:60;1621;1632:14;1648:15;1580:11;:84::i;:::-;;1741:9;1709:14;:28;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;1760:40:60;;;;:21;:40;;;;;;;;12113:10:13;1760:58:60;;;;;;;:71;;1822:9;;1760:40;:71;;1822:9;;1760:71;:::i;:::-;;;;-1:-1:-1;1888:70:60;;-1:-1:-1;1917:1:60;1921:9;1932;1943:14;1888:20;:70::i;:::-;2015:20;2038:44;2061:9;2072;2038:22;:44::i;:::-;2015:67;-1:-1:-1;2015:67:60;-1:-1:-1;;;;;2098:67:60;;12113:10:13;-1:-1:-1;;;;;2098:67:60;;2155:9;2098:67;;;;2611:25:821;;2599:2;2584:18;;2465:177;2098:67:60;;;;;;;;1424:843;;1181:1086;;;;;;:::o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;1003:188:56:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:56;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;6291:102:25:-;6347:13;6379:7;6372:14;;;;;:::i;4259:258:77:-;4376:20;:18;:20::i;:::-;4371:76;;4412:24;;-1:-1:-1;;;4412:24:77;;;;;;;:::i;4371:76::-;4457:53;4483:8;4493:10;4505:4;4457:25;:53::i;1383:534:57:-;1502:17;1522:23;;;:13;:23;;;;;1502:43;;1465:25;;1502:17;1522:23;1502:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:4;:11;1574:1;1559:16;1555:74;;1591:27;;-1:-1:-1;;;1591:27:57;;21064:2:821;1591:27:57;;;21046:21:821;21103:2;21083:18;;;21076:30;-1:-1:-1;;;21122:18:821;;;21115:47;21179:18;;1591:27:57;20862:341:821;1555:74:57;1640:25;1667:22;1704:4;1693:34;;;;;;;;;;;;:::i;:::-;1639:88;;;;1759:34;1774:12;1788:4;;1759:14;:34::i;:::-;1738:56;;1878:14;1840:11;1853:4;;1859:13;1823:50;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1813:61;;;;;;:79;1805:105;;;;-1:-1:-1;;;1805:105:57;;22652:2:821;1805:105:57;;;22634:21:821;22691:2;22671:18;;;22664:30;-1:-1:-1;;;22710:18:821;;;22703:43;22763:18;;1805:105:57;22450:337:821;1805:105:57;1492:425;;;1383:534;;;;;:::o;568:46::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7882:282:25:-;12113:10:13;-1:-1:-1;;;;;7980:24:25;;;7976:54;;8013:17;;-1:-1:-1;;;8013:17:25;;;;;;;;;;;7976:54;12113:10:13;8041:32:25;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8041:42:25;;;;;;;;;;;;:53;;-1:-1:-1;;8041:53:25;;;;;;;;;;8109:48;;636:41:821;;;8041:42:25;;12113:10:13;8109:48:25;;609:18:821;8109:48:25;;;;;;;7882:282;;:::o;696:567:65:-;756:22;812:4;-1:-1:-1;;;;;800:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:34:65;-1:-1:-1;12113:10:13;834:14:65;;922:311;942:15;;;922:311;;;982:11;978:245;;;1026:78;1063:4;1087;;1092:1;1087:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1096:6;1070:33;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1026:28;:78::i;:::-;1013:7;1021:1;1013:10;;;;;;;;:::i;:::-;;;;;;:91;;;;978:245;;;1156:52;1193:4;1200;;1205:1;1200:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1156:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1156:28:65;;-1:-1:-1;;;1156:52:65:i;:::-;1143:7;1151:1;1143:10;;;;;;;;:::i;:::-;;;;;;:65;;;;978:245;959:3;;922:311;;;;1242:14;;696:567;;;;:::o;8869:343:25:-;8992:28;9002:4;9008:2;9012:7;8992:9;:28::i;:::-;9034:15;:2;-1:-1:-1;;;;;9034:13:25;;:15::i;:::-;9030:176;;;9068:56;9099:4;9105:2;9109:7;9118:5;9068:30;:56::i;:::-;9063:143;;9151:40;;-1:-1:-1;;;9151:40:25;;;;;;;;;;;9063:143;8869:343;;;;:::o;4162:410:13:-;4236:13;4262:15;4283:21;4295:8;4283:11;:21::i;:::-;4261:43;;;4314:22;4339:21;4351:8;4339:11;:21::i;:::-;4314:46;;4375:25;4392:7;4375:16;:25::i;:::-;4371:195;;;4447:8;4430:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;4416:46;;;;4162:410;;;:::o;4371:195::-;4524:8;4534:19;:8;:17;:19::i;:::-;4507:47;;;;;;;;;:::i;6793:411::-;6879:25;6924:12;:10;:12::i;:::-;6916:39;;;;-1:-1:-1;;;6916:39:13;;;;;;;:::i;:::-;6966:15;6984:25;7002:6;6984:17;:25::i;:::-;6966:43;;7033:27;7046:7;7055:4;;7033:12;:27::i;:::-;7019:41;;7071:30;7089:7;7071:30;;;;;;;;;;;;:17;:30::i;:::-;7111:33;7123:7;7132:11;7111;:33::i;:::-;7177:6;7160:37;7185:11;7160:37;;;;;;:::i;:::-;;;;;;;;6906:298;6793:411;;;;;:::o;5386:551::-;5541:15;5572:16;;5568:293;;5605:25;;5658:35;;;;5669:5;5658:35;:::i;:::-;5604:89;;;;5711:12;:19;5734:1;5711:24;;:48;;;;-1:-1:-1;5739:20:13;;;5711:48;5707:144;;;5779:57;5821:7;5797:21;;:31;;;;:::i;:::-;5830:5;;5779:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5779:17:13;;-1:-1:-1;;;5779:57:13:i;:::-;5590:271;;5568:293;5878:52;5896:7;5905:17;;5924:5;;5878:17;:52::i;:::-;5871:59;5386:551;-1:-1:-1;;;;;;5386:551:13:o;463:36:60:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;463:36:60;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2409:1283:57:-;2602:11;;2768:4;2762:11;;2862:19;;;2883:2;2858:28;2845:42;;;2933:22;;;2762:11;2585:14;3029:657;3053:6;3049:1;:10;3029:657;;;3135:12;3177:3;;3182:1;3160:24;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3160:24:57;;;;;;;;;3150:35;;3160:24;3150:35;;;;3373:21;;;;;3367:28;3461:13;3631:23;;;;;3624:38;3061:7;;-1:-1:-1;3387:1:57;3061:7;:::i;:::-;;;3029:657;;;;2523:1169;2409:1283;;;;;:::o;565:34:56:-;;;;;;;:::i;3646:2357:60:-;3890:56;;;;;;;;3932:14;3890:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3890:56:60;;;;;;;;3863:15;;;;3890:56;3932:14;;3890:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3890:56:60;;;;-1:-1:-1;;;3977:40:60;;;;4048:31;;;;4113:26;;;;4349:28;;;;3890:56;;-1:-1:-1;3977:40:60;;4048:31;;4113:26;4349:42;4345:515;;4424:425;4460:21;:15;;:21;:::i;:::-;4424:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4499:28:60;;;;;;-1:-1:-1;4618:8:60;;4652:38;;;;;4716:29;;;;;4771:24;;;;;;;;:::i;:::-;4576:241;;-1:-1:-1;;;;;;26129:2:821;26165:15;;;26161:24;;4576:241:60;;;26149:37:821;26202:12;;;26195:28;;;;26239:12;;;26232:28;;;;26294:15;;;26290:24;26276:12;;;26269:46;26331:13;;4576:241:60;;;;;;;;;;;;4545:290;;;;;;4424:18;:425::i;:::-;-1:-1:-1;4407:442:60;-1:-1:-1;4345:515:60;4874:10;4870:534;;;4913:15;:38;;;4955:1;4913:43;:129;;5032:10;4913:129;;;4975:15;:38;;;4913:129;4900:142;;-1:-1:-1;;5069:15:60;:29;;;:50;:127;;5186:10;5069:127;;;5138:15;:29;;;5069:127;5056:140;;-1:-1:-1;;5226:15:60;:29;;;:50;;:92;;;;-1:-1:-1;5316:1:60;5280:24;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5280:38:60;;;5226:92;:167;;5380:13;5226:167;;;5337:24;;;;;;;;:::i;:::-;5210:183;;4870:534;5469:11;;5414:30;5447:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;5447:44:60;;;;;;;;;;;;5506:26;;;;;;;;;:58;;;5554:10;5536:14;:28;;5506:58;5502:115;;;5580:26;;-1:-1:-1;;;5580:26:60;;26557:2:821;5580:26:60;;;26539:21:821;26596:2;26576:18;;;26569:30;-1:-1:-1;;;26615:18:821;;;26608:46;26671:18;;5580:26:60;26355:340:821;5502:115:60;5631:14;;;:67;;-1:-1:-1;5687:10:60;5650:34;5662:22;5650:9;:34;:::i;:::-;:47;5631:67;5627:112;;;5714:14;;-1:-1:-1;;;5714:14:60;;;;;;26902:2:821;26884:21;;;26941:1;26921:18;;;26914:29;-1:-1:-1;;;26974:2:821;26959:18;;26952:34;27018:2;27003:18;;26700:327;5627:112:60;5799:17;:36;;;5787:9;5753:17;:31;;;:43;;;;:::i;:::-;:82;5749:133;;;5851:20;;-1:-1:-1;;;5851:20:60;;27234:2:821;5851:20:60;;;27216:21:821;27273:2;27253:18;;;27246:30;-1:-1:-1;;;27292:18:821;;;27285:40;27342:18;;5851:20:60;27032:334:821;5749:133:60;5896:32;;5931:15;-1:-1:-1;5892:105:60;;;5962:24;;-1:-1:-1;;;5962:24:60;;27573:2:821;5962:24:60;;;27555:21:821;27612:2;27592:18;;;27585:30;-1:-1:-1;;;27631:18:821;;;27624:44;27685:18;;5962:24:60;27371:338:821;5892:105:60;3880:2123;;;;;3646:2357;;;;;;;:::o;9458:172:25:-;9515:4;9578:13;;9568:7;:23;9538:85;;;;-1:-1:-1;;9596:20:25;;;;:11;:20;;;;;:27;-1:-1:-1;;;9596:27:25;;;;9595:28;;9458:172::o;18379:159::-;18459:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18459:29:25;-1:-1:-1;;;;;18459:29:25;;;;;;;;;18503:28;;18459:24;;18503:28;;;;;;;18379:159;;;:::o;10487:115:13:-;10551:4;10588:7;:5;:7::i;:::-;-1:-1:-1;;;;;10574:21:13;:10;-1:-1:-1;;;;;10574:21:13;;10567:28;;10487:115;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;13484:2052:25:-;13564:35;13602:21;13615:7;13602:12;:21::i;:::-;13564:59;;13660:4;-1:-1:-1;;;;;13638:26:25;:13;:18;;;-1:-1:-1;;;;;13638:26:25;;13634:67;;13673:28;;-1:-1:-1;;;13673:28:25;;;;;;;;;;;13634:67;13712:22;12113:10:13;-1:-1:-1;;;;;13738:20:25;;;;:72;;-1:-1:-1;13774:36:25;13791:4;12113:10:13;8230:162:25;:::i;13774:36::-;13738:124;;;-1:-1:-1;12113:10:13;13826:20:25;13838:7;13826:11;:20::i;:::-;-1:-1:-1;;;;;13826:36:25;;13738:124;13712:151;;13879:17;13874:66;;13905:35;;-1:-1:-1;;;13905:35:25;;;;;;;;;;;13874:66;-1:-1:-1;;;;;13954:16:25;;13950:52;;13979:23;;-1:-1:-1;;;13979:23:25;;;;;;;;;;;13950:52;14118:35;14135:1;14139:7;14148:4;14118:8;:35::i;:::-;-1:-1:-1;;;;;14443:18:25;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14443:31:25;;;-1:-1:-1;;;;;14443:31:25;;;-1:-1:-1;;14443:31:25;;;;;;;14488:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14488:29:25;;;;;;;;;;;14566:20;;;:11;:20;;;;;;14600:18;;-1:-1:-1;;;;;;14632:49:25;;;;-1:-1:-1;;;14665:15:25;14632:49;;;;;;;;;;14951:11;;15010:24;;;;;15052:13;;14566:20;;15010:24;;15052:13;15048:377;;15259:13;;15244:11;:28;15240:171;;15296:20;;15364:28;;;;-1:-1:-1;;;;;15338:54:25;-1:-1:-1;;;15338:54:25;-1:-1:-1;;;;;;15338:54:25;;;-1:-1:-1;;;;;15296:20:25;;15338:54;;;;15240:171;14419:1016;;;15469:7;15465:2;-1:-1:-1;;;;;15450:27:25;15459:4;-1:-1:-1;;;;;15450:27:25;-1:-1:-1;;;;;;;;;;;15450:27:25;;;;;;;;;13554:1982;;13484:2052;;;:::o;15913:2355::-;15992:35;16030:21;16043:7;16030:12;:21::i;:::-;16077:18;;15992:59;;-1:-1:-1;16106:284:25;;;;16139:22;12113:10:13;-1:-1:-1;;;;;16165:20:25;;;;:76;;-1:-1:-1;16205:36:25;16222:4;12113:10:13;8230:162:25;:::i;16205:36::-;16165:132;;;-1:-1:-1;12113:10:13;16261:20:25;16273:7;16261:11;:20::i;:::-;-1:-1:-1;;;;;16261:36:25;;16165:132;16139:159;;16318:17;16313:66;;16344:35;;-1:-1:-1;;;16344:35:25;;;;;;;;;;;16313:66;16125:265;16106:284;16513:35;16530:1;16534:7;16543:4;16513:8;:35::i;:::-;-1:-1:-1;;;;;16872:18:25;;;16838:31;16872:18;;;:12;:18;;;;;;;;16904:24;;-1:-1:-1;;;;;;;;;;16904:24:25;;;;;;;;;-1:-1:-1;;;;;;16904:24:25;;;;16942:29;;;;;16927:1;16942:29;;;;;;;;-1:-1:-1;;;;;;16942:29:25;;;;;;;;;;17101:20;;;:11;:20;;;;;;17135;;-1:-1:-1;;;;17202:15:25;17169:49;;;-1:-1:-1;;;17169:49:25;-1:-1:-1;;;;;;17169:49:25;;;;;;;;;;17232:22;-1:-1:-1;;;17232:22:25;;;17520:11;;;17579:24;;;;;17621:13;;16872:18;;17579:24;;17621:13;17617:377;;17828:13;;17813:11;:28;17809:171;;17865:20;;17933:28;;;;-1:-1:-1;;;;;17907:54:25;-1:-1:-1;;;17907:54:25;-1:-1:-1;;;;;;17907:54:25;;;-1:-1:-1;;;;;17865:20:25;;17907:54;;;;17809:171;-1:-1:-1;;18019:35:25;;18046:7;;-1:-1:-1;18042:1:25;;-1:-1:-1;;;;;;18019:35:25;;;-1:-1:-1;;;;;;;;;;;18019:35:25;18042:1;;18019:35;-1:-1:-1;;18237:12:25;:14;;;;;;-1:-1:-1;;15913:2355:25:o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;;;;;;:::i;3509:76::-;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;2611:25:821;;;3689:46:77;;2599:2:821;2584:18;3689:46:77;;;;;;;3408:334;;:::o;4713:1174:25:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;4823:7:25;4921:13;;4914:4;:20;4910:913;;;4958:31;4992:17;;;:11;:17;;;;;;;;;4958:51;;;;;;;;;-1:-1:-1;;;;;4958:51:25;;;;-1:-1:-1;;;4958:51:25;;-1:-1:-1;;;;;4958:51:25;;;;;;;;-1:-1:-1;;;4958:51:25;;;;;;;;;;;;;;5031:774;;5084:14;;-1:-1:-1;;;;;5084:28:25;;5080:107;;5151:9;4713:1174;-1:-1:-1;;;4713:1174:25:o;5080:107::-;-1:-1:-1;;;5547:6:25;5595:17;;;;:11;:17;;;;;;;;;5583:29;;;;;;;;;-1:-1:-1;;;;;5583:29:25;;;;;-1:-1:-1;;;5583:29:25;;-1:-1:-1;;;;;5583:29:25;;;;;;;;-1:-1:-1;;;5583:29:25;;;;;;;;;;;;;5646:28;5642:115;;5717:9;4713:1174;-1:-1:-1;;;4713:1174:25:o;5642:115::-;5504:279;;;4936:887;4910:913;5849:31;;-1:-1:-1;;;5849:31:25;;;;;;;;;;;1499:265:74;-1:-1:-1;;;;;1582:28:74;;1578:86;;1626:27;;-1:-1:-1;;;1626:27:74;;28260:2:821;1626:27:74;;;28242:21:821;28299:2;28279:18;;;28272:30;-1:-1:-1;;;28318:18:821;;;28311:47;28375:18;;1626:27:74;28058:341:821;1578:86:74;1673:9;:26;;-1:-1:-1;;;;;;1673:26:74;-1:-1:-1;;;;;1673:26:74;;;;;;;;1714:43;;;;-1:-1:-1;;1714:43:74;1499:265;:::o;8075:322:13:-;8309:21;;8297:9;8281:13;;:25;;;;:::i;:::-;:49;8277:114;;;8346:34;;-1:-1:-1;;;8346:34:13;;28606:2:821;8346:34:13;;;28588:21:821;28645:2;28625:18;;;28618:30;-1:-1:-1;;;28664:18:821;;;28657:54;28728:18;;8346:34:13;28404:348:821;8277:114:13;8075:322;;;;;;:::o;8829:860::-;9037:14;9055:1;9037:19;9033:103;;9080:9;:14;9072:33;;;;-1:-1:-1;;;9072:33:13;;28959:2:821;9072:33:13;;;28941:21:821;28998:1;28978:18;;;28971:29;-1:-1:-1;;;29016:18:821;;;29009:36;29062:18;;9072:33:13;28757:329:821;9072:33:13;9119:7;;9033:103;9146:18;9167:33;9186:14;9167:16;:33;:::i;:::-;9146:54;-1:-1:-1;9211:18:13;-1:-1:-1;;;;;;;9243:45:13;;;9239:176;;-1:-1:-1;9320:9:13;:23;;9239:176;;;-1:-1:-1;9390:9:13;:14;9239:176;9432:13;9424:43;;;;-1:-1:-1;;;9424:43:13;;29293:2:821;9424:43:13;;;29275:21:821;29332:2;29312:18;;;29305:30;-1:-1:-1;;;29351:18:821;;;29344:47;29408:18;;9424:43:13;29091:341:821;9424:43:13;9478:21;-1:-1:-1;;;;;9502:35:13;;;:84;;9565:21;9502:84;;;9540:22;:20;:22::i;:::-;9478:108;;9596:86;9633:9;9644:10;9656:13;9671:10;9596:36;:86::i;:::-;9023:666;;;8829:860;;;;:::o;9927:247::-;10060:20;10107:13;10130:37;10140:3;10145:21;10130:9;:37::i;1273:185:56:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1398:4;1384:11;:18;;;;;;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4619:332:77:-;4736:6;4729:4;:13;4725:69;;;4758:25;;-1:-1:-1;;;4758:25:77;;;;;;;:::i;4725:69::-;4836:49;;;;;;;;-1:-1:-1;;;;;4836:49:77;;;;;;;;;;;;;-1:-1:-1;4804:29:77;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4804:81:77;;;;;;;;;;;-1:-1:-1;4804:81:77;;;;;;;4901:43;;2611:25:821;;;4836:49:77;;4804:29;;4901:43;;2584:18:821;4901:43:77;;;;;;;4619:332;;;:::o;6671:198:289:-;6754:12;6785:77;6806:6;6814:4;6785:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6778:84;6671:198;-1:-1:-1;;;6671:198:289:o;1405:320::-;-1:-1:-1;;;;;1695:19:289;;:23;;;1405:320::o;19019:650:25:-;19197:72;;-1:-1:-1;;;19197:72:25;;19177:4;;-1:-1:-1;;;;;19197:36:25;;;;;:72;;12113:10:13;;19248:4:25;;19254:7;;19263:5;;19197:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19197:72:25;;;;;;;;-1:-1:-1;;19197:72:25;;;;;;;;;;;;:::i;:::-;;;19193:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19428:6;:13;19445:1;19428:18;19424:229;;19473:40;;-1:-1:-1;;;19473:40:25;;;;;;;;;;;19424:229;19613:6;19607:13;19598:6;19594:2;19590:15;19583:38;19193:470;-1:-1:-1;;;;;;19315:55:25;-1:-1:-1;;;19315:55:25;;-1:-1:-1;19193:470:25;19019:650;;;;;;:::o;2320:471:54:-;2382:15;2399:13;2424:25;2452:17;1785:8;:15;;1711:96;2452:17;2424:45;;2479:24;2506:8;2479:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2530:9;2525:224;2549:17;2545:1;:21;2525:224;;;2605:7;2613:1;2605:10;;;;;;;;:::i;:::-;;;;;;;2594:8;:21;2590:149;;;2643:1;2635:9;;2672:7;2680:1;2672:10;;;;;;;;:::i;:::-;;;;;;;2662:20;;2701:23;;;2320:471;;;:::o;2590:149::-;2568:6;2573:1;2568:6;;:::i;:::-;;;2525:224;;;-1:-1:-1;2759:25:54;;-1:-1:-1;;;2759:25:54;;30775:2:821;2759:25:54;;;30757:21:821;30814:2;30794:18;;;30787:30;-1:-1:-1;;;30833:18:821;;;30826:45;30888:18;;2759:25:54;30573:339:821;2905:390:54;2967:13;2992:25;3020:17;1785:8;:15;;1711:96;3020:17;2992:45;;3047:24;3074:8;3047:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3098:9;3093:161;3117:17;3113:1;:21;3093:161;;;3173:7;3181:1;3173:10;;;;;;;;:::i;:::-;;;;;;;3162:8;:21;3158:86;;;3210:7;:19;3218:7;3226:1;3218:10;;;;;;;;:::i;:::-;;;;;;;3210:19;;;;;;;;;;;3203:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2905:390;;;:::o;3158:86::-;3136:6;3141:1;3136:6;;:::i;:::-;;;3093:161;;303:703:298;359:13;576:5;585:1;576:10;572:51;;-1:-1:-1;;602:10:298;;;;;;;;;;;;-1:-1:-1;;;602:10:298;;;;;303:703::o;572:51::-;647:5;632:12;686:75;693:9;;686:75;;718:8;;;;:::i;:::-;;-1:-1:-1;740:10:298;;-1:-1:-1;748:2:298;740:10;;:::i;:::-;;;686:75;;;770:19;802:6;-1:-1:-1;;;;;792:17:298;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;792:17:298;;770:39;;819:150;826:10;;819:150;;852:11;862:1;852:11;;:::i;:::-;;-1:-1:-1;920:10:298;928:2;920:5;:10;:::i;:::-;907:24;;:2;:24;:::i;:::-;894:39;;877:6;884;877:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;877:56:298;;;;;;;;-1:-1:-1;947:11:298;956:2;947:11;;:::i;:::-;;;819:150;;678:140:57;771:23;;;;:13;:23;;;;;:40;797:14;771:23;:40;:::i;3907:246:54:-;3998:21;;;;:11;:21;;;;;;;;3997:22;3989:47;;;;-1:-1:-1;;;3989:47:54;;32857:2:821;3989:47:54;;;32839:21:821;32896:2;32876:18;;;32869:30;-1:-1:-1;;;32915:18:821;;;32908:42;32967:18;;3989:47:54;32655:336:821;3989:47:54;4046:17;;;;:7;:17;;;;;:28;4066:8;4046:17;:28;:::i;:::-;;4089:57;4109:26;4126:8;4109:16;:26::i;:::-;4089:57;;;33170:25:821;;;33226:2;33211:18;;33204:34;;;33143:18;4089:57:54;32996:248:821;1254:592:63;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:63;;;;;;;:::i;1436:70::-;1520:7;1531:1;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:63;;33451:2:821;1548:15:63;;;33433:21:821;33490:1;33470:18;;;33463:29;-1:-1:-1;;;33508:18:821;;;33501:35;33553:18;;1548:15:63;33249:328:821;1516:58:63;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:63;;-1:-1:-1;;;1669:55:63:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:63;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;112:876:294:-;203:4;;251;203;;293:567;317:5;:12;313:1;:16;293:567;;;350:10;359:1;350:10;;:::i;:::-;;;374:20;397:5;403:1;397:8;;;;;;;;:::i;:::-;;;;;;;374:31;;440:12;424;:28;420:430;;575:44;;;;;;34250:19:821;;;34285:12;;;34278:28;;;34322:12;;575:44:294;;;;;;;;;;;;565:55;;;;;;550:70;;420:430;;;762:44;;;;;;34250:19:821;;;34285:12;;;34278:28;;;34322:12;;762:44:294;;;;;;;;;;;;752:55;;;;;;737:70;;834:1;825:10;;;;;:::i;:::-;;;420:430;-1:-1:-1;331:3:294;;293:567;;;-1:-1:-1;953:20:294;;;;;-1:-1:-1;;;;112:876:294:o;534:347:292:-;643:49;;675:7;643:49;-1:-1:-1;;;;;;;706:25:292;;;702:173;;747:37;771:3;776:7;747:23;:37::i;702:173::-;815:49;833:9;844:5;851:3;856:7;815:17;:49::i;9709:102:25:-;9777:27;9787:2;9791:8;9777:27;;;;;;;;;;;;:9;:27::i;7055:325:289:-;7196:12;7221;7235:23;7262:6;-1:-1:-1;;;;;7262:19:289;7282:4;7262:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7220:67;;;;7304:69;7331:6;7339:7;7348:10;7360:12;7304:26;:69::i;3363:459:54:-;3430:7;3449:25;3477:17;1785:8;:15;;1711:96;3477:17;3449:45;;3504:24;3531:8;3504:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3555:9;3550:231;3574:17;3570:1;:21;3550:231;;;3628:7;3636:1;3628:10;;;;;;;;:::i;:::-;;;;;;;3616:8;:22;3612:159;;3662:5;;3658:73;;3698:7;3706:5;3710:1;3706;:5;:::i;:::-;3698:14;;;;;;;;:::i;:::-;;;;;;;3691:21;;;;;3363:459;;;:::o;3658:73::-;-1:-1:-1;3755:1:54;;3363:459;-1:-1:-1;;;;3363:459:54:o;3612:159::-;3593:3;;3550:231;;;-1:-1:-1;3790:25:54;;-1:-1:-1;;;3790:25:54;;34839:2:821;3790:25:54;;;34821:21:821;34878:2;34858:18;;;34851:30;-1:-1:-1;;;34897:18:821;;;34890:45;34952:18;;3790:25:54;34637:339:821;4591:362:54;4741:25;;4805:24;4816:13;4805:8;:24;:::i;:::-;4877:8;:22;;;;;;;;;;;;;-1:-1:-1;4910:16:54;;;:7;4877:22;4910:16;;;;4795:34;;-1:-1:-1;4795:34:54;;-1:-1:-1;4910:36:54;4929:17;4910:16;:36;:::i;:::-;;4591:362;;;;;;:::o;2482:292:292:-;2664:12;2682:2;-1:-1:-1;;;;;2682:7:292;2698:5;2682:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2663:46;;;2727:7;2719:48;;;;-1:-1:-1;;;2719:48:292;;35393:2:821;2719:48:292;;;35375:21:821;35432:2;35412:18;;;35405:30;-1:-1:-1;;;35451:18:821;;;35444:58;35519:18;;2719:48:292;35191:352:821;2061:358:292;2184:3;-1:-1:-1;;;;;2175:12:292;:5;-1:-1:-1;;;;;2175:12:292;;2171:49;2203:7;2171:49;2251:4;-1:-1:-1;;;;;2234:22:292;;;2230:183;;2272:44;-1:-1:-1;;;;;2272:30:292;;2303:3;2308:7;2272:30;:44::i;2230:183::-;2347:55;-1:-1:-1;;;;;2347:34:292;;2382:5;2389:3;2394:7;2347:34;:55::i;10171:1678:25:-;10259:20;10282:13;-1:-1:-1;;;;;10309:16:25;;10305:48;;10334:19;;-1:-1:-1;;;10334:19:25;;;;;;;;;;;10305:48;10367:8;10379:1;10367:13;10363:44;;10389:18;;-1:-1:-1;;;10389:18:25;;;;;;;;;;;10363:44;-1:-1:-1;;;;;10750:16:25;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;10808:49:25;;-1:-1:-1;;;;;10750:44:25;;;;;;;10808:49;;;-1:-1:-1;;;;;;;;;10750:44:25;;;;;;10808:49;;;;;;;;;;;;;;;;10872:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;10921:66:25;;;-1:-1:-1;;;10971:15:25;10921:66;;;;;;;;;;;;;10872:25;;11065:23;;;;11107:15;;:13;:15::i;:::-;11103:618;;;11142:308;11172:38;;11197:12;;-1:-1:-1;;;;;11172:38:25;;;11189:1;;-1:-1:-1;;;;;;;;;;;11172:38:25;11189:1;;11172:38;11237:69;11276:1;11280:2;11284:14;;;;;;11300:5;11237:30;:69::i;:::-;11232:172;;11341:40;;-1:-1:-1;;;11341:40:25;;;;;;;;;;;11232:172;11445:3;11430:12;:18;11142:308;;11529:12;11512:13;;:29;11508:43;;11543:8;;;11508:43;11103:618;;;11590:117;11620:40;;11645:14;;;;;-1:-1:-1;;;;;11620:40:25;;;11637:1;;-1:-1:-1;;;;;;;;;;;11620:40:25;11637:1;;11620:40;11702:3;11687:12;:18;11590:117;;11103:618;-1:-1:-1;11734:13:25;:28;;;11782:60;;11815:2;11819:12;11833:8;11782:60;:::i;7668:628:289:-;7848:12;7876:7;7872:418;;;7903:10;:17;7924:1;7903:22;7899:286;;8118:18;8129:6;8118:10;:18::i;:::-;8110:60;;;;-1:-1:-1;;;8110:60:289;;35750:2:821;8110:60:289;;;35732:21:821;35789:2;35769:18;;;35762:30;35828:31;35808:18;;;35801:59;35877:18;;8110:60:289;35548:353:821;8110:60:289;-1:-1:-1;8205:10:289;8198:17;;7872:418;8246:33;8254:10;8266:12;8246:7;:33::i;759:175:228:-;841:86;861:5;891:23;;;916:2;920:5;868:58;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;868:58:228;;;;;;;;;;;;;;-1:-1:-1;;;;;868:58:228;-1:-1:-1;;;;;;868:58:228;;;;;;;;;;841:19;:86::i;940:203::-;1067:68;;-1:-1:-1;;;;;36164:15:821;;;1067:68:228;;;36146:34:821;36216:15;;36196:18;;;36189:43;36248:18;;;36241:34;;;1040:96:228;;1060:5;;-1:-1:-1;;;1090:27:228;36081:18:821;;1067:68:228;35906:375:821;8818:540:289;8977:17;;:21;8973:379;;9205:10;9199:17;9261:15;9248:10;9244:2;9240:19;9233:44;8973:379;9328:12;9321:20;;-1:-1:-1;;;9321:20:289;;;;;;;;:::i;3107:706:228:-;3526:23;3552:69;3580:4;3552:69;;;;;;;;;;;;;;;;;3560:5;-1:-1:-1;;;;;3552:27:228;;;:69;;;;;:::i;:::-;3635:17;;3526:95;;-1:-1:-1;3635:21:228;3631:176;;3730:10;3719:30;;;;;;;;;;;;:::i;:::-;3711:85;;;;-1:-1:-1;;;3711:85:228;;36738:2:821;3711:85:228;;;36720:21:821;36777:2;36757:18;;;36750:30;36816:34;36796:18;;;36789:62;-1:-1:-1;;;36867:18:821;;;36860:40;36917:19;;3711:85:228;36536:406:821;4108:223:530;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4241;5446;5460:23;5487:6;-1:-1:-1;;;;;5487:11:530;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:530:o;14:131:821:-;-1:-1:-1;;;;;;88:32:821;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;688:250::-;773:1;783:113;797:6;794:1;791:13;783:113;;;873:11;;;867:18;854:11;;;847:39;819:2;812:10;783:113;;;-1:-1:-1;;930:1:821;912:16;;905:27;688:250::o;943:271::-;985:3;1023:5;1017:12;1050:6;1045:3;1038:19;1066:76;1135:6;1128:4;1123:3;1119:14;1112:4;1105:5;1101:16;1066:76;:::i;:::-;1196:2;1175:15;-1:-1:-1;;1171:29:821;1162:39;;;;1203:4;1158:50;;943:271;-1:-1:-1;;943:271:821:o;1219:220::-;1368:2;1357:9;1350:21;1331:4;1388:45;1429:2;1418:9;1414:18;1406:6;1388:45;:::i;1652:180::-;1711:6;1764:2;1752:9;1743:7;1739:23;1735:32;1732:52;;;1780:1;1777;1770:12;1732:52;-1:-1:-1;1803:23:821;;1652:180;-1:-1:-1;1652:180:821:o;1837:173::-;1905:20;;-1:-1:-1;;;;;1954:31:821;;1944:42;;1934:70;;2000:1;1997;1990:12;1934:70;1837:173;;;:::o;2015:254::-;2083:6;2091;2144:2;2132:9;2123:7;2119:23;2115:32;2112:52;;;2160:1;2157;2150:12;2112:52;2183:29;2202:9;2183:29;:::i;:::-;2173:39;2259:2;2244:18;;;;2231:32;;-1:-1:-1;;;2015:254:821:o;2274:186::-;2333:6;2386:2;2374:9;2365:7;2361:23;2357:32;2354:52;;;2402:1;2399;2392:12;2354:52;2425:29;2444:9;2425:29;:::i;2647:328::-;2724:6;2732;2740;2793:2;2781:9;2772:7;2768:23;2764:32;2761:52;;;2809:1;2806;2799:12;2761:52;2832:29;2851:9;2832:29;:::i;:::-;2822:39;;2880:38;2914:2;2903:9;2899:18;2880:38;:::i;:::-;2870:48;;2965:2;2954:9;2950:18;2937:32;2927:42;;2647:328;;;;;:::o;2980:248::-;3048:6;3056;3109:2;3097:9;3088:7;3084:23;3080:32;3077:52;;;3125:1;3122;3115:12;3077:52;-1:-1:-1;;3148:23:821;;;3218:2;3203:18;;;3190:32;;-1:-1:-1;2980:248:821:o;3233:274::-;-1:-1:-1;;;;;3425:32:821;;;;3407:51;;3489:2;3474:18;;3467:34;3395:2;3380:18;;3233:274::o;3512:118::-;3598:5;3591:13;3584:21;3577:5;3574:32;3564:60;;3620:1;3617;3610:12;3635:524;3735:6;3743;3796:2;3784:9;3775:7;3771:23;3767:32;3764:52;;;3812:1;3809;3802:12;3764:52;3852:9;3839:23;-1:-1:-1;;;;;3877:6:821;3874:30;3871:50;;;3917:1;3914;3907:12;3871:50;3940:22;;3996:3;3978:16;;;3974:26;3971:46;;;4013:1;4010;4003:12;3971:46;4036:2;-1:-1:-1;4088:2:821;4073:18;;4060:32;4101:28;4060:32;4101:28;:::i;:::-;4148:5;4138:15;;;3635:524;;;;;:::o;4454:163::-;4521:5;4566:3;4557:6;4552:3;4548:16;4544:26;4541:46;;;4583:1;4580;4573:12;4541:46;-1:-1:-1;4605:6:821;4454:163;-1:-1:-1;4454:163:821:o;4622:127::-;4683:10;4678:3;4674:20;4671:1;4664:31;4714:4;4711:1;4704:15;4738:4;4735:1;4728:15;4754:275;4825:2;4819:9;4890:2;4871:13;;-1:-1:-1;;4867:27:821;4855:40;;-1:-1:-1;;;;;4910:34:821;;4946:22;;;4907:62;4904:88;;;4972:18;;:::i;:::-;5008:2;5001:22;4754:275;;-1:-1:-1;4754:275:821:o;5034:186::-;5082:4;-1:-1:-1;;;;;5107:6:821;5104:30;5101:56;;;5137:18;;:::i;:::-;-1:-1:-1;5203:2:821;5182:15;-1:-1:-1;;5178:29:821;5209:4;5174:40;;5034:186::o;5225:336::-;5289:5;5318:52;5334:35;5362:6;5334:35;:::i;:::-;5318:52;:::i;:::-;5309:61;;5393:6;5386:5;5379:21;5433:3;5424:6;5419:3;5415:16;5412:25;5409:45;;;5450:1;5447;5440:12;5409:45;5499:6;5494:3;5487:4;5480:5;5476:16;5463:43;5553:1;5546:4;5537:6;5530:5;5526:18;5522:29;5515:40;5225:336;;;;;:::o;5566:220::-;5608:5;5661:3;5654:4;5646:6;5642:17;5638:27;5628:55;;5679:1;5676;5669:12;5628:55;5701:79;5776:3;5767:6;5754:20;5747:4;5739:6;5735:17;5701:79;:::i;5791:877::-;5939:6;5947;5955;5963;5971;5979;6032:3;6020:9;6011:7;6007:23;6003:33;6000:53;;;6049:1;6046;6039:12;6000:53;6072:29;6091:9;6072:29;:::i;:::-;6062:39;;6148:2;6137:9;6133:18;6120:32;6110:42;;6171:38;6205:2;6194:9;6190:18;6171:38;:::i;:::-;6161:48;;6256:2;6245:9;6241:18;6228:32;6218:42;;6311:3;6300:9;6296:19;6283:33;-1:-1:-1;;;;;6376:2:821;6368:6;6365:14;6362:34;;;6392:1;6389;6382:12;6362:34;6415:74;6481:7;6472:6;6461:9;6457:22;6415:74;:::i;:::-;6405:84;;6542:3;6531:9;6527:19;6514:33;6498:49;;6572:2;6562:8;6559:16;6556:36;;;6588:1;6585;6578:12;6556:36;;6611:51;6654:7;6643:8;6632:9;6628:24;6611:51;:::i;:::-;6601:61;;;5791:877;;;;;;;;:::o;6673:450::-;6742:6;6795:2;6783:9;6774:7;6770:23;6766:32;6763:52;;;6811:1;6808;6801:12;6763:52;6851:9;6838:23;-1:-1:-1;;;;;6876:6:821;6873:30;6870:50;;;6916:1;6913;6906:12;6870:50;6939:22;;6992:4;6984:13;;6980:27;-1:-1:-1;6970:55:821;;7021:1;7018;7011:12;6970:55;7044:73;7109:7;7104:2;7091:16;7086:2;7082;7078:11;7044:73;:::i;7128:322::-;7205:6;7213;7221;7274:2;7262:9;7253:7;7249:23;7245:32;7242:52;;;7290:1;7287;7280:12;7242:52;7326:9;7313:23;7303:33;;7355:38;7389:2;7378:9;7374:18;7355:38;:::i;7455:347::-;7506:8;7516:6;7570:3;7563:4;7555:6;7551:17;7547:27;7537:55;;7588:1;7585;7578:12;7537:55;-1:-1:-1;7611:20:821;;-1:-1:-1;;;;;7643:30:821;;7640:50;;;7686:1;7683;7676:12;7640:50;7723:4;7715:6;7711:17;7699:29;;7775:3;7768:4;7759:6;7751;7747:19;7743:30;7740:39;7737:59;;;7792:1;7789;7782:12;7737:59;7455:347;;;;;:::o;7807:477::-;7886:6;7894;7902;7955:2;7943:9;7934:7;7930:23;7926:32;7923:52;;;7971:1;7968;7961:12;7923:52;8007:9;7994:23;7984:33;;8068:2;8057:9;8053:18;8040:32;-1:-1:-1;;;;;8087:6:821;8084:30;8081:50;;;8127:1;8124;8117:12;8081:50;8166:58;8216:7;8207:6;8196:9;8192:22;8166:58;:::i;:::-;7807:477;;8243:8;;-1:-1:-1;8140:84:821;;-1:-1:-1;;;;7807:477:821:o;8512:315::-;8577:6;8585;8638:2;8626:9;8617:7;8613:23;8609:32;8606:52;;;8654:1;8651;8644:12;8606:52;8677:29;8696:9;8677:29;:::i;8832:626::-;8929:6;8937;8990:2;8978:9;8969:7;8965:23;8961:32;8958:52;;;9006:1;9003;8996:12;8958:52;9046:9;9033:23;-1:-1:-1;;;;;9116:2:821;9108:6;9105:14;9102:34;;;9132:1;9129;9122:12;9102:34;9170:6;9159:9;9155:22;9145:32;;9215:7;9208:4;9204:2;9200:13;9196:27;9186:55;;9237:1;9234;9227:12;9186:55;9277:2;9264:16;9303:2;9295:6;9292:14;9289:34;;;9319:1;9316;9309:12;9289:34;9372:7;9367:2;9357:6;9354:1;9350:14;9346:2;9342:23;9338:32;9335:45;9332:65;;;9393:1;9390;9383:12;9332:65;9424:2;9416:11;;;;;9446:6;;-1:-1:-1;8832:626:821;;-1:-1:-1;;;;8832:626:821:o;9463:801::-;9623:4;9652:2;9692;9681:9;9677:18;9722:2;9711:9;9704:21;9745:6;9780;9774:13;9811:6;9803;9796:22;9849:2;9838:9;9834:18;9827:25;;9911:2;9901:6;9898:1;9894:14;9883:9;9879:30;9875:39;9861:53;;9949:2;9941:6;9937:15;9970:1;9980:255;9994:6;9991:1;9988:13;9980:255;;;10087:2;10083:7;10071:9;10063:6;10059:22;10055:36;10050:3;10043:49;10115:40;10148:6;10139;10133:13;10115:40;:::i;:::-;10105:50;-1:-1:-1;10213:12:821;;;;10178:15;;;;10016:1;10009:9;9980:255;;;-1:-1:-1;10252:6:821;;9463:801;-1:-1:-1;;;;;;;9463:801:821:o;10269:537::-;10364:6;10372;10380;10388;10441:3;10429:9;10420:7;10416:23;10412:33;10409:53;;;10458:1;10455;10448:12;10409:53;10481:29;10500:9;10481:29;:::i;:::-;10471:39;;10529:38;10563:2;10552:9;10548:18;10529:38;:::i;:::-;10519:48;;10614:2;10603:9;10599:18;10586:32;10576:42;;10669:2;10658:9;10654:18;10641:32;-1:-1:-1;;;;;10688:6:821;10685:30;10682:50;;;10728:1;10725;10718:12;10682:50;10751:49;10792:7;10783:6;10772:9;10768:22;10751:49;:::i;:::-;10741:59;;;10269:537;;;;;;;:::o;10811:786::-;10911:6;10919;10927;10935;10943;10996:2;10984:9;10975:7;10971:23;10967:32;10964:52;;;11012:1;11009;11002:12;10964:52;11048:9;11035:23;11025:33;;11109:2;11098:9;11094:18;11081:32;-1:-1:-1;;;;;11173:2:821;11165:6;11162:14;11159:34;;;11189:1;11186;11179:12;11159:34;11228:58;11278:7;11269:6;11258:9;11254:22;11228:58;:::i;:::-;11305:8;;-1:-1:-1;11202:84:821;-1:-1:-1;11393:2:821;11378:18;;11365:32;;-1:-1:-1;11409:16:821;;;11406:36;;;11438:1;11435;11428:12;11406:36;;11477:60;11529:7;11518:8;11507:9;11503:24;11477:60;:::i;:::-;10811:786;;;;-1:-1:-1;10811:786:821;;-1:-1:-1;11556:8:821;;11451:86;10811:786;-1:-1:-1;;;10811:786:821:o;11602:769::-;11910:4;11939:3;11969:6;11958:9;11951:25;12012:6;12007:2;11996:9;11992:18;11985:34;12055:6;12050:2;12039:9;12035:18;12028:34;12098:6;12093:2;12082:9;12078:18;12071:34;12142:6;12136:3;12125:9;12121:19;12114:35;12186:6;12180:3;12169:9;12165:19;12158:35;12259:1;12255;12250:3;12246:11;12242:19;12234:6;12230:32;12224:3;12213:9;12209:19;12202:61;12300:2;12294:3;12283:9;12279:19;12272:31;12320:45;12361:2;12350:9;12346:18;12338:6;12320:45;:::i;:::-;12312:53;11602:769;-1:-1:-1;;;;;;;;;;;11602:769:821:o;12376:628::-;12464:6;12472;12480;12533:2;12521:9;12512:7;12508:23;12504:32;12501:52;;;12549:1;12546;12539:12;12501:52;12589:9;12576:23;-1:-1:-1;;;;;12659:2:821;12651:6;12648:14;12645:34;;;12675:1;12672;12665:12;12645:34;12698:49;12739:7;12730:6;12719:9;12715:22;12698:49;:::i;:::-;12688:59;;12800:2;12789:9;12785:18;12772:32;12756:48;;12829:2;12819:8;12816:16;12813:36;;;12845:1;12842;12835:12;12813:36;;12884:60;12936:7;12925:8;12914:9;12910:24;12884:60;:::i;13009:260::-;13077:6;13085;13138:2;13126:9;13117:7;13113:23;13109:32;13106:52;;;13154:1;13151;13144:12;13106:52;13177:29;13196:9;13177:29;:::i;:::-;13167:39;;13225:38;13259:2;13248:9;13244:18;13225:38;:::i;:::-;13215:48;;13009:260;;;;;:::o;13274:657::-;13404:6;13412;13420;13428;13436;13489:3;13477:9;13468:7;13464:23;13460:33;13457:53;;;13506:1;13503;13496:12;13457:53;13529:29;13548:9;13529:29;:::i;:::-;13519:39;;13605:2;13594:9;13590:18;13577:32;13567:42;;13628:38;13662:2;13651:9;13647:18;13628:38;:::i;:::-;13618:48;;13713:2;13702:9;13698:18;13685:32;13675:42;;13768:3;13757:9;13753:19;13740:33;-1:-1:-1;;;;;13788:6:821;13785:30;13782:50;;;13828:1;13825;13818:12;13782:50;13851:74;13917:7;13908:6;13897:9;13893:22;13851:74;:::i;:::-;13841:84;;;13274:657;;;;;;;;:::o;13936:380::-;14015:1;14011:12;;;;14058;;;14079:61;;14133:4;14125:6;14121:17;14111:27;;14079:61;14186:2;14178:6;14175:14;14155:18;14152:38;14149:161;;14232:10;14227:3;14223:20;14220:1;14213:31;14267:4;14264:1;14257:15;14295:4;14292:1;14285:15;14321:338;14523:2;14505:21;;;14562:2;14542:18;;;14535:30;-1:-1:-1;;;14596:2:821;14581:18;;14574:44;14650:2;14635:18;;14321:338::o;15006:127::-;15067:10;15062:3;15058:20;15055:1;15048:31;15098:4;15095:1;15088:15;15122:4;15119:1;15112:15;15138:127;15199:10;15194:3;15190:20;15187:1;15180:31;15230:4;15227:1;15220:15;15254:4;15251:1;15244:15;15270:168;15343:9;;;15374;;15391:15;;;15385:22;;15371:37;15361:71;;15412:18;;:::i;15443:127::-;15504:10;15499:3;15495:20;15492:1;15485:31;15535:4;15532:1;15525:15;15559:4;15556:1;15549:15;15575:120;15615:1;15641;15631:35;;15646:18;;:::i;:::-;-1:-1:-1;15680:9:821;;15575:120::o;16338:522::-;16416:4;16422:6;16482:11;16469:25;16576:2;16572:7;16561:8;16545:14;16541:29;16537:43;16517:18;16513:68;16503:96;;16595:1;16592;16585:12;16503:96;16622:33;;16674:20;;;-1:-1:-1;;;;;;16706:30:821;;16703:50;;;16749:1;16746;16739:12;16703:50;16782:4;16770:17;;-1:-1:-1;16813:14:821;16809:27;;;16799:38;;16796:58;;;16850:1;16847;16840:12;16991:543;17093:2;17088:3;17085:11;17082:446;;;17129:1;17153:5;17150:1;17143:16;17197:4;17194:1;17184:18;17267:2;17255:10;17251:19;17248:1;17244:27;17238:4;17234:38;17303:4;17291:10;17288:20;17285:47;;;-1:-1:-1;17326:4:821;17285:47;17381:2;17376:3;17372:12;17369:1;17365:20;17359:4;17355:31;17345:41;;17436:82;17454:2;17447:5;17444:13;17436:82;;;17499:17;;;17480:1;17469:13;17436:82;;17710:1345;17836:3;17830:10;-1:-1:-1;;;;;17855:6:821;17852:30;17849:56;;;17885:18;;:::i;:::-;17914:97;18004:6;17964:38;17996:4;17990:11;17964:38;:::i;:::-;17958:4;17914:97;:::i;:::-;18066:4;;18123:2;18112:14;;18140:1;18135:663;;;;18842:1;18859:6;18856:89;;;-1:-1:-1;18911:19:821;;;18905:26;18856:89;-1:-1:-1;;17667:1:821;17663:11;;;17659:24;17655:29;17645:40;17691:1;17687:11;;;17642:57;18958:81;;18105:944;;18135:663;16938:1;16931:14;;;16975:4;16962:18;;-1:-1:-1;;18171:20:821;;;18289:236;18303:7;18300:1;18297:14;18289:236;;;18392:19;;;18386:26;18371:42;;18484:27;;;;18452:1;18440:14;;;;18319:19;;18289:236;;;18293:3;18553:6;18544:7;18541:19;18538:201;;;18614:19;;;18608:26;-1:-1:-1;;18697:1:821;18693:14;;;18709:3;18689:24;18685:37;18681:42;18666:58;18651:74;;18538:201;-1:-1:-1;;;;;18785:1:821;18769:14;;;18765:22;18752:36;;-1:-1:-1;17710:1345:821:o;19060:267::-;19149:6;19144:3;19137:19;19201:6;19194:5;19187:4;19182:3;19178:14;19165:43;-1:-1:-1;19253:1:821;19228:16;;;19246:4;19224:27;;;19217:38;;;;19309:2;19288:15;;;-1:-1:-1;;19284:29:821;19275:39;;;19271:50;;19060:267::o;19332:1395::-;19551:2;19540:9;19533:21;19603:6;19590:20;19585:2;19574:9;19570:18;19563:48;19672:4;19664:6;19660:17;19647:31;19642:2;19631:9;19627:18;19620:59;19741:2;19733:6;19729:15;19716:29;19710:3;19699:9;19695:19;19688:58;19808:2;19800:6;19796:15;19783:29;19777:3;19766:9;19762:19;19755:58;19875:3;19867:6;19863:16;19850:30;19844:3;19833:9;19829:19;19822:59;19943:3;19935:6;19931:16;19918:30;19912:3;19901:9;19897:19;19890:59;19514:4;19978:36;20009:3;20001:6;19997:16;19978:36;:::i;:::-;-1:-1:-1;;;;;20075:38:821;20033:6;20055:18;;;20048:66;;;;20174:3;20162:16;;20149:30;;20230:14;20226:27;;;-1:-1:-1;;20222:41:821;20198:66;;20188:94;;20278:1;20275;20268:12;20188:94;20412:4;20304:31;;;20401:16;;;;20358:19;-1:-1:-1;;;;;20429:30:821;;20426:50;;;20472:1;20469;20462:12;20426:50;20521:6;20505:14;20501:27;20492:7;20488:41;20485:61;;;20542:1;20539;20532:12;20485:61;20583:2;20577:3;20566:9;20562:19;20555:31;20603:64;20662:3;20651:9;20647:19;20639:6;20630:7;20603:64;:::i;:::-;20595:72;;;;;20676:45;20715:4;20704:9;20700:20;20692:6;470:13;463:21;451:34;;400:91;20732:125;20797:9;;;20818:10;;;20815:36;;;20831:18;;:::i;21208:716::-;21296:6;21304;21357:2;21345:9;21336:7;21332:23;21328:32;21325:52;;;21373:1;21370;21363:12;21325:52;21406:9;21400:16;-1:-1:-1;;;;;21431:6:821;21428:30;21425:50;;;21471:1;21468;21461:12;21425:50;21494:22;;21547:4;21539:13;;21535:27;-1:-1:-1;21525:55:821;;21576:1;21573;21566:12;21525:55;21605:2;21599:9;21630:48;21646:31;21674:2;21646:31;:::i;21630:48::-;21701:2;21694:5;21687:17;21743:7;21736:4;21731:2;21727;21723:11;21719:22;21716:35;21713:55;;;21764:1;21761;21754:12;21713:55;21777:71;21845:2;21838:4;21831:5;21827:16;21820:4;21816:2;21812:13;21777:71;:::i;:::-;21912:4;21897:20;;;;21891:27;21867:5;;21891:27;;-1:-1:-1;;;;;21208:716:821:o;21929:516::-;22144:3;22182:6;22176:13;22198:66;22257:6;22252:3;22245:4;22237:6;22233:17;22198:66;:::i;:::-;22286:16;;22339:6;22331;22286:16;22311:35;22365:18;;;22392;;;-1:-1:-1;22434:4:821;22426:13;;21929:516;-1:-1:-1;;;21929:516:821:o;23318:352::-;23529:6;23521;23516:3;23503:33;23624:2;23595:15;;;;-1:-1:-1;;;;;;23591:45:821;23555:16;;23580:57;;;23661:2;23653:11;;23318:352;-1:-1:-1;23318:352:821:o;23675:452::-;23907:3;23945:6;23939:13;23961:66;24020:6;24015:3;24008:4;24000:6;23996:17;23961:66;:::i;:::-;-1:-1:-1;;;24049:16:821;;24074:18;;;-1:-1:-1;24119:1:821;24108:13;;23675:452;-1:-1:-1;23675:452:821:o;24132:496::-;24311:3;24349:6;24343:13;24365:66;24424:6;24419:3;24412:4;24404:6;24400:17;24365:66;:::i;:::-;24494:13;;24453:16;;;;24516:70;24494:13;24453:16;24563:4;24551:17;;24516:70;:::i;:::-;24602:20;;24132:496;-1:-1:-1;;;;24132:496:821:o;24633:388::-;24710:6;24718;24771:2;24759:9;24750:7;24746:23;24742:32;24739:52;;;24787:1;24784;24777:12;24739:52;24827:9;24814:23;-1:-1:-1;;;;;24852:6:821;24849:30;24846:50;;;24892:1;24889;24882:12;24846:50;24915:49;24956:7;24947:6;24936:9;24932:22;24915:49;:::i;:::-;24905:59;25011:2;24996:18;;;;24983:32;;-1:-1:-1;;;;24633:388:821:o;25026:313::-;25237:6;25229;25224:3;25211:33;25263:16;;;25288:18;;;25330:2;25322:11;;25026:313;-1:-1:-1;25026:313:821:o;25344:545::-;25437:4;25443:6;25503:11;25490:25;25597:2;25593:7;25582:8;25566:14;25562:29;25558:43;25538:18;25534:68;25524:96;;25616:1;25613;25606:12;25524:96;25643:33;;25695:20;;;-1:-1:-1;;;;;;25727:30:821;;25724:50;;;25770:1;25767;25760:12;25724:50;25803:4;25791:17;;-1:-1:-1;25854:1:821;25850:14;;;25834;25830:35;25820:46;;25817:66;;;25879:1;25876;25869:12;27714:339;27916:2;27898:21;;;27955:2;27935:18;;;27928:30;-1:-1:-1;;;27989:2:821;27974:18;;27967:45;28044:2;28029:18;;27714:339::o;29437:383::-;29634:2;29623:9;29616:21;29597:4;29660:45;29701:2;29690:9;29686:18;29678:6;29660:45;:::i;:::-;29753:9;29745:6;29741:22;29736:2;29725:9;29721:18;29714:50;29781:33;29807:6;29799;29781:33;:::i;:::-;29773:41;29437:383;-1:-1:-1;;;;;29437:383:821:o;29825:489::-;-1:-1:-1;;;;;30094:15:821;;;30076:34;;30146:15;;30141:2;30126:18;;30119:43;30193:2;30178:18;;30171:34;;;30241:3;30236:2;30221:18;;30214:31;;;30019:4;;30262:46;;30288:19;;30280:6;30262:46;:::i;30319:249::-;30388:6;30441:2;30429:9;30420:7;30416:23;30412:32;30409:52;;;30457:1;30454;30447:12;30409:52;30489:9;30483:16;30508:30;30532:5;30508:30;:::i;30917:135::-;30956:3;30977:17;;;30974:43;;30997:18;;:::i;:::-;-1:-1:-1;31044:1:821;31033:13;;30917:135::o;31057:128::-;31124:9;;;31145:11;;;31142:37;;;31159:18;;:::i;31190:112::-;31222:1;31248;31238:35;;31253:18;;:::i;:::-;-1:-1:-1;31287:9:821;;31190:112::o;33582:506::-;33825:6;33814:9;33807:25;33868:2;33863;33852:9;33848:18;33841:30;33788:4;33894:62;33952:2;33941:9;33937:18;33929:6;33921;33894:62;:::i;:::-;34004:9;33996:6;33992:22;33987:2;33976:9;33972:18;33965:50;34032;34075:6;34067;34059;34032:50;:::i;:::-;34024:58;33582:506;-1:-1:-1;;;;;;;;33582:506:821:o;34345:287::-;34474:3;34512:6;34506:13;34528:66;34587:6;34582:3;34575:4;34567:6;34563:17;34528:66;:::i;:::-;34610:16;;;;;34345:287;-1:-1:-1;;34345:287:821:o;36286:245::-;36353:6;36406:2;36394:9;36385:7;36381:23;36377:32;36374:52;;;36422:1;36419;36412:12;36374:52;36454:9;36448:16;36473:28;36495:5;36473:28;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "batchFrozen(uint256)": "83040532",
    "burn(uint256)": "42966c68",
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": "84bb1e42",
    "claimCondition()": "d637ed59",
    "contractURI()": "e8a3d485",
    "encryptDecrypt(bytes,bytes)": "e7150322",
    "encryptedData(uint256)": "a05112fc",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRevealURI(uint256,bytes)": "9fc4d68f",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "getSupplyClaimedByWallet(address)": "35b65e1f",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isEncryptedBatch(uint256)": "492e224b",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToClaim()": "acd083f8",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "primarySaleRecipient()": "079fe40e",
    "reveal(uint256,bytes)": "ce805642",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": "426cfaf3",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setPrimarySaleRecipient(address)": "6f4f2837",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": "eec8897c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_primarySaleRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"TokenURIRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encryptDecrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"getRevealURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getSupplyClaimedByWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"isEncryptedBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySaleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"_condition\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setPrimarySaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"DefaultRoyalty(address,uint256)\":{\"details\":\"Emitted when royalty info is updated.\"},\"MetadataFrozen()\":{\"details\":\"This event emits when the metadata of all tokens are frozen. While not currently supported by marketplaces, this event allows future indexing if desired.\"},\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"},\"PrimarySaleRecipientUpdated(address)\":{\"details\":\"Emitted when a new sale recipient is set.\"},\"RoyaltyForToken(uint256,address,uint256)\":{\"details\":\"Emitted when royalty recipient for tokenId is set\"},\"TokenURIRevealed(uint256,string)\":{\"details\":\"Emitted when tokens are revealed.\"},\"TokensLazyMinted(uint256,uint256,string,bytes)\":{\"details\":\"Emitted when tokens are lazy minted.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"details\":\"Lets an account claim tokens.\"},\"constructor\":{\"params\":{\"_defaultAdmin\":\"The default admin of the contract.\",\"_name\":\"The name of the contract.\",\"_primarySaleRecipient\":\"The address to receive primary sale value.\",\"_royaltyBps\":\"The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\",\"_royaltyRecipient\":\"The address to receive royalties.\",\"_symbol\":\"The symbol of the contract.\"}},\"encryptDecrypt(bytes,bytes)\":{\"details\":\"Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\",\"params\":{\"data\":\"Bytes of data to encrypt/decrypt.\",\"key\":\"Secure key used by caller for encryption/decryption.\"},\"returns\":{\"result\":\" Output after encryption/decryption of given data.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRevealURI(uint256,bytes)\":{\"details\":\"Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.\",\"params\":{\"_batchId\":\"ID of the batch for which URI is being revealed.\",\"_key\":\"Secure key used by caller/admin for encryption of baseURI.\"},\"returns\":{\"revealedURI\":\"Decrypted base URI.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"getSupplyClaimedByWallet(address)\":{\"details\":\"Returns the supply claimed by claimer for active conditionId.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isEncryptedBatch(uint256)\":{\"details\":\"Returns `true` if `_batchId`'s base URI is encrypted.\",\"params\":{\"_batchId\":\"ID of a batch of NFTs.\"}},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"primarySaleRecipient()\":{\"details\":\"Returns primary sale recipient address.\"},\"reveal(uint256,bytes)\":{\"params\":{\"_index\":\"The ID for the batch of delayed-reveal NFTs to reveal.\",\"_key\":\"The key with which the base URI for the relevant batch of NFTs was encrypted.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"details\":\"Lets a contract admin set claim conditions.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setPrimarySaleRecipient(address)\":{\"details\":\"Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\",\"params\":{\"_saleRecipient\":\"Address to be set as new recipient of primary sales.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))\":{\"details\":\"Checks a request to claim NFTs against the active claim condition's criteria.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed via `claim`.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"constructor\":{\"notice\":\"Initializes the contract during construction.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"encryptDecrypt(bytes,bytes)\":{\"notice\":\"Encrypt/decrypt data on chain.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRevealURI(uint256,bytes)\":{\"notice\":\"Returns revealed URI for a batch of NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isEncryptedBatch(uint256)\":{\"notice\":\"Returns whether the relvant batch of NFTs is subject to a delayed reveal.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToClaim()\":{\"notice\":\"The tokenId assigned to the next new NFT to be claimed.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"reveal(uint256,bytes)\":{\"notice\":\"Lets an authorized address reveal a batch of delayed reveal NFTs.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setPrimarySaleRecipient(address)\":{\"notice\":\"Updates primary sale recipient.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"}},\"notice\":\"BASE:      ERC721A      EXTENSION: DropSinglePhase  The `ERC721Drop` contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.  It includes the following additions to standard ERC721 logic:      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism for lazy minted tokens. It lets  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint lazy minted tokens.  The `ERC721Drop` contract lets you lazy mint tokens, and distribute those lazy minted tokens via the drop mechanism.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721Drop.sol\":\"ERC721Drop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC721Drop.sol\":{\"keccak256\":\"0x55a582b9c74d789087b306018959f2d0e0a8d48b3203bb51243cc5c4c9020def\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b1d0679a97bc64c2889fda7e136b8268edf9f9d9275c46a7ea82081c18d6b371\",\"dweb:/ipfs/QmTZHKF1QJrJPcdmQpqL8VzhmAFRVXK5p8WceSXWE9mWZS\"]},\"contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"contracts/eip/ERC721AVirtualApprove.sol\":{\"keccak256\":\"0x6547a787b5ac8032fddbee8d058d520ef8da5c5808b89d47b11bd5ff27d32afc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fde24fcc2b49c889651aac81bff6f1fa8786e55a6f65c1e3f052666dff71143\",\"dweb:/ipfs/QmW6YArfXiUzQsDZHoTeWsZYkrMmAVTpttnEsmYGqPzQWx\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC20.sol\":{\"keccak256\":\"0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a08cdc1bfc92ed80fc6686fb51a018b896ee862ac9fa1a1599b3fa0198760ce8\",\"dweb:/ipfs/QmTxqXNnbht1GfzkTAKpQnpZdEADS9YXZdE8Cdr6cSJrNP\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6\",\"dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT\"]},\"contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf\",\"dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj\"]},\"contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"contracts/eip/interface/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365\",\"dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DelayedReveal.sol\":{\"keccak256\":\"0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3\",\"dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6\"]},\"contracts/extension/DropSinglePhase.sol\":{\"keccak256\":\"0xf44716630a3fd79499f1fee77324c28068f29e518edd784f548c65195029cd4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0c54dc4d5e409cbf6870d654b5e90e7ed4e462ab421a578c7042f85c47cd784b\",\"dweb:/ipfs/QmTMWwiYP36wEMbQRJ6m8rmLRymVJCKHhHuwxpHqnhpBVR\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e\",\"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/PrimarySale.sol\":{\"keccak256\":\"0x18c6ef2ca61c26a6885529abf17cbb668fa8cbc21d49337dfb778b9431fc58eb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://46beec7099679394ef4e35541056cc3049570f26fb7c30ac1811096ad4a7dab8\",\"dweb:/ipfs/QmTdLQbxxvVpdJk8bgAjATKP9tW1qvSwzmdsyXv3EBZiEE\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95\",\"dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox\"]},\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDelayedReveal.sol\":{\"keccak256\":\"0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138\",\"dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4\"]},\"contracts/extension/interface/IDropSinglePhase.sol\":{\"keccak256\":\"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9\",\"dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IPrimarySale.sol\":{\"keccak256\":\"0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869\",\"dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e\",\"dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd\"]},\"contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xda67ad8d28cb66bbef1831a14d3506e3d0ac8c8446990a63474f4e56037f1a58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cda94d0193ca3e3cf4ac4d561c0c668dffc3e9b2c55c5454e9b03a12fd7141fb\",\"dweb:/ipfs/Qmbaw5cPuCmqE7hy8CpM3ibFC77TMWnH4jGDcWduvdNZaA\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/infra/interface/IWETH.sol\":{\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1\",\"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU\"]},\"contracts/lib/Address.sol\":{\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5\",\"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn\"]},\"contracts/lib/CurrencyTransferLib.sol\":{\"keccak256\":\"0x98c7ce207342926b3145a95c1f0781dec816ac831fc35256dd2a8787b8f161ac\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0b42e9253d38d4051a817dd3387c388daea5e99e378a7e0f07fbe98d2bf4e006\",\"dweb:/ipfs/QmQ1ZHDwYrAMtYe39HeCFSZbuvDAsVJAEozUCk3xSWLHZ1\"]},\"contracts/lib/MerkleProof.sol\":{\"keccak256\":\"0x00d989813c0653bd2f45623a73d805512c9070c7f0e8ad30838954dcf6a5acad\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://31de8046c697ed04df40a33a6b6087dedd41a85ef8c79bf7712507d5b9839732\",\"dweb:/ipfs/QmSXSeDCbLt1hwEcZyutFrNLPBbBQm1PKiE89hp5xLQ2wU\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "_primarySaleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PrimarySaleRecipientUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokenURIRevealed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimCondition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "key",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "encryptDecrypt",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "result",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "encryptedData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRevealURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupplyClaimedByWallet",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isEncryptedBatch",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "primarySaleRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reveal",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "_condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "_resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_saleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPrimarySaleRecipient"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isOverride",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "details": "Lets an account claim tokens."
          },
          "constructor": {
            "params": {
              "_defaultAdmin": "The default admin of the contract.",
              "_name": "The name of the contract.",
              "_primarySaleRecipient": "The address to receive primary sale value.",
              "_royaltyBps": "The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)",
              "_royaltyRecipient": "The address to receive royalties.",
              "_symbol": "The symbol of the contract."
            }
          },
          "encryptDecrypt(bytes,bytes)": {
            "details": "Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain",
            "params": {
              "data": "Bytes of data to encrypt/decrypt.",
              "key": "Secure key used by caller for encryption/decryption."
            },
            "returns": {
              "result": " Output after encryption/decryption of given data."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRevealURI(uint256,bytes)": {
            "details": "Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.",
            "params": {
              "_batchId": "ID of the batch for which URI is being revealed.",
              "_key": "Secure key used by caller/admin for encryption of baseURI."
            },
            "returns": {
              "revealedURI": "Decrypted base URI."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "getSupplyClaimedByWallet(address)": {
            "details": "Returns the supply claimed by claimer for active conditionId."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "isEncryptedBatch(uint256)": {
            "details": "Returns `true` if `_batchId`'s base URI is encrypted.",
            "params": {
              "_batchId": "ID of a batch of NFTs."
            }
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "The encrypted base URI + provenance hash for the batch of NFTs being lazy minted."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "primarySaleRecipient()": {
            "details": "Returns primary sale recipient address."
          },
          "reveal(uint256,bytes)": {
            "params": {
              "_index": "The ID for the batch of delayed-reveal NFTs to reveal.",
              "_key": "The key with which the base URI for the relevant batch of NFTs was encrypted."
            }
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "details": "Lets a contract admin set claim conditions."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setPrimarySaleRecipient(address)": {
            "details": "Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.",
            "params": {
              "_saleRecipient": "Address to be set as new recipient of primary sales."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": {
            "details": "Checks a request to claim NFTs against the active claim condition's criteria."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "constructor": {
            "notice": "Initializes the contract during construction."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "encryptDecrypt(bytes,bytes)": {
            "notice": "Encrypt/decrypt data on chain."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRevealURI(uint256,bytes)": {
            "notice": "Returns revealed URI for a batch of NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isEncryptedBatch(uint256)": {
            "notice": "Returns whether the relvant batch of NFTs is subject to a delayed reveal."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToClaim()": {
            "notice": "The tokenId assigned to the next new NFT to be claimed."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "reveal(uint256,bytes)": {
            "notice": "Lets an authorized address reveal a batch of delayed reveal NFTs."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setPrimarySaleRecipient(address)": {
            "notice": "Updates primary sale recipient."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "lib/sstore2/=lib/dynamic-contracts/lib/sstore2/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC721Drop.sol": "ERC721Drop"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC721Drop.sol": {
        "keccak256": "0x55a582b9c74d789087b306018959f2d0e0a8d48b3203bb51243cc5c4c9020def",
        "urls": [
          "bzz-raw://b1d0679a97bc64c2889fda7e136b8268edf9f9d9275c46a7ea82081c18d6b371",
          "dweb:/ipfs/QmTZHKF1QJrJPcdmQpqL8VzhmAFRVXK5p8WceSXWE9mWZS"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "contracts/eip/ERC721AVirtualApprove.sol": {
        "keccak256": "0x6547a787b5ac8032fddbee8d058d520ef8da5c5808b89d47b11bd5ff27d32afc",
        "urls": [
          "bzz-raw://1fde24fcc2b49c889651aac81bff6f1fa8786e55a6f65c1e3f052666dff71143",
          "dweb:/ipfs/QmW6YArfXiUzQsDZHoTeWsZYkrMmAVTpttnEsmYGqPzQWx"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC20.sol": {
        "keccak256": "0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1",
        "urls": [
          "bzz-raw://a08cdc1bfc92ed80fc6686fb51a018b896ee862ac9fa1a1599b3fa0198760ce8",
          "dweb:/ipfs/QmTxqXNnbht1GfzkTAKpQnpZdEADS9YXZdE8Cdr6cSJrNP"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa",
        "urls": [
          "bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6",
          "dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC721.sol": {
        "keccak256": "0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea",
        "urls": [
          "bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf",
          "dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345",
        "urls": [
          "bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365",
          "dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DelayedReveal.sol": {
        "keccak256": "0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242",
        "urls": [
          "bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3",
          "dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DropSinglePhase.sol": {
        "keccak256": "0xf44716630a3fd79499f1fee77324c28068f29e518edd784f548c65195029cd4f",
        "urls": [
          "bzz-raw://0c54dc4d5e409cbf6870d654b5e90e7ed4e462ab421a578c7042f85c47cd784b",
          "dweb:/ipfs/QmTMWwiYP36wEMbQRJ6m8rmLRymVJCKHhHuwxpHqnhpBVR"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
        "urls": [
          "bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
          "dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/PrimarySale.sol": {
        "keccak256": "0x18c6ef2ca61c26a6885529abf17cbb668fa8cbc21d49337dfb778b9431fc58eb",
        "urls": [
          "bzz-raw://46beec7099679394ef4e35541056cc3049570f26fb7c30ac1811096ad4a7dab8",
          "dweb:/ipfs/QmTdLQbxxvVpdJk8bgAjATKP9tW1qvSwzmdsyXv3EBZiEE"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501",
        "urls": [
          "bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95",
          "dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDelayedReveal.sol": {
        "keccak256": "0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123",
        "urls": [
          "bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138",
          "dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDropSinglePhase.sol": {
        "keccak256": "0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36",
        "urls": [
          "bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9",
          "dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IPrimarySale.sol": {
        "keccak256": "0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004",
        "urls": [
          "bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869",
          "dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d",
        "urls": [
          "bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e",
          "dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0xda67ad8d28cb66bbef1831a14d3506e3d0ac8c8446990a63474f4e56037f1a58",
        "urls": [
          "bzz-raw://cda94d0193ca3e3cf4ac4d561c0c668dffc3e9b2c55c5454e9b03a12fd7141fb",
          "dweb:/ipfs/Qmbaw5cPuCmqE7hy8CpM3ibFC77TMWnH4jGDcWduvdNZaA"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/infra/interface/IWETH.sol": {
        "keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
        "urls": [
          "bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
          "dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/Address.sol": {
        "keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
        "urls": [
          "bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
          "dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/CurrencyTransferLib.sol": {
        "keccak256": "0x98c7ce207342926b3145a95c1f0781dec816ac831fc35256dd2a8787b8f161ac",
        "urls": [
          "bzz-raw://0b42e9253d38d4051a817dd3387c388daea5e99e378a7e0f07fbe98d2bf4e006",
          "dweb:/ipfs/QmQ1ZHDwYrAMtYe39HeCFSZbuvDAsVJAEozUCk3xSWLHZ1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/MerkleProof.sol": {
        "keccak256": "0x00d989813c0653bd2f45623a73d805512c9070c7f0e8ad30838954dcf6a5acad",
        "urls": [
          "bzz-raw://31de8046c697ed04df40a33a6b6087dedd41a85ef8c79bf7712507d5b9839732",
          "dweb:/ipfs/QmSXSeDCbLt1hwEcZyutFrNLPBbBQm1PKiE89hp5xLQ2wU"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/Strings.sol": {
        "keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
        "urls": [
          "bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
          "dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
        ],
        "license": "Apache-2.0"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [
          "bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
          "dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC721Drop.sol",
    "id": 4794,
    "exportedSymbols": {
      "Address": [
        64760
      ],
      "BatchMintMetadata": [
        17840
      ],
      "Context": [
        49279
      ],
      "ContractMetadata": [
        18093
      ],
      "CurrencyTransferLib": [
        65175
      ],
      "DelayedReveal": [
        18252
      ],
      "DropSinglePhase": [
        20064
      ],
      "ERC721A": [
        12340
      ],
      "ERC721Drop": [
        4793
      ],
      "IClaimCondition": [
        32931
      ],
      "IContractMetadata": [
        33084
      ],
      "IDelayedReveal": [
        33115
      ],
      "IDropSinglePhase": [
        33357
      ],
      "IERC165": [
        13945
      ],
      "IERC2981": [
        14089
      ],
      "ILazyMint": [
        33463
      ],
      "IMulticall": [
        33577
      ],
      "IOwnable": [
        33834
      ],
      "IPrimarySale": [
        33997
      ],
      "IRoyalty": [
        34061
      ],
      "LazyMint": [
        20828
      ],
      "MerkleProof": [
        65274
      ],
      "Multicall": [
        21206
      ],
      "Ownable": [
        21764
      ],
      "PrimarySale": [
        22703
      ],
      "Royalty": [
        23031
      ],
      "Strings": [
        66084
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:12094:13",
    "nodes": [
      {
        "id": 4249,
        "nodeType": "PragmaDirective",
        "src": "39:23:13",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 4252,
        "nodeType": "ImportDirective",
        "src": "86:68:13",
        "nodes": [],
        "absolutePath": "contracts/eip/ERC721AVirtualApprove.sol",
        "file": "../eip/ERC721AVirtualApprove.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 12341,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4250,
              "name": "ERC721A",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 12340,
              "src": "95:7:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 4251,
              "name": "Context",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 49279,
              "src": "104:7:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4253,
        "nodeType": "ImportDirective",
        "src": "156:43:13",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 18094,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4254,
        "nodeType": "ImportDirective",
        "src": "200:36:13",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 21207,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4255,
        "nodeType": "ImportDirective",
        "src": "237:34:13",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 21765,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4256,
        "nodeType": "ImportDirective",
        "src": "272:34:13",
        "nodes": [],
        "absolutePath": "contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 23032,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4257,
        "nodeType": "ImportDirective",
        "src": "307:44:13",
        "nodes": [],
        "absolutePath": "contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 17841,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4258,
        "nodeType": "ImportDirective",
        "src": "352:38:13",
        "nodes": [],
        "absolutePath": "contracts/extension/PrimarySale.sol",
        "file": "../extension/PrimarySale.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 22704,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4259,
        "nodeType": "ImportDirective",
        "src": "391:42:13",
        "nodes": [],
        "absolutePath": "contracts/extension/DropSinglePhase.sol",
        "file": "../extension/DropSinglePhase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 20065,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4260,
        "nodeType": "ImportDirective",
        "src": "434:35:13",
        "nodes": [],
        "absolutePath": "contracts/extension/LazyMint.sol",
        "file": "../extension/LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 20829,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4261,
        "nodeType": "ImportDirective",
        "src": "470:40:13",
        "nodes": [],
        "absolutePath": "contracts/extension/DelayedReveal.sol",
        "file": "../extension/DelayedReveal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 18253,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4262,
        "nodeType": "ImportDirective",
        "src": "512:28:13",
        "nodes": [],
        "absolutePath": "contracts/lib/Strings.sol",
        "file": "../lib/Strings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 66085,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4264,
        "nodeType": "ImportDirective",
        "src": "541:69:13",
        "nodes": [],
        "absolutePath": "contracts/lib/CurrencyTransferLib.sol",
        "file": "../lib/CurrencyTransferLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4794,
        "sourceUnit": 65176,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4263,
              "name": "CurrencyTransferLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 65175,
              "src": "550:19:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4793,
        "nodeType": "ContractDefinition",
        "src": "1675:10457:13",
        "nodes": [
          {
            "id": 4288,
            "nodeType": "UsingForDirective",
            "src": "1873:26:13",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 4286,
              "name": "Strings",
              "nameLocations": [
                "1879:7:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66084,
              "src": "1879:7:13"
            },
            "typeName": {
              "id": 4287,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1891:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 4322,
            "nodeType": "FunctionDefinition",
            "src": "2610:404:13",
            "nodes": [],
            "body": {
              "id": 4321,
              "nodeType": "Block",
              "src": "2846:168:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4309,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4291,
                        "src": "2868:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4308,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21757,
                      "src": "2856:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4310,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2856:26:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4311,
                  "nodeType": "ExpressionStatement",
                  "src": "2856:26:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4313,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4297,
                        "src": "2917:17:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4314,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4299,
                        "src": "2936:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 4312,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22962,
                      "src": "2892:24:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4315,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2892:56:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4316,
                  "nodeType": "ExpressionStatement",
                  "src": "2892:56:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4318,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4301,
                        "src": "2985:21:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4317,
                      "name": "_setupPrimarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22696,
                      "src": "2958:26:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4319,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2958:49:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4320,
                  "nodeType": "ExpressionStatement",
                  "src": "2958:49:13"
                }
              ]
            },
            "documentation": {
              "id": 4289,
              "nodeType": "StructuredDocumentation",
              "src": "2085:520:13",
              "text": " @notice Initializes the contract during construction.\n @param _defaultAdmin     The default admin of the contract.\n @param _name             The name of the contract.\n @param _symbol           The symbol of the contract.\n @param _royaltyRecipient The address to receive royalties.\n @param _royaltyBps       The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\n @param _primarySaleRecipient The address to receive primary sale value."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4304,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4293,
                    "src": "2830:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4305,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4295,
                    "src": "2837:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4306,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4303,
                  "name": "ERC721A",
                  "nameLocations": [
                    "2822:7:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12340,
                  "src": "2822:7:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "2822:23:13"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 4302,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4291,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "2639:13:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4322,
                  "src": "2631:21:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4290,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2631:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4293,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2676:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4322,
                  "src": "2662:19:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4292,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2662:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4295,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2705:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4322,
                  "src": "2691:21:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4294,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2691:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4297,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "2730:17:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4322,
                  "src": "2722:25:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4296,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2722:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4299,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "2765:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4322,
                  "src": "2757:19:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4298,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2757:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4301,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "2794:21:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4322,
                  "src": "2786:29:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4300,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2786:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2621:200:13"
            },
            "returnParameters": {
              "id": 4307,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2846:0:13"
            },
            "scope": 4793,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4353,
            "nodeType": "FunctionDefinition",
            "src": "3306:444:13",
            "nodes": [],
            "body": {
              "id": 4352,
              "nodeType": "Block",
              "src": "3415:335:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 4350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 4343,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4339,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 4335,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4333,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4325,
                            "src": "3444:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 4334,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3459:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "3444:25:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 4338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4336,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4325,
                            "src": "3519:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783830616335386364",
                            "id": 4337,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3534:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2158778573_by_1",
                              "typeString": "int_const 2158778573"
                            },
                            "value": "0x80ac58cd"
                          },
                          "src": "3519:25:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3444:100:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 4342,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4340,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4325,
                          "src": "3594:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783562356531333966",
                          "id": 4341,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3609:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1532892063_by_1",
                            "typeString": "int_const 1532892063"
                          },
                          "value": "0x5b5e139f"
                        },
                        "src": "3594:25:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "3444:175:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 4349,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4344,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4325,
                        "src": "3677:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4346,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14089,
                              "src": "3697:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$14089_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$14089_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 4345,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3692:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4347,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3692:14:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$14089",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 4348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3707:11:13",
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "3692:26:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "3677:41:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3444:274:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4332,
                  "id": 4351,
                  "nodeType": "Return",
                  "src": "3425:293:13"
                }
              ]
            },
            "baseFunctions": [
              11105,
              13944
            ],
            "documentation": {
              "id": 4323,
              "nodeType": "StructuredDocumentation",
              "src": "3200:101:13",
              "text": " @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\n @inheritdoc IERC165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "3315:17:13",
            "overrides": {
              "id": 4329,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 4327,
                  "name": "ERC721A",
                  "nameLocations": [
                    "3382:7:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12340,
                  "src": "3382:7:13"
                },
                {
                  "id": 4328,
                  "name": "IERC165",
                  "nameLocations": [
                    "3391:7:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13945,
                  "src": "3391:7:13"
                }
              ],
              "src": "3373:26:13"
            },
            "parameters": {
              "id": 4326,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4325,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "3340:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4353,
                  "src": "3333:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 4324,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "3333:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3332:20:13"
            },
            "returnParameters": {
              "id": 4332,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4331,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4353,
                  "src": "3409:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4330,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3409:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3408:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4401,
            "nodeType": "FunctionDefinition",
            "src": "4162:410:13",
            "nodes": [],
            "body": {
              "id": 4400,
              "nodeType": "Block",
              "src": "4251:321:13",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4363,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4363,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "4270:7:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 4400,
                      "src": "4262:15:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4362,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4262:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 4367,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4365,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4356,
                        "src": "4295:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4364,
                      "name": "_getBatchId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17631,
                      "src": "4283:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256,uint256)"
                      }
                    },
                    "id": 4366,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4283:21:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4261:43:13"
                },
                {
                  "assignments": [
                    4369
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4369,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "4328:8:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 4400,
                      "src": "4314:22:13",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 4368,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "4314:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4373,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4371,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4356,
                        "src": "4351:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4370,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17682,
                      "src": "4339:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 4372,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4339:21:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4314:46:13"
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 4375,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4363,
                        "src": "4392:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4374,
                      "name": "isEncryptedBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18251,
                      "src": "4375:16:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 4376,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4375:25:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4398,
                    "nodeType": "Block",
                    "src": "4479:87:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4391,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4369,
                                  "src": "4524:8:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 4392,
                                      "name": "_tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4356,
                                      "src": "4534:8:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4393,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4543:8:13",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 65898,
                                    "src": "4534:17:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4394,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4534:19:13",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 4389,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "4507:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4390,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4511:12:13",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "4507:16:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4395,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4507:47:13",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4388,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4500:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4387,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "4500:6:13",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4500:55:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4361,
                        "id": 4397,
                        "nodeType": "Return",
                        "src": "4493:62:13"
                      }
                    ]
                  },
                  "id": 4399,
                  "nodeType": "IfStatement",
                  "src": "4371:195:13",
                  "trueBody": {
                    "id": 4386,
                    "nodeType": "Block",
                    "src": "4402:71:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4381,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4369,
                                  "src": "4447:8:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 4382,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4457:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  }
                                ],
                                "expression": {
                                  "id": 4379,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "4430:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4380,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4434:12:13",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "4430:16:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4383,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4430:31:13",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4378,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4423:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4377,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "4423:6:13",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4384,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4423:39:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4361,
                        "id": 4385,
                        "nodeType": "Return",
                        "src": "4416:46:13"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              11349
            ],
            "documentation": {
              "id": 4354,
              "nodeType": "StructuredDocumentation",
              "src": "3940:217:13",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "4171:8:13",
            "overrides": {
              "id": 4358,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4218:8:13"
            },
            "parameters": {
              "id": 4357,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4356,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "4188:8:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4401,
                  "src": "4180:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4355,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4180:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4179:18:13"
            },
            "returnParameters": {
              "id": 4361,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4360,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4401,
                  "src": "4236:13:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4359,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4236:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4235:15:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4459,
            "nodeType": "FunctionDefinition",
            "src": "5386:551:13",
            "nodes": [],
            "body": {
              "id": 4458,
              "nodeType": "Block",
              "src": "5558:379:13",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4414,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4408,
                        "src": "5572:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "id": 4415,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5578:6:13",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "5572:12:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 4416,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5587:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "5572:16:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4450,
                  "nodeType": "IfStatement",
                  "src": "5568:293:13",
                  "trueBody": {
                    "id": 4449,
                    "nodeType": "Block",
                    "src": "5590:271:13",
                    "statements": [
                      {
                        "assignments": [
                          4419,
                          4421
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4419,
                            "mutability": "mutable",
                            "name": "encryptedURI",
                            "nameLocation": "5618:12:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 4449,
                            "src": "5605:25:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 4418,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5605:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 4421,
                            "mutability": "mutable",
                            "name": "provenanceHash",
                            "nameLocation": "5640:14:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 4449,
                            "src": "5632:22:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 4420,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "5632:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4431,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 4424,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4408,
                              "src": "5669:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "components": [
                                {
                                  "id": 4426,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5677:5:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 4425,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5677:5:13",
                                    "typeDescriptions": {}
                                  }
                                },
                                {
                                  "id": 4428,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5684:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 4427,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5684:7:13",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "id": 4429,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "5676:16:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            ],
                            "expression": {
                              "id": 4422,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "5658:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 4423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "5662:6:13",
                            "memberName": "decode",
                            "nodeType": "MemberAccess",
                            "src": "5658:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4430,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5658:35:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes32_$",
                            "typeString": "tuple(bytes memory,bytes32)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5604:89:13"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 4439,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4435,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4432,
                                "name": "encryptedURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4419,
                                "src": "5711:12:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 4433,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5724:6:13",
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "5711:19:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 4434,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5734:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "5711:24:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 4438,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 4436,
                              "name": "provenanceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4421,
                              "src": "5739:14:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "",
                              "id": 4437,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5757:2:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            },
                            "src": "5739:20:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "5711:48:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4448,
                        "nodeType": "IfStatement",
                        "src": "5707:144:13",
                        "trueBody": {
                          "id": 4447,
                          "nodeType": "Block",
                          "src": "5761:90:13",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 4443,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 4441,
                                      "name": "nextTokenIdToLazyMint",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 20762,
                                      "src": "5797:21:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "id": 4442,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4404,
                                      "src": "5821:7:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "5797:31:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 4444,
                                    "name": "_data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4408,
                                    "src": "5830:5:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "id": 4440,
                                  "name": "_setEncryptedData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 18119,
                                  "src": "5779:17:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                                    "typeString": "function (uint256,bytes memory)"
                                  }
                                },
                                "id": 4445,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5779:57:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4446,
                              "nodeType": "ExpressionStatement",
                              "src": "5779:57:13"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4453,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4404,
                        "src": "5896:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4454,
                        "name": "_baseURIForTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4406,
                        "src": "5905:17:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4455,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4408,
                        "src": "5924:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "id": 4451,
                        "name": "LazyMint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20828,
                        "src": "5878:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LazyMint_$20828_$",
                          "typeString": "type(contract LazyMint)"
                        }
                      },
                      "id": 4452,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5887:8:13",
                      "memberName": "lazyMint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 20821,
                      "src": "5878:17:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function (uint256,string calldata,bytes calldata) returns (uint256)"
                      }
                    },
                    "id": 4456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5878:52:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4413,
                  "id": 4457,
                  "nodeType": "Return",
                  "src": "5871:59:13"
                }
              ]
            },
            "baseFunctions": [
              20821
            ],
            "documentation": {
              "id": 4402,
              "nodeType": "StructuredDocumentation",
              "src": "4767:614:13",
              "text": "  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\n  @param _amount           The number of NFTs to lazy mint.\n  @param _baseURIForTokens The placeholder base URI for the 'n' number of NFTs being lazy minted, where the\n                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\n  @param _data             The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\n  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together."
            },
            "functionSelector": "d37c353b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "5395:8:13",
            "overrides": {
              "id": 4410,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5523:8:13"
            },
            "parameters": {
              "id": 4409,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4404,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "5421:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4459,
                  "src": "5413:15:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4403,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5413:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4406,
                  "mutability": "mutable",
                  "name": "_baseURIForTokens",
                  "nameLocation": "5454:17:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4459,
                  "src": "5438:33:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4405,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5438:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4408,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "5496:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4459,
                  "src": "5481:20:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4407,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5481:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5403:104:13"
            },
            "returnParameters": {
              "id": 4413,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4412,
                  "mutability": "mutable",
                  "name": "batchId",
                  "nameLocation": "5549:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4459,
                  "src": "5541:15:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4411,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5541:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5540:17:13"
            },
            "scope": 4793,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4468,
            "nodeType": "FunctionDefinition",
            "src": "6019:112:13",
            "nodes": [],
            "body": {
              "id": 4467,
              "nodeType": "Block",
              "src": "6086:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4465,
                    "name": "nextTokenIdToLazyMint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 20762,
                    "src": "6103:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4464,
                  "id": 4466,
                  "nodeType": "Return",
                  "src": "6096:28:13"
                }
              ]
            },
            "documentation": {
              "id": 4460,
              "nodeType": "StructuredDocumentation",
              "src": "5943:71:13",
              "text": "@notice The tokenId assigned to the next new NFT to be lazy minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "6028:17:13",
            "parameters": {
              "id": 4461,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6045:2:13"
            },
            "returnParameters": {
              "id": 4464,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4463,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "6077:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4462,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6077:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6076:9:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4477,
            "nodeType": "FunctionDefinition",
            "src": "6209:105:13",
            "nodes": [],
            "body": {
              "id": 4476,
              "nodeType": "Block",
              "src": "6277:37:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4474,
                    "name": "_currentIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10990,
                    "src": "6294:13:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4473,
                  "id": 4475,
                  "nodeType": "Return",
                  "src": "6287:20:13"
                }
              ]
            },
            "documentation": {
              "id": 4469,
              "nodeType": "StructuredDocumentation",
              "src": "6137:67:13",
              "text": "@notice The tokenId assigned to the next new NFT to be claimed."
            },
            "functionSelector": "acd083f8",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToClaim",
            "nameLocation": "6218:18:13",
            "parameters": {
              "id": 4470,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6236:2:13"
            },
            "returnParameters": {
              "id": 4473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4472,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4477,
                  "src": "6268:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4471,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6268:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6267:9:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4523,
            "nodeType": "FunctionDefinition",
            "src": "6793:411:13",
            "nodes": [],
            "body": {
              "id": 4522,
              "nodeType": "Block",
              "src": "6906:298:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 4489,
                          "name": "_canReveal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4769,
                          "src": "6924:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 4490,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6924:12:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a6564",
                        "id": 4491,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6938:16:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        },
                        "value": "Not authorized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        }
                      ],
                      "id": 4488,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6916:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4492,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6916:39:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4493,
                  "nodeType": "ExpressionStatement",
                  "src": "6916:39:13"
                },
                {
                  "assignments": [
                    4495
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4495,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "6974:7:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 4522,
                      "src": "6966:15:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4494,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6966:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4499,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4497,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4480,
                        "src": "7002:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4496,
                      "name": "getBatchIdAtIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17570,
                      "src": "6984:17:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 4498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6984:25:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6966:43:13"
                },
                {
                  "expression": {
                    "id": 4505,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4500,
                      "name": "revealedURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4486,
                      "src": "7019:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4502,
                          "name": "batchId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4495,
                          "src": "7046:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 4503,
                          "name": "_key",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4482,
                          "src": "7055:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        ],
                        "id": 4501,
                        "name": "getRevealURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18185,
                        "src": "7033:12:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_string_memory_ptr_$",
                          "typeString": "function (uint256,bytes calldata) view returns (string memory)"
                        }
                      },
                      "id": 4504,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7033:27:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "7019:41:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 4506,
                  "nodeType": "ExpressionStatement",
                  "src": "7019:41:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4508,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4495,
                        "src": "7089:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 4509,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7098:2:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 4507,
                      "name": "_setEncryptedData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18119,
                      "src": "7071:17:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bytes memory)"
                      }
                    },
                    "id": 4510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7071:30:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4511,
                  "nodeType": "ExpressionStatement",
                  "src": "7071:30:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4513,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4495,
                        "src": "7123:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4514,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4486,
                        "src": "7132:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4512,
                      "name": "_setBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17769,
                      "src": "7111:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 4515,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7111:33:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4516,
                  "nodeType": "ExpressionStatement",
                  "src": "7111:33:13"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4518,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4480,
                        "src": "7177:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4519,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4486,
                        "src": "7185:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4517,
                      "name": "TokenURIRevealed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33094,
                      "src": "7160:16:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 4520,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7160:37:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4521,
                  "nodeType": "EmitStatement",
                  "src": "7155:42:13"
                }
              ]
            },
            "baseFunctions": [
              33104
            ],
            "documentation": {
              "id": 4478,
              "nodeType": "StructuredDocumentation",
              "src": "6505:283:13",
              "text": "  @notice       Lets an authorized address reveal a batch of delayed reveal NFTs.\n  @param _index The ID for the batch of delayed-reveal NFTs to reveal.\n  @param _key   The key with which the base URI for the relevant batch of NFTs was encrypted."
            },
            "functionSelector": "ce805642",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "reveal",
            "nameLocation": "6802:6:13",
            "overrides": {
              "id": 4484,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6861:8:13"
            },
            "parameters": {
              "id": 4483,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4480,
                  "mutability": "mutable",
                  "name": "_index",
                  "nameLocation": "6817:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4523,
                  "src": "6809:14:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4479,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6809:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4482,
                  "mutability": "mutable",
                  "name": "_key",
                  "nameLocation": "6840:4:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4523,
                  "src": "6825:19:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4481,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "6825:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6808:37:13"
            },
            "returnParameters": {
              "id": 4487,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4486,
                  "mutability": "mutable",
                  "name": "revealedURI",
                  "nameLocation": "6893:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4523,
                  "src": "6879:25:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4485,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6879:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6878:27:13"
            },
            "scope": 4793,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4535,
            "nodeType": "FunctionDefinition",
            "src": "7663:87:13",
            "nodes": [],
            "body": {
              "id": 4534,
              "nodeType": "Block",
              "src": "7712:38:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4530,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4526,
                        "src": "7728:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 4531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7738:4:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 4529,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12053,
                        12235
                      ],
                      "referencedDeclaration": 12235,
                      "src": "7722:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 4532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7722:21:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4533,
                  "nodeType": "ExpressionStatement",
                  "src": "7722:21:13"
                }
              ]
            },
            "documentation": {
              "id": 4524,
              "nodeType": "StructuredDocumentation",
              "src": "7395:263:13",
              "text": "  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\n  @dev            ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\n  @param _tokenId The tokenId of the NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "7672:4:13",
            "parameters": {
              "id": 4527,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4526,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "7685:8:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4535,
                  "src": "7677:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4525,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7677:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7676:18:13"
            },
            "returnParameters": {
              "id": 4528,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7712:0:13"
            },
            "scope": 4793,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 4565,
            "nodeType": "FunctionDefinition",
            "src": "8075:322:13",
            "nodes": [],
            "body": {
              "id": 4564,
              "nodeType": "Block",
              "src": "8267:130:13",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4557,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4555,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4553,
                        "name": "_currentIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10990,
                        "src": "8281:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 4554,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4540,
                        "src": "8297:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "8281:25:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 4556,
                      "name": "nextTokenIdToLazyMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20762,
                      "src": "8309:21:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8281:49:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4563,
                  "nodeType": "IfStatement",
                  "src": "8277:114:13",
                  "trueBody": {
                    "id": 4562,
                    "nodeType": "Block",
                    "src": "8332:59:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "4e6f7420656e6f756768206d696e74656420746f6b656e73",
                              "id": 4559,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8353:26:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_216c1c79df6bc6b4ca2e9f8bc75bb997ac42d7ee88d47eef4612635625467029",
                                "typeString": "literal_string \"Not enough minted tokens\""
                              },
                              "value": "Not enough minted tokens"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_216c1c79df6bc6b4ca2e9f8bc75bb997ac42d7ee88d47eef4612635625467029",
                                "typeString": "literal_string \"Not enough minted tokens\""
                              }
                            ],
                            "id": 4558,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "8346:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) pure"
                            }
                          },
                          "id": 4560,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8346:34:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4561,
                        "nodeType": "ExpressionStatement",
                        "src": "8346:34:13"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              20018
            ],
            "documentation": {
              "id": 4536,
              "nodeType": "StructuredDocumentation",
              "src": "7939:131:13",
              "text": " @dev Runs before every `claim` function call.\n @param _quantity The quantity of NFTs being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeClaim",
            "nameLocation": "8084:12:13",
            "overrides": {
              "id": 4551,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8258:8:13"
            },
            "parameters": {
              "id": 4550,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4538,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4565,
                  "src": "8106:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4537,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8106:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4540,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "8131:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4565,
                  "src": "8123:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4539,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8123:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4542,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4565,
                  "src": "8150:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4541,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8150:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4544,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4565,
                  "src": "8167:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4543,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8167:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4547,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4565,
                  "src": "8184:23:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AllowlistProof_$33311_calldata_ptr",
                    "typeString": "struct IDropSinglePhase.AllowlistProof"
                  },
                  "typeName": {
                    "id": 4546,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4545,
                      "name": "AllowlistProof",
                      "nameLocations": [
                        "8184:14:13"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 33311,
                      "src": "8184:14:13"
                    },
                    "referencedDeclaration": 33311,
                    "src": "8184:14:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AllowlistProof_$33311_storage_ptr",
                      "typeString": "struct IDropSinglePhase.AllowlistProof"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4549,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4565,
                  "src": "8217:12:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4548,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8217:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8096:139:13"
            },
            "returnParameters": {
              "id": 4552,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8267:0:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4651,
            "nodeType": "FunctionDefinition",
            "src": "8829:860:13",
            "nodes": [],
            "body": {
              "id": 4650,
              "nodeType": "Block",
              "src": "9023:666:13",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4580,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4578,
                      "name": "_pricePerToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4574,
                      "src": "9037:14:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 4579,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9055:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "9037:19:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4591,
                  "nodeType": "IfStatement",
                  "src": "9033:103:13",
                  "trueBody": {
                    "id": 4590,
                    "nodeType": "Block",
                    "src": "9058:78:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4585,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 4582,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "9080:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 4583,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "9084:5:13",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "9080:9:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 4584,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9093:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "9080:14:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "2156616c7565",
                              "id": 4586,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9096:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              },
                              "value": "!Value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              }
                            ],
                            "id": 4581,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9072:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4587,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9072:33:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4588,
                        "nodeType": "ExpressionStatement",
                        "src": "9072:33:13"
                      },
                      {
                        "functionReturnParameters": 4577,
                        "id": 4589,
                        "nodeType": "Return",
                        "src": "9119:7:13"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    4593
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4593,
                      "mutability": "mutable",
                      "name": "totalPrice",
                      "nameLocation": "9154:10:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 4650,
                      "src": "9146:18:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4592,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9146:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4597,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4596,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4594,
                      "name": "_quantityToClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4570,
                      "src": "9167:16:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "id": 4595,
                      "name": "_pricePerToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4574,
                      "src": "9186:14:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9167:33:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9146:54:13"
                },
                {
                  "assignments": [
                    4599
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4599,
                      "mutability": "mutable",
                      "name": "validMsgValue",
                      "nameLocation": "9216:13:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 4650,
                      "src": "9211:18:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 4598,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9211:4:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4600,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9211:18:13"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4604,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4601,
                      "name": "_currency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4572,
                      "src": "9243:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 4602,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65175,
                        "src": "9256:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$65175_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 4603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "9276:12:13",
                      "memberName": "NATIVE_TOKEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64943,
                      "src": "9256:32:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9243:45:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4620,
                    "nodeType": "Block",
                    "src": "9360:55:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 4618,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 4613,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4599,
                            "src": "9374:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4617,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4614,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9390:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4615,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9394:5:13",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "9390:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 4616,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9403:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "9390:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "9374:30:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4619,
                        "nodeType": "ExpressionStatement",
                        "src": "9374:30:13"
                      }
                    ]
                  },
                  "id": 4621,
                  "nodeType": "IfStatement",
                  "src": "9239:176:13",
                  "trueBody": {
                    "id": 4612,
                    "nodeType": "Block",
                    "src": "9290:64:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 4610,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 4605,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4599,
                            "src": "9304:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4609,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4606,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9320:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4607,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "9324:5:13",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "9320:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 4608,
                              "name": "totalPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4593,
                              "src": "9333:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "9320:23:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "9304:39:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4611,
                        "nodeType": "ExpressionStatement",
                        "src": "9304:39:13"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4623,
                        "name": "validMsgValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4599,
                        "src": "9432:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c6964206d73672076616c7565",
                        "id": 4624,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9447:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        },
                        "value": "Invalid msg value"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        }
                      ],
                      "id": 4622,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9424:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4625,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9424:43:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4626,
                  "nodeType": "ExpressionStatement",
                  "src": "9424:43:13"
                },
                {
                  "assignments": [
                    4628
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4628,
                      "mutability": "mutable",
                      "name": "saleRecipient",
                      "nameLocation": "9486:13:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 4650,
                      "src": "9478:21:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4627,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9478:7:13",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4639,
                  "initialValue": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 4634,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4629,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4568,
                        "src": "9502:21:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 4632,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9535:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 4631,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9527:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4630,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9527:7:13",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9527:10:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "9502:35:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 4637,
                      "name": "_primarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4568,
                      "src": "9565:21:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 4638,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "9502:84:13",
                    "trueExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4635,
                        "name": "primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22648,
                        "src": "9540:20:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4636,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9540:22:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9478:108:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4643,
                        "name": "_currency",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4572,
                        "src": "9633:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 4644,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "9644:3:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9648:6:13",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "9644:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4646,
                        "name": "saleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4628,
                        "src": "9656:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4647,
                        "name": "totalPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4593,
                        "src": "9671:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4640,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65175,
                        "src": "9596:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$65175_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 4642,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9616:16:13",
                      "memberName": "transferCurrency",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64980,
                      "src": "9596:36:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256)"
                      }
                    },
                    "id": 4648,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9596:86:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4649,
                  "nodeType": "ExpressionStatement",
                  "src": "9596:86:13"
                }
              ]
            },
            "baseFunctions": [
              20048
            ],
            "documentation": {
              "id": 4566,
              "nodeType": "StructuredDocumentation",
              "src": "8403:421:13",
              "text": " @dev Collects and distributes the primary sale value of NFTs being claimed.\n @param _primarySaleRecipient The address to receive the primary sale value.\n @param _quantityToClaim      The quantity of NFTs being claimed.\n @param _currency             The currency in which the NFTs are being claimed.\n @param _pricePerToken        The price per token in the given currency."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_collectPriceOnClaim",
            "nameLocation": "8838:20:13",
            "overrides": {
              "id": 4576,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9014:8:13"
            },
            "parameters": {
              "id": 4575,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4568,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "8876:21:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4651,
                  "src": "8868:29:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4567,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8868:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4570,
                  "mutability": "mutable",
                  "name": "_quantityToClaim",
                  "nameLocation": "8915:16:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4651,
                  "src": "8907:24:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4569,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8907:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4572,
                  "mutability": "mutable",
                  "name": "_currency",
                  "nameLocation": "8949:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4651,
                  "src": "8941:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4571,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8941:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4574,
                  "mutability": "mutable",
                  "name": "_pricePerToken",
                  "nameLocation": "8976:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4651,
                  "src": "8968:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4573,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8968:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8858:138:13"
            },
            "returnParameters": {
              "id": 4577,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9023:0:13"
            },
            "scope": 4793,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4672,
            "nodeType": "FunctionDefinition",
            "src": "9927:247:13",
            "nodes": [],
            "body": {
              "id": 4671,
              "nodeType": "Block",
              "src": "10082:92:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4664,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4662,
                      "name": "startTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4660,
                      "src": "10092:12:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4663,
                      "name": "_currentIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10990,
                      "src": "10107:13:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10092:28:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4665,
                  "nodeType": "ExpressionStatement",
                  "src": "10092:28:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4667,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4654,
                        "src": "10140:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4668,
                        "name": "_quantityBeingClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4656,
                        "src": "10145:21:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4666,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11590,
                        11753
                      ],
                      "referencedDeclaration": 11590,
                      "src": "10130:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4669,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10130:37:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4670,
                  "nodeType": "ExpressionStatement",
                  "src": "10130:37:13"
                }
              ]
            },
            "baseFunctions": [
              20058
            ],
            "documentation": {
              "id": 4652,
              "nodeType": "StructuredDocumentation",
              "src": "9695:227:13",
              "text": " @dev Transfers the NFTs being claimed.\n @param _to                    The address to which the NFTs are being transferred.\n @param _quantityBeingClaimed  The quantity of NFTs being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "9936:22:13",
            "overrides": {
              "id": 4658,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10042:8:13"
            },
            "parameters": {
              "id": 4657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4654,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "9976:3:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4672,
                  "src": "9968:11:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4653,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9968:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4656,
                  "mutability": "mutable",
                  "name": "_quantityBeingClaimed",
                  "nameLocation": "9997:21:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4672,
                  "src": "9989:29:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4655,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9989:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9958:66:13"
            },
            "returnParameters": {
              "id": 4661,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4660,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "10068:12:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4672,
                  "src": "10060:20:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4659,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10060:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10059:22:13"
            },
            "scope": 4793,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4686,
            "nodeType": "FunctionDefinition",
            "src": "10274:130:13",
            "nodes": [],
            "body": {
              "id": 4685,
              "nodeType": "Block",
              "src": "10359:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4683,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4679,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10376:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4680,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10380:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10376:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4681,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "10390:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4682,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10390:7:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10376:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4678,
                  "id": 4684,
                  "nodeType": "Return",
                  "src": "10369:28:13"
                }
              ]
            },
            "baseFunctions": [
              22702
            ],
            "documentation": {
              "id": 4673,
              "nodeType": "StructuredDocumentation",
              "src": "10180:89:13",
              "text": "@dev Checks whether primary sale recipient can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetPrimarySaleRecipient",
            "nameLocation": "10283:27:13",
            "overrides": {
              "id": 4675,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10335:8:13"
            },
            "parameters": {
              "id": 4674,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10310:2:13"
            },
            "returnParameters": {
              "id": 4678,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4677,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4686,
                  "src": "10353:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4676,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10353:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10352:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4700,
            "nodeType": "FunctionDefinition",
            "src": "10487:115:13",
            "nodes": [],
            "body": {
              "id": 4699,
              "nodeType": "Block",
              "src": "10557:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4697,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4693,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10574:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4694,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10578:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10574:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4695,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "10588:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4696,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10588:7:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10574:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4692,
                  "id": 4698,
                  "nodeType": "Return",
                  "src": "10567:28:13"
                }
              ]
            },
            "baseFunctions": [
              21763
            ],
            "documentation": {
              "id": 4687,
              "nodeType": "StructuredDocumentation",
              "src": "10410:72:13",
              "text": "@dev Checks whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "10496:12:13",
            "overrides": {
              "id": 4689,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10533:8:13"
            },
            "parameters": {
              "id": 4688,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10508:2:13"
            },
            "returnParameters": {
              "id": 4692,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4691,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4700,
                  "src": "10551:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4690,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10551:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10550:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4714,
            "nodeType": "FunctionDefinition",
            "src": "10692:121:13",
            "nodes": [],
            "body": {
              "id": 4713,
              "nodeType": "Block",
              "src": "10768:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4711,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4707,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10785:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4708,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10789:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10785:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4709,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "10799:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4710,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10799:7:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10785:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4706,
                  "id": 4712,
                  "nodeType": "Return",
                  "src": "10778:28:13"
                }
              ]
            },
            "baseFunctions": [
              23030
            ],
            "documentation": {
              "id": 4701,
              "nodeType": "StructuredDocumentation",
              "src": "10608:79:13",
              "text": "@dev Checks whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "10701:18:13",
            "overrides": {
              "id": 4703,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10744:8:13"
            },
            "parameters": {
              "id": 4702,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10719:2:13"
            },
            "returnParameters": {
              "id": 4706,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4705,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4714,
                  "src": "10762:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4704,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10762:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10761:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4728,
            "nodeType": "FunctionDefinition",
            "src": "10908:121:13",
            "nodes": [],
            "body": {
              "id": 4727,
              "nodeType": "Block",
              "src": "10984:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4721,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "11001:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4722,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11005:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "11001:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4723,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "11015:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4724,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11015:7:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11001:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4720,
                  "id": 4726,
                  "nodeType": "Return",
                  "src": "10994:28:13"
                }
              ]
            },
            "baseFunctions": [
              18092
            ],
            "documentation": {
              "id": 4715,
              "nodeType": "StructuredDocumentation",
              "src": "10819:84:13",
              "text": "@dev Checks whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "10917:18:13",
            "overrides": {
              "id": 4717,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10960:8:13"
            },
            "parameters": {
              "id": 4716,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10935:2:13"
            },
            "returnParameters": {
              "id": 4720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4719,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4728,
                  "src": "10978:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4718,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10978:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10977:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4742,
            "nodeType": "FunctionDefinition",
            "src": "11124:125:13",
            "nodes": [],
            "body": {
              "id": 4741,
              "nodeType": "Block",
              "src": "11204:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4739,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4735,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "11221:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4736,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11225:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "11221:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4737,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "11235:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4738,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11235:7:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11221:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4734,
                  "id": 4740,
                  "nodeType": "Return",
                  "src": "11214:28:13"
                }
              ]
            },
            "baseFunctions": [
              20063
            ],
            "documentation": {
              "id": 4729,
              "nodeType": "StructuredDocumentation",
              "src": "11035:84:13",
              "text": "@dev Checks whether platform fee info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetClaimConditions",
            "nameLocation": "11133:22:13",
            "overrides": {
              "id": 4731,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "11180:8:13"
            },
            "parameters": {
              "id": 4730,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11155:2:13"
            },
            "returnParameters": {
              "id": 4734,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4733,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4742,
                  "src": "11198:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4732,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11198:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11197:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4756,
            "nodeType": "FunctionDefinition",
            "src": "11341:115:13",
            "nodes": [],
            "body": {
              "id": 4755,
              "nodeType": "Block",
              "src": "11411:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4753,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4749,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "11428:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4750,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11432:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "11428:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4751,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "11442:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4752,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11442:7:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11428:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4748,
                  "id": 4754,
                  "nodeType": "Return",
                  "src": "11421:28:13"
                }
              ]
            },
            "baseFunctions": [
              20827
            ],
            "documentation": {
              "id": 4743,
              "nodeType": "StructuredDocumentation",
              "src": "11255:81:13",
              "text": "@dev Returns whether lazy minting can be done in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canLazyMint",
            "nameLocation": "11350:12:13",
            "overrides": {
              "id": 4745,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "11387:8:13"
            },
            "parameters": {
              "id": 4744,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11362:2:13"
            },
            "returnParameters": {
              "id": 4748,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4747,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4756,
                  "src": "11405:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4746,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11405:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11404:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4769,
            "nodeType": "FunctionDefinition",
            "src": "11543:104:13",
            "nodes": [],
            "body": {
              "id": 4768,
              "nodeType": "Block",
              "src": "11602:45:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4766,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4762,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "11619:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4763,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11623:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "11619:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4764,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "11633:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4765,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11633:7:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11619:21:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4761,
                  "id": 4767,
                  "nodeType": "Return",
                  "src": "11612:28:13"
                }
              ]
            },
            "documentation": {
              "id": 4757,
              "nodeType": "StructuredDocumentation",
              "src": "11462:76:13",
              "text": "@dev Checks whether NFTs can be revealed in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canReveal",
            "nameLocation": "11552:10:13",
            "parameters": {
              "id": 4758,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11562:2:13"
            },
            "returnParameters": {
              "id": 4761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4760,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4769,
                  "src": "11596:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4759,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11596:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11595:6:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4779,
            "nodeType": "FunctionDefinition",
            "src": "11831:109:13",
            "nodes": [],
            "body": {
              "id": 4778,
              "nodeType": "Block",
              "src": "11906:34:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 4775,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "11923:3:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 4776,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "11927:6:13",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "11923:10:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 4774,
                  "id": 4777,
                  "nodeType": "Return",
                  "src": "11916:17:13"
                }
              ]
            },
            "baseFunctions": [
              20000
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_dropMsgSender",
            "nameLocation": "11840:14:13",
            "overrides": {
              "id": 4771,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "11879:8:13"
            },
            "parameters": {
              "id": 4770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11854:2:13"
            },
            "returnParameters": {
              "id": 4774,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4773,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4779,
                  "src": "11897:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4772,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11897:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11896:9:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4792,
            "nodeType": "FunctionDefinition",
            "src": "12013:117:13",
            "nodes": [],
            "body": {
              "id": 4791,
              "nodeType": "Block",
              "src": "12096:34:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 4788,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "12113:3:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 4789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "12117:6:13",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "12113:10:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 4787,
                  "id": 4790,
                  "nodeType": "Return",
                  "src": "12106:17:13"
                }
              ]
            },
            "baseFunctions": [
              21205,
              49269
            ],
            "documentation": {
              "id": 4780,
              "nodeType": "StructuredDocumentation",
              "src": "11946:62:13",
              "text": "@notice Returns the sender in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "12022:10:13",
            "overrides": {
              "id": 4784,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 4782,
                  "name": "Multicall",
                  "nameLocations": [
                    "12058:9:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21206,
                  "src": "12058:9:13"
                },
                {
                  "id": 4783,
                  "name": "Context",
                  "nameLocations": [
                    "12069:7:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 49279,
                  "src": "12069:7:13"
                }
              ],
              "src": "12049:28:13"
            },
            "parameters": {
              "id": 4781,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12032:2:13"
            },
            "returnParameters": {
              "id": 4787,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4786,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4792,
                  "src": "12087:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4785,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12087:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12086:9:13"
            },
            "scope": 4793,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4266,
              "name": "ERC721A",
              "nameLocations": [
                "1702:7:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 12340,
              "src": "1702:7:13"
            },
            "id": 4267,
            "nodeType": "InheritanceSpecifier",
            "src": "1702:7:13"
          },
          {
            "baseName": {
              "id": 4268,
              "name": "ContractMetadata",
              "nameLocations": [
                "1715:16:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18093,
              "src": "1715:16:13"
            },
            "id": 4269,
            "nodeType": "InheritanceSpecifier",
            "src": "1715:16:13"
          },
          {
            "baseName": {
              "id": 4270,
              "name": "Multicall",
              "nameLocations": [
                "1737:9:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21206,
              "src": "1737:9:13"
            },
            "id": 4271,
            "nodeType": "InheritanceSpecifier",
            "src": "1737:9:13"
          },
          {
            "baseName": {
              "id": 4272,
              "name": "Ownable",
              "nameLocations": [
                "1752:7:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21764,
              "src": "1752:7:13"
            },
            "id": 4273,
            "nodeType": "InheritanceSpecifier",
            "src": "1752:7:13"
          },
          {
            "baseName": {
              "id": 4274,
              "name": "Royalty",
              "nameLocations": [
                "1765:7:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23031,
              "src": "1765:7:13"
            },
            "id": 4275,
            "nodeType": "InheritanceSpecifier",
            "src": "1765:7:13"
          },
          {
            "baseName": {
              "id": 4276,
              "name": "BatchMintMetadata",
              "nameLocations": [
                "1778:17:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17840,
              "src": "1778:17:13"
            },
            "id": 4277,
            "nodeType": "InheritanceSpecifier",
            "src": "1778:17:13"
          },
          {
            "baseName": {
              "id": 4278,
              "name": "PrimarySale",
              "nameLocations": [
                "1801:11:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22703,
              "src": "1801:11:13"
            },
            "id": 4279,
            "nodeType": "InheritanceSpecifier",
            "src": "1801:11:13"
          },
          {
            "baseName": {
              "id": 4280,
              "name": "LazyMint",
              "nameLocations": [
                "1818:8:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20828,
              "src": "1818:8:13"
            },
            "id": 4281,
            "nodeType": "InheritanceSpecifier",
            "src": "1818:8:13"
          },
          {
            "baseName": {
              "id": 4282,
              "name": "DelayedReveal",
              "nameLocations": [
                "1832:13:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18252,
              "src": "1832:13:13"
            },
            "id": 4283,
            "nodeType": "InheritanceSpecifier",
            "src": "1832:13:13"
          },
          {
            "baseName": {
              "id": 4284,
              "name": "DropSinglePhase",
              "nameLocations": [
                "1851:15:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20064,
              "src": "1851:15:13"
            },
            "id": 4285,
            "nodeType": "InheritanceSpecifier",
            "src": "1851:15:13"
          }
        ],
        "canonicalName": "ERC721Drop",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4265,
          "nodeType": "StructuredDocumentation",
          "src": "612:1061:13",
          "text": "      BASE:      ERC721A\n      EXTENSION: DropSinglePhase\n  The `ERC721Drop` contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.\n  It includes the following additions to standard ERC721 logic:\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces.\n  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism for lazy minted tokens. It lets\n  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint lazy minted tokens.\n  The `ERC721Drop` contract lets you lazy mint tokens, and distribute those lazy minted tokens via the drop mechanism."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4793,
          20064,
          33357,
          32931,
          18252,
          33115,
          20828,
          22703,
          17840,
          33463,
          33997,
          23031,
          34061,
          14089,
          21764,
          33834,
          21206,
          33577,
          18093,
          33084,
          12340,
          14292,
          14338,
          14221,
          7939,
          13945,
          49279
        ],
        "name": "ERC721Drop",
        "nameLocation": "1684:10:13",
        "scope": 4794,
        "usedErrors": [
          14233,
          14236,
          14239,
          14242,
          14245,
          14248,
          14251,
          14254,
          14257,
          14260,
          14263,
          14266,
          14269
        ],
        "usedEvents": [
          14120,
          14129,
          14138,
          17530,
          17537,
          33083,
          33094,
          33322,
          33330,
          33450,
          33833,
          33996,
          34051,
          34060
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 13
}