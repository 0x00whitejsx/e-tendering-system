{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchMintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isApprovedOrOwnerOf",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "1063:7477:11:-:0;;;2057:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2238:5;2245:7;1883:5:25;:13;2238:5:11;1883::25;:13;:::i;:::-;-1:-1:-1;1906:7:25;:17;1916:7;1906;:17;:::i;:::-;-1:-1:-1;;2119:7:25;1933:31;;-1:-1:-1;2264:26:11::1;2276:13:::0;2264:11:::1;:26::i;:::-;2300:56;2325:17:::0;-1:-1:-1;;;;;2300:56:11;::::1;:24;:56::i;:::-;2057:306:::0;;;;;1063:7477;;1421:172:70;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;4865:2:821;3549:25:77;;;4847:21:821;4904:2;4884:18;;;4877:30;-1:-1:-1;;;4923:18:821;;;4916:45;4978:18;;3549:25:77;;;;;;;3509:76;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;5153:25:821;;;3689:46:77;;5141:2:821;5126:18;3689:46:77;;;;;;;3408:334;;:::o;14:177:821:-;93:13;;-1:-1:-1;;;;;135:31:821;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:844;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:821;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:821;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;914:3;907:4;902:2;894:6;890:15;886:26;883:35;880:55;;;931:1;928;921:12;880:55;953:1;944:10;;963:133;977:2;974:1;971:9;963:133;;;1065:14;;;1061:23;;1055:30;1034:14;;;1030:23;;1023:63;988:10;;;;963:133;;;1140:1;1133:4;1128:2;1120:6;1116:15;1112:26;1105:37;1160:6;1151:15;;;;;;328:844;;;;:::o;1177:901::-;1303:6;1311;1319;1327;1335;1388:3;1376:9;1367:7;1363:23;1359:33;1356:53;;;1405:1;1402;1395:12;1356:53;1428:40;1458:9;1428:40;:::i;:::-;1512:2;1497:18;;1491:25;1418:50;;-1:-1:-1;;;;;;1565:14:821;;;1562:34;;;1592:1;1589;1582:12;1562:34;1615:61;1668:7;1659:6;1648:9;1644:22;1615:61;:::i;:::-;1605:71;;1722:2;1711:9;1707:18;1701:25;1685:41;;1751:2;1741:8;1738:16;1735:36;;;1767:1;1764;1757:12;1735:36;;1790:63;1845:7;1834:8;1823:9;1819:24;1790:63;:::i;:::-;1780:73;;;1872:49;1917:2;1906:9;1902:18;1872:49;:::i;:::-;1964:3;1949:19;;1943:26;1862:59;;-1:-1:-1;;;;;;1998:31:821;;1988:42;;1978:70;;2044:1;2041;2034:12;1978:70;2067:5;2057:15;;;1177:901;;;;;;;;:::o;2083:380::-;2162:1;2158:12;;;;2205;;;2226:61;;2280:4;2272:6;2268:17;2258:27;;2226:61;2333:2;2325:6;2322:14;2302:18;2299:38;2296:161;;2379:10;2374:3;2370:20;2367:1;2360:31;2414:4;2411:1;2404:15;2442:4;2439:1;2432:15;2296:161;;2083:380;;;:::o;2594:543::-;2696:2;2691:3;2688:11;2685:446;;;2732:1;2756:5;2753:1;2746:16;2800:4;2797:1;2787:18;2870:2;2858:10;2854:19;2851:1;2847:27;2841:4;2837:38;2906:4;2894:10;2891:20;2888:47;;;-1:-1:-1;2929:4:821;2888:47;2984:2;2979:3;2975:12;2972:1;2968:20;2962:4;2958:31;2948:41;;3039:82;3057:2;3050:5;3047:13;3039:82;;;3102:17;;;3083:1;3072:13;3039:82;;;3043:3;;;2685:446;2594:543;;;:::o;3313:1345::-;3433:10;;-1:-1:-1;;;;;3455:30:821;;3452:56;;;3488:18;;:::i;:::-;3517:97;3607:6;3567:38;3599:4;3593:11;3567:38;:::i;:::-;3561:4;3517:97;:::i;:::-;3669:4;;3726:2;3715:14;;3743:1;3738:663;;;;4445:1;4462:6;4459:89;;;-1:-1:-1;4514:19:821;;;4508:26;4459:89;-1:-1:-1;;3270:1:821;3266:11;;;3262:24;3258:29;3248:40;3294:1;3290:11;;;3245:57;4561:81;;3708:944;;3738:663;2541:1;2534:14;;;2578:4;2565:18;;-1:-1:-1;;3774:20:821;;;3892:236;3906:7;3903:1;3900:14;3892:236;;;3995:19;;;3989:26;3974:42;;4087:27;;;;4055:1;4043:14;;;;3922:19;;3892:236;;;3896:3;4156:6;4147:7;4144:19;4141:201;;;4217:19;;;4211:26;-1:-1:-1;;4300:1:821;4296:14;;;4312:3;4292:24;4288:37;4284:42;4269:58;4254:74;;4141:201;-1:-1:-1;;;;;4388:1:821;4372:14;;;4368:22;4355:36;;-1:-1:-1;3313:1345:821:o;5007:177::-;1063:7477:11;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101bb5760003560e01c806363b45e2d116100f557806363b45e2d1461038d57806370a0823114610395578063754a81d9146103a857806383040532146103bb5780638462151c146103de5780638da5cb5b146103fe578063938e3d7b1461040657806395d89b411461041957806399a2557a146104215780639bcf7a1514610434578063a22cb46514610447578063ac9650d81461045a578063b24f2d391461047a578063b88d4fde14610498578063c23dc68f146104ab578063c87b56dd146104cb578063e8a3d485146104de578063e985e9c5146104e657600080fd5b806275a317146101c057806301ffc9a7146101d557806306fdde03146101fd578063081812fc14610212578063095ea7b31461023d57806313af40351461025057806318160ddd1461026357806323b872dd146102795780632419f51b1461028c5780632a55205a1461029f5780633b1475a7146102d157806342842e0e146102d957806342966c68146102ec578063430c2081146102ff5780634cc157df146103125780635bbb217714610347578063600dd5ea146103675780636352211e1461037a575b600080fd5b6101d36101ce366004612213565b6104f9565b005b6101e86101e3366004612276565b610557565b60405190151581526020015b60405180910390f35b6102056105c4565b6040516101f491906122e3565b6102256102203660046122f6565b610656565b6040516001600160a01b0390911681526020016101f4565b6101d361024b36600461230f565b61069a565b6101d361025e366004612339565b610720565b600154600054035b6040519081526020016101f4565b6101d3610287366004612354565b610750565b61026b61029a3660046122f6565b61075b565b6102b26102ad366004612390565b6107c9565b604080516001600160a01b0390931683526020830191909152016101f4565b60005461026b565b6101d36102e7366004612354565b610806565b6101d36102fa3660046122f6565b610821565b6101e861030d36600461230f565b61082c565b6103256103203660046122f6565b61088b565b604080516001600160a01b03909316835261ffff9091166020830152016101f4565b61035a6103553660046123b2565b6108f6565b6040516101f49190612484565b6101d361037536600461230f565b6109aa565b6102256103883660046122f6565b6109d8565b600c5461026b565b61026b6103a3366004612339565b6109ea565b6101d36103b63660046124c6565b610a38565b6101e86103c93660046122f6565b600e6020526000908152604090205460ff1681565b6103f16103ec366004612339565b610a82565b6040516101f49190612543565b610225610bac565b6101d361041436600461257b565b610bbb565b610205610be8565b6103f161042f3660046125af565b610bf7565b6101d36104423660046125e2565b610daa565b6101d3610455366004612607565b610dd9565b61046d610468366004612643565b610e6e565b6040516101f491906126b7565b600a546001600160a01b03811690600160a01b900461ffff16610325565b6101d36104a636600461271b565b610fd3565b6104be6104b93660046122f6565b61101e565b6040516101f49190612776565b6102056104d93660046122f6565b6110a6565b610205611194565b6101e86104f4366004612784565b611222565b610501611250565b6105265760405162461bcd60e51b815260040161051d906127b7565b60405180910390fd5b61053861053260005490565b82611273565b610553826001604051806020016040528060008152506112e5565b5050565b60006301ffc9a760e01b6001600160e01b03198316148061058857506380ac58cd60e01b6001600160e01b03198316145b806105a35750635b5e139f60e01b6001600160e01b03198316145b806105be57506001600160e01b0319821663152a902d60e11b145b92915050565b6060600280546105d3906127e8565b80601f01602080910402602001604051908101604052809291908181526020018280546105ff906127e8565b801561064c5780601f106106215761010080835404028352916020019161064c565b820191906000526020600020905b81548152906001019060200180831161062f57829003601f168201915b5050505050905090565b600061066182611481565b61067e576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006106a5826109d8565b9050806001600160a01b0316836001600160a01b0316036106d95760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614610710576106f38133611222565b610710576040516367d9dca160e11b815260040160405180910390fd5b61071b8383836114ac565b505050565b610728611250565b6107445760405162461bcd60e51b815260040161051d90612822565b61074d81611508565b50565b61071b83838361155a565b6000610766600c5490565b82106107a45760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161051d565b600c82815481106107b7576107b761284a565b90600052602060002001549050919050565b6000806000806107d88661088b565b90945084925061ffff1690506127106107f18287612876565b6107fb91906128a3565b925050509250929050565b61071b83838360405180602001604052806000815250610fd3565b61074d816001611734565b600080610838836109d8565b9050806001600160a01b0316846001600160a01b0316148061085f575061085f8185611222565b806108835750836001600160a01b031661087884610656565b6001600160a01b0316145b949350505050565b6000818152600b60209081526040808320815180830190925280546001600160a01b0316808352600190910154928201929092528291156108d257805160208201516108ec565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b80516060906000816001600160401b038111156109155761091561215e565b60405190808252806020026020018201604052801561094e57816020015b61093b612122565b8152602001906001900390816109335790505b50905060005b8281146109a25761097d8582815181106109705761097061284a565b602002602001015161101e565b82828151811061098f5761098f61284a565b6020908102919091010152600101610954565b509392505050565b6109b2611250565b6109ce5760405162461bcd60e51b815260040161051d90612822565b61055382826118e3565b60006109e382611967565b5192915050565b60006001600160a01b038216610a13576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610a40611250565b610a5c5760405162461bcd60e51b815260040161051d906127b7565b610a6f610a6860005490565b8484611a6c565b5050610a7c8484836112e5565b50505050565b60606000806000610a92856109ea565b90506000816001600160401b03811115610aae57610aae61215e565b604051908082528060200260200182016040528015610ad7578160200160208202803683370190505b509050610ae2612122565b60005b838614610ba057600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529250610b985781516001600160a01b031615610b5957815194505b876001600160a01b0316856001600160a01b031603610b985780838780600101985081518110610b8b57610b8b61284a565b6020026020010181815250505b600101610ae5565b50909695505050505050565b6009546001600160a01b031690565b610bc3611250565b610bdf5760405162461bcd60e51b815260040161051d90612822565b61074d81611ad0565b6060600380546105d3906127e8565b6060818310610c1957604051631960ccad60e11b815260040160405180910390fd5b6000805480841115610c29578093505b6000610c34876109ea565b905084861015610c535785850381811015610c4d578091505b50610c57565b5060005b6000816001600160401b03811115610c7157610c7161215e565b604051908082528060200260200182016040528015610c9a578160200160208202803683370190505b50905081600003610cb0579350610da392505050565b6000610cbb8861101e565b905060008160400151610ccc575080515b885b888114158015610cde5750848714155b15610d9757600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529350610d8f5782516001600160a01b031615610d5057825191505b8a6001600160a01b0316826001600160a01b031603610d8f5780848880600101995081518110610d8257610d8261284a565b6020026020010181815250505b600101610cce565b50505092835250909150505b9392505050565b610db2611250565b610dce5760405162461bcd60e51b815260040161051d90612822565b61071b838383611bac565b336001600160a01b03831603610e025760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b03811115610e8857610e8861215e565b604051908082528060200260200182016040528015610ebb57816020015b6060815260200190600190039081610ea65790505b509050336000805b84811015610fca578115610f4257610f2030878784818110610ee757610ee761284a565b9050602002810190610ef991906128b7565b86604051602001610f0c93929190612904565b604051602081830303815290604052611c53565b848281518110610f3257610f3261284a565b6020026020010181905250610fc2565b610fa430878784818110610f5857610f5861284a565b9050602002810190610f6a91906128b7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c5392505050565b848281518110610fb657610fb661284a565b60200260200101819052505b600101610ec3565b50505092915050565b610fde84848461155a565b610ff0836001600160a01b0316611c78565b15610a7c5761100184848484611c87565b610a7c576040516368d2bf6b60e11b815260040160405180910390fd5b611026612122565b61102e612122565b600054831061103d5792915050565b50600082815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16158015928201929092529061109d5792915050565b610da383611967565b6000818152600f60205260408120805460609291906110c4906127e8565b80601f01602080910402602001604051908101604052809291908181526020018280546110f0906127e8565b801561113d5780601f106111125761010080835404028352916020019161113d565b820191906000526020600020905b81548152906001019060200180831161112057829003601f168201915b505050505090506000815111156111545792915050565b600061115f84611d72565b90508061116b85611f0e565b60405160200161117c929190612925565b60405160208183030381529060405292505050919050565b600880546111a1906127e8565b80601f01602080910402602001604051908101604052809291908181526020018280546111cd906127e8565b801561121a5780601f106111ef5761010080835404028352916020019161121a565b820191906000526020600020905b8154815290600101906020018083116111fd57829003601f168201915b505050505081565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061125a610bac565b6001600160a01b0316336001600160a01b031614905090565b6000828152600f60205260409020805461128c906127e8565b1590506112cd5760405162461bcd60e51b815260206004820152600f60248201526e15549248185b1c9958591e481cd95d608a1b604482015260640161051d565b6000828152600f6020526040902061071b82826129a4565b6000546001600160a01b03841661130e57604051622e076360e81b815260040160405180910390fd5b8260000361132f5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501906113c890611c78565b1561143e575b60405182906001600160a01b03881690600090600080516020612ba1833981519152908290a46114076000878480600101955087611c87565b611424576040516368d2bf6b60e11b815260040160405180910390fd5b8082106113ce57826000541461143957600080fd5b611471565b5b6040516001830192906001600160a01b03881690600090600080516020612ba1833981519152908290a480821061143f575b506000908155610a7c9085838684565b60008054821080156105be575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061156582611967565b9050836001600160a01b031681600001516001600160a01b03161461159c5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806115ba57506115ba8533611222565b806115d55750336115ca84610656565b6001600160a01b0316145b9050806115f557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661161c57604051633a954ecd60e21b815260040160405180910390fd5b611628600084876114ac565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166116fb5760005482146116fb57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b0316600080516020612ba183398151915260405160405180910390a45050505050565b600061173f83611967565b805190915082156117a5576000336001600160a01b038316148061176857506117688233611222565b8061178357503361177886610656565b6001600160a01b0316145b9050806117a357604051632ce44b5f60e11b815260040160405180910390fd5b505b6117b1600085836114ac565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b1785559189018084529220805491949091166118ab5760005482146118ab57805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020612ba1833981519152908390a4505060018054810190555050565b6127108111156119055760405162461bcd60e51b815260040161051d90612a63565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b61196f612122565b81600054811015611a5357600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290611a515780516001600160a01b0316156119e8579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611a4c579392505050565b6119e8565b505b604051636f96cda160e11b815260040160405180910390fd5b600080611a798486612a8c565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d60205260409020909250829150611ac784826129a4565b50935093915050565b600060088054611adf906127e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0b906127e8565b8015611b585780601f10611b2d57610100808354040283529160200191611b58565b820191906000526020600020905b815481529060010190602001808311611b3b57829003601f168201915b505050505090508160089081611b6e91906129a4565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611ba0929190612a9f565b60405180910390a15050565b612710811115611bce5760405162461bcd60e51b815260040161051d90612a63565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6060610da38383604051806060016040528060278152602001612b7a6027913961200e565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611cbc903390899088908890600401612acd565b6020604051808303816000875af1925050508015611cf7575060408051601f3d908101601f19168201909252611cf491810190612b00565b60015b611d55573d808015611d25576040519150601f19603f3d011682016040523d82523d6000602084013e611d2a565b606091505b508051600003611d4d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60606000611d7f600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015611dcf57602002820191906000526020600020905b815481526020019060010190808311611dbb575b5050505050905060005b82811015611ed357818181518110611df357611df361284a565b6020026020010151851015611ec157600d6000838381518110611e1857611e1861284a565b602002602001015181526020019081526020016000208054611e39906127e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611e65906127e8565b8015611eb25780601f10611e8757610100808354040283529160200191611eb2565b820191906000526020600020905b815481529060010190602001808311611e9557829003601f168201915b50505050509350505050919050565b611ecc600182612a8c565b9050611dd9565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b604482015260640161051d565b606081600003611f355750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611f5f5780611f4981612b1d565b9150611f589050600a836128a3565b9150611f39565b6000816001600160401b03811115611f7957611f7961215e565b6040519080825280601f01601f191660200182016040528015611fa3576020820181803683370190505b5090505b841561088357611fb8600183612b36565b9150611fc5600a86612b49565b611fd0906030612a8c565b60f81b818381518110611fe557611fe561284a565b60200101906001600160f81b031916908160001a905350612007600a866128a3565b9450611fa7565b6060600080856001600160a01b03168560405161202b9190612b5d565b600060405180830381855af49150503d8060008114612066576040519150601f19603f3d011682016040523d82523d6000602084013e61206b565b606091505b509150915061207c86838387612086565b9695505050505050565b606083156120f35782516000036120ec576120a085611c78565b6120ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051d565b5081610883565b61088383838151156121085781518083602001fd5b8060405162461bcd60e51b815260040161051d91906122e3565b604080516060810182526000808252602082018190529181019190915290565b80356001600160a01b038116811461215957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561219c5761219c61215e565b604052919050565b600082601f8301126121b557600080fd5b81356001600160401b038111156121ce576121ce61215e565b6121e1601f8201601f1916602001612174565b8181528460208386010111156121f657600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561222657600080fd5b61222f83612142565b915060208301356001600160401b0381111561224a57600080fd5b612256858286016121a4565b9150509250929050565b6001600160e01b03198116811461074d57600080fd5b60006020828403121561228857600080fd5b8135610da381612260565b60005b838110156122ae578181015183820152602001612296565b50506000910152565b600081518084526122cf816020860160208601612293565b601f01601f19169290920160200192915050565b602081526000610da360208301846122b7565b60006020828403121561230857600080fd5b5035919050565b6000806040838503121561232257600080fd5b61232b83612142565b946020939093013593505050565b60006020828403121561234b57600080fd5b610da382612142565b60008060006060848603121561236957600080fd5b61237284612142565b925061238060208501612142565b9150604084013590509250925092565b600080604083850312156123a357600080fd5b50508035926020909101359150565b600060208083850312156123c557600080fd5b82356001600160401b03808211156123dc57600080fd5b818501915085601f8301126123f057600080fd5b8135818111156124025761240261215e565b8060051b9150612413848301612174565b818152918301840191848101908884111561242d57600080fd5b938501935b8385101561244b57843582529385019390850190612432565b98975050505050505050565b80516001600160a01b031682526020808201516001600160401b0316908301526040908101511515910152565b6020808252825182820181905260009190848201906040850190845b81811015610ba0576124b3838551612457565b92840192606092909201916001016124a0565b600080600080608085870312156124dc57600080fd5b6124e585612142565b93506020850135925060408501356001600160401b038082111561250857600080fd5b612514888389016121a4565b9350606087013591508082111561252a57600080fd5b50612537878288016121a4565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015610ba05783518352928401929184019160010161255f565b60006020828403121561258d57600080fd5b81356001600160401b038111156125a357600080fd5b610883848285016121a4565b6000806000606084860312156125c457600080fd5b6125cd84612142565b95602085013595506040909401359392505050565b6000806000606084860312156125f757600080fd5b8335925061238060208501612142565b6000806040838503121561261a57600080fd5b61262383612142565b91506020830135801515811461263857600080fd5b809150509250929050565b6000806020838503121561265657600080fd5b82356001600160401b038082111561266d57600080fd5b818501915085601f83011261268157600080fd5b81358181111561269057600080fd5b8660208260051b85010111156126a557600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561270e57603f198886030184526126fc8583516122b7565b945092850192908501906001016126e0565b5092979650505050505050565b6000806000806080858703121561273157600080fd5b61273a85612142565b935061274860208601612142565b92506040850135915060608501356001600160401b0381111561276a57600080fd5b612537878288016121a4565b606081016105be8284612457565b6000806040838503121561279757600080fd5b6127a083612142565b91506127ae60208401612142565b90509250929050565b6020808252601790820152762737ba1030baba3437b934bd32b2103a379036b4b73a1760491b604082015260600190565b600181811c908216806127fc57607f821691505b60208210810361281c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105be576105be612860565b634e487b7160e01b600052601260045260246000fd5b6000826128b2576128b261288d565b500490565b6000808335601e198436030181126128ce57600080fd5b8301803591506001600160401b038211156128e857600080fd5b6020019150368190038213156128fd57600080fd5b9250929050565b8284823760609190911b6001600160601b0319169101908152601401919050565b60008351612937818460208801612293565b83519083019061294b818360208801612293565b01949350505050565b601f82111561071b576000816000526020600020601f850160051c8101602086101561297d5750805b601f850160051c820191505b8181101561299c57828155600101612989565b505050505050565b81516001600160401b038111156129bd576129bd61215e565b6129d1816129cb84546127e8565b84612954565b602080601f831160018114612a0657600084156129ee5750858301515b600019600386901b1c1916600185901b17855561299c565b600085815260208120601f198616915b82811015612a3557888601518255948401946001909101908401612a16565b5085821015612a535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b808201808211156105be576105be612860565b604081526000612ab260408301856122b7565b8281036020840152612ac481856122b7565b95945050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061207c908301846122b7565b600060208284031215612b1257600080fd5b8151610da381612260565b600060018201612b2f57612b2f612860565b5060010190565b818103818111156105be576105be612860565b600082612b5857612b5861288d565b500690565b60008251612b6f818460208701612293565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220cb187b7c424125b42f1be3f6dee4f4995483860e15f462a8bb3998c037441da364736f6c63430008170033",
    "sourceMap": "1063:7477:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4454:217;;;;;;:::i;:::-;;:::i;:::-;;2655:444;;;;;;:::i;:::-;;:::i;:::-;;;2092:14:821;;2085:22;2067:41;;2055:2;2040:18;2655:444:11;;;;;;;;6129:98:25;;;:::i;:::-;;;;;;;:::i;7615:200::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3224:32:821;;;3206:51;;3194:2;3179:18;7615:200:25;3060:203:821;7162:392:25;;;;;;:::i;:::-;;:::i;1133:173:70:-;;;;;;:::i;:::-;;:::i;2282:306:25:-;2541:12;;2335:7;2525:13;:28;2282:306;;;3864:25:821;;;3852:2;3837:18;2282:306:25;3718:177:821;8454:134:25;;;;;;:::i;:::-;;:::i;2029:203:54:-;;;;;;:::i;:::-;;:::i;1421:325:77:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4678:32:821;;;4660:51;;4742:2;4727:18;;4720:34;;;;4633:18;1421:325:77;4486:274:821;6135:104:11;6193:7;6219:13;6135:104;;8654:149:25;;;;;;:::i;:::-;;:::i;5793:87:11:-;;;;;;:::i;:::-;;:::i;6571:343::-;;;;;;:::i;:::-;;:::i;1986:381:77:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4955:32:821;;;4937:51;;5036:6;5024:19;;;5019:2;5004:18;;4997:47;4910:18;1986:381:77;4765:285:821;1514:459:44;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3065:256:77:-;;;;;;:::i;:::-;;:::i;5944:123:25:-;;;;;;:::i;:::-;;:::i;1711:96:54:-;1785:8;:15;1711:96;;3370:203:25;;;;;;:::i;:::-;;:::i;5232:287:11:-;;;;;;:::i;:::-;;:::i;954:43:54:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5285:870:44;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;871:86:70:-;;;:::i;1003:188:56:-;;;;;;:::i;:::-;;:::i;6291:102:25:-;;;:::i;2374:2448:44:-;;;;;;:::i;:::-;;:::i;4259:258:77:-;;;;;;:::i;:::-;;:::i;7882:282:25:-;;;;;;:::i;:::-;;:::i;696:567:65:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2477:144:77:-;2577:16;;-1:-1:-1;;;;;2577:16:77;;;-1:-1:-1;;;2602:10:77;;;;2477:144;;8869:343:25;;;;;;:::i;:::-;;:::i;953:408:44:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3513:405:11:-;;;;;;:::i;:::-;;:::i;565:34:56:-;;;:::i;8230:162:25:-;;;;;;:::i;:::-;;:::i;4454:217:11:-;4541:10;:8;:10::i;:::-;4533:46;;;;-1:-1:-1;;;4533:46:11;;;;;;;:::i;:::-;;;;;;;;;4589:44;4602:19;6193:7;6219:13;;6135:104;4602:19;4623:9;4589:12;:44::i;:::-;4643:21;4653:3;4658:1;4643:21;;;;;;;;;;;;:9;:21::i;:::-;4454:217;;:::o;2655:444::-;2758:4;-1:-1:-1;;;;;;;;;2793:25:11;;;;:100;;-1:-1:-1;;;;;;;;;;2868:25:11;;;2793:100;:175;;;-1:-1:-1;;;;;;;;;;2943:25:11;;;2793:175;:274;;;-1:-1:-1;;;;;;;3026:41:11;;-1:-1:-1;;;3026:41:11;2793:274;2774:293;2655:444;-1:-1:-1;;2655:444:11:o;6129:98:25:-;6183:13;6215:5;6208:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6129:98;:::o;7615:200::-;7683:7;7707:16;7715:7;7707;:16::i;:::-;7702:64;;7732:34;;-1:-1:-1;;;7732:34:25;;;;;;;;;;;7702:64;-1:-1:-1;7784:24:25;;;;:15;:24;;;;;;-1:-1:-1;;;;;7784:24:25;;7615:200::o;7162:392::-;7242:13;7258:24;7274:7;7258:15;:24::i;:::-;7242:40;;7302:5;-1:-1:-1;;;;;7296:11:25;:2;-1:-1:-1;;;;;7296:11:25;;7292:48;;7316:24;;-1:-1:-1;;;7316:24:25;;;;;;;;;;;7292:48;8521:10:11;-1:-1:-1;;;;;7355:21:25;;;7351:158;;7395:37;7412:5;8521:10:11;8230:162:25;:::i;7395:37::-;7390:119;;7459:35;;-1:-1:-1;;;7459:35:25;;;;;;;;;;;7390:119;7519:28;7528:2;7532:7;7541:5;7519:8;:28::i;:::-;7232:322;7162:392;;:::o;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;1198:70::-;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;8454:134:25:-;8553:28;8563:4;8569:2;8573:7;8553:9;:28::i;2029:203:54:-;2093:7;2126:17;1785:8;:15;;1711:96;2126:17;2116:6;:27;2112:81;;2159:23;;-1:-1:-1;;;2159:23:54;;13481:2:821;2159:23:54;;;13463:21:821;13520:2;13500:18;;;13493:30;-1:-1:-1;;;13539:18:821;;;13532:43;13592:18;;2159:23:54;13279:337:821;2112:81:54;2209:8;2218:6;2209:16;;;;;;;;:::i;:::-;;;;;;;;;2202:23;;2029:203;;;:::o;1421:325:77:-;1540:16;1558:21;1592:17;1611:11;1626:31;1649:7;1626:22;:31::i;:::-;1591:66;;-1:-1:-1;1591:66:77;;-1:-1:-1;1591:66:77;;;-1:-1:-1;1733:6:77;1714:15;1591:66;1714:9;:15;:::i;:::-;1713:26;;;;:::i;:::-;1697:42;;1581:165;;1421:325;;;;;:::o;8654:149:25:-;8757:39;8774:4;8780:2;8784:7;8757:39;;;;;;;;;;;;:16;:39::i;5793:87:11:-;5852:21;5858:8;5868:4;5852:5;:21::i;6571:343::-;6686:24;6722:13;6738:17;6746:8;6738:7;:17::i;:::-;6722:33;;6801:5;-1:-1:-1;;;;;6788:18:11;:9;-1:-1:-1;;;;;6788:18:11;;:68;;;;6822:34;6839:5;6846:9;6822:16;:34::i;:::-;6788:118;;;;6897:9;-1:-1:-1;;;;;6872:34:11;:21;6884:8;6872:11;:21::i;:::-;-1:-1:-1;;;;;6872:34:11;;6788:118;6765:142;6571:343;-1:-1:-1;;;;6571:343:11:o;1986:381:77:-;2066:7;2130:29;;;:19;:29;;;;;;;;2093:66;;;;;;;;;;-1:-1:-1;;;;;2093:66:77;;;;;;;;;;;;;;;;2066:7;;2189:39;:171;;2305:25;;2339:19;;;;2189:171;;;2248:16;;-1:-1:-1;;;;;2248:16:77;;;-1:-1:-1;;;2273:10:77;;;;2189:171;2170:190;;;;;1986:381;;;:::o;1514:459:44:-;1687:15;;1603:23;;1662:22;1687:15;-1:-1:-1;;;;;1753:36:44;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1716:73;;1808:9;1803:123;1824:14;1819:1;:19;1803:123;;1879:32;1899:8;1908:1;1899:11;;;;;;;;:::i;:::-;;;;;;;1879:19;:32::i;:::-;1863:10;1874:1;1863:13;;;;;;;;:::i;:::-;;;;;;;;;;:48;1840:3;;1803:123;;;-1:-1:-1;1946:10:44;1514:459;-1:-1:-1;;;1514:459:44:o;3065:256:77:-;3177:20;:18;:20::i;:::-;3172:76;;3213:24;;-1:-1:-1;;;3213:24:77;;;;;;;:::i;3172:76::-;3258:56;3283:17;3302:11;3258:24;:56::i;5944:123:25:-;6008:7;6034:21;6047:7;6034:12;:21::i;:::-;:26;;5944:123;-1:-1:-1;;5944:123:25:o;3370:203::-;3434:7;-1:-1:-1;;;;;3457:19:25;;3453:60;;3485:28;;-1:-1:-1;;;3485:28:25;;;;;;;;;;;3453:60;-1:-1:-1;;;;;;3538:19:25;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3538:27:25;;3370:203::o;5232:287:11:-;5362:10;:8;:10::i;:::-;5354:46;;;;-1:-1:-1;;;5354:46:11;;;;;;;:::i;:::-;5410:60;5429:19;6193:7;6219:13;;6135:104;5429:19;5450:9;5461:8;5410:18;:60::i;:::-;;;5480:32;5490:3;5495:9;5506:5;5480:9;:32::i;:::-;5232:287;;;;:::o;5285:870:44:-;5355:16;5407:19;5440:25;5479:22;5504:16;5514:5;5504:9;:16::i;:::-;5479:41;;5534:25;5576:14;-1:-1:-1;;;;;5562:29:44;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5562:29:44;;5534:57;;5605:31;;:::i;:::-;5655:9;5650:460;5699:14;5684:11;:29;5650:460;;5750:14;;;;:11;:14;;;;;;;;;5738:26;;;;;;;;;-1:-1:-1;;;;;5738:26:44;;;;-1:-1:-1;;;5738:26:44;;-1:-1:-1;;;;;5738:26:44;;;;;;;;-1:-1:-1;;;5738:26:44;;;;;;;;;;;;;;-1:-1:-1;5826:8:44;5782:71;5874:14;;-1:-1:-1;;;;;5874:28:44;;5870:109;;5946:14;;;-1:-1:-1;5870:109:44;6021:5;-1:-1:-1;;;;;6000:26:44;:17;-1:-1:-1;;;;;6000:26:44;;5996:100;;6076:1;6050:8;6059:13;;;;;;6050:23;;;;;;;;:::i;:::-;;;;;;:27;;;;;5996:100;5715:3;;5650:460;;;-1:-1:-1;6130:8:44;;5285:870;-1:-1:-1;;;;;;5285:870:44:o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;1003:188:56:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:56;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;6291:102:25:-;6347:13;6379:7;6372:14;;;;;:::i;2374:2448:44:-;2505:16;2570:4;2561:5;:13;2557:45;;2583:19;;-1:-1:-1;;;2583:19:44;;;;;;;;;;;2557:45;2616:19;2669:13;;2917:9;2910:4;:16;2906:71;;;2953:9;2946:16;;2906:71;2990:25;3018:16;3028:5;3018:9;:16::i;:::-;2990:44;;3209:4;3201:5;:12;3197:271;;;3255:12;;;3289:31;;;3285:109;;;3364:11;3344:31;;3285:109;3215:193;3197:271;;;-1:-1:-1;3452:1:44;3197:271;3481:25;3523:17;-1:-1:-1;;;;;3509:32:44;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3509:32:44;;3481:60;;3559:17;3580:1;3559:22;3555:76;;3608:8;-1:-1:-1;3601:15:44;;-1:-1:-1;;;3601:15:44;3555:76;3772:31;3806:26;3826:5;3806:19;:26::i;:::-;3772:60;;3846:25;4088:9;:16;;;4083:90;;-1:-1:-1;4144:14:44;;4083:90;4203:5;4186:466;4215:4;4210:1;:9;;:45;;;;;4238:17;4223:11;:32;;4210:45;4186:466;;;4292:14;;;;:11;:14;;;;;;;;;4280:26;;;;;;;;;-1:-1:-1;;;;;4280:26:44;;;;-1:-1:-1;;;4280:26:44;;-1:-1:-1;;;;;4280:26:44;;;;;;;;-1:-1:-1;;;4280:26:44;;;;;;;;;;;;;;-1:-1:-1;4368:8:44;4324:71;4416:14;;-1:-1:-1;;;;;4416:28:44;;4412:109;;4488:14;;;-1:-1:-1;4412:109:44;4563:5;-1:-1:-1;;;;;4542:26:44;:17;-1:-1:-1;;;;;4542:26:44;;4538:100;;4618:1;4592:8;4601:13;;;;;;4592:23;;;;;;;;:::i;:::-;;;;;;:27;;;;;4538:100;4257:3;;4186:466;;;-1:-1:-1;;;4734:29:44;;;-1:-1:-1;4741:8:44;;-1:-1:-1;;2374:2448:44;;;;;;:::o;4259:258:77:-;4376:20;:18;:20::i;:::-;4371:76;;4412:24;;-1:-1:-1;;;4412:24:77;;;;;;;:::i;4371:76::-;4457:53;4483:8;4493:10;4505:4;4457:25;:53::i;7882:282:25:-;8521:10:11;-1:-1:-1;;;;;7980:24:25;;;7976:54;;8013:17;;-1:-1:-1;;;8013:17:25;;;;;;;;;;;7976:54;8521:10:11;8041:32:25;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8041:42:25;;;;;;;;;;;;:53;;-1:-1:-1;;8041:53:25;;;;;;;;;;8109:48;;2067:41:821;;;8041:42:25;;8521:10:11;8109:48:25;;2040:18:821;8109:48:25;;;;;;;7882:282;;:::o;696:567:65:-;756:22;812:4;-1:-1:-1;;;;;800:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:34:65;-1:-1:-1;8521:10:11;834:14:65;;922:311;942:15;;;922:311;;;982:11;978:245;;;1026:78;1063:4;1087;;1092:1;1087:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1096:6;1070:33;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1026:28;:78::i;:::-;1013:7;1021:1;1013:10;;;;;;;;:::i;:::-;;;;;;:91;;;;978:245;;;1156:52;1193:4;1200;;1205:1;1200:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1156:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1156:28:65;;-1:-1:-1;;;1156:52:65:i;:::-;1143:7;1151:1;1143:10;;;;;;;;:::i;:::-;;;;;;:65;;;;978:245;959:3;;922:311;;;;1242:14;;696:567;;;;:::o;8869:343:25:-;8992:28;9002:4;9008:2;9012:7;8992:9;:28::i;:::-;9034:15;:2;-1:-1:-1;;;;;9034:13:25;;:15::i;:::-;9030:176;;;9068:56;9099:4;9105:2;9109:7;9118:5;9068:30;:56::i;:::-;9063:143;;9151:40;;-1:-1:-1;;;9151:40:25;;;;;;;;;;;953:408:44;1029:21;;:::i;:::-;1062:31;;:::i;:::-;1147:13;;1136:7;:24;1103:100;;1183:9;953:408;-1:-1:-1;;953:408:44:o;1103:100::-;-1:-1:-1;1224:20:44;;;;:11;:20;;;;;;;;;1212:32;;;;;;;;;-1:-1:-1;;;;;1212:32:44;;;;-1:-1:-1;;;1212:32:44;;-1:-1:-1;;;;;1212:32:44;;;;;;;;-1:-1:-1;;;1212:32:44;;;;;;;;;;;;;;;;1254:63;;1297:9;953:408;-1:-1:-1;;953:408:44:o;1254:63::-;1333:21;1346:7;1333:12;:21::i;3513:405:11:-;3638:29;3670:17;;;:7;:17;;;;;3638:49;;3613:13;;3638:29;3670:17;3638:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3733:1;3707:15;3701:29;:33;3697:86;;;3757:15;3513:405;-1:-1:-1;;3513:405:11:o;3697:86::-;3793:22;3818:21;3830:8;3818:11;:21::i;:::-;3793:46;;3880:8;3890:19;:8;:17;:19::i;:::-;3863:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3849:62;;;;3513:405;;;:::o;565:34:56:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8230:162:25:-;-1:-1:-1;;;;;8350:25:25;;;8327:4;8350:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8230:162::o;7835:102:11:-;7886:4;7923:7;:5;:7::i;:::-;-1:-1:-1;;;;;7909:21:11;:10;-1:-1:-1;;;;;7909:21:11;;7902:28;;7835:102;:::o;7327:202::-;7433:17;;;;:7;:17;;;;;7427:31;;;;;:::i;:::-;:36;;-1:-1:-1;7419:64:11;;;;-1:-1:-1;;;7419:64:11;;15901:2:821;7419:64:11;;;15883:21:821;15940:2;15920:18;;;15913:30;-1:-1:-1;;;15959:18:821;;;15952:45;16014:18;;7419:64:11;15699:339:821;7419:64:11;7493:17;;;;:7;:17;;;;;:29;7513:9;7493:17;:29;:::i;10171:1678:25:-;10259:20;10282:13;-1:-1:-1;;;;;10309:16:25;;10305:48;;10334:19;;-1:-1:-1;;;10334:19:25;;;;;;;;;;;10305:48;10367:8;10379:1;10367:13;10363:44;;10389:18;;-1:-1:-1;;;10389:18:25;;;;;;;;;;;10363:44;-1:-1:-1;;;;;10750:16:25;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;10808:49:25;;-1:-1:-1;;;;;10750:44:25;;;;;;;10808:49;;;-1:-1:-1;;;;;;;;;10750:44:25;;;;;;10808:49;;;;;;;;;;;;;;;;10872:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;10921:66:25;;;-1:-1:-1;;;10971:15:25;10921:66;;;;;;;;;;;;;10872:25;;11065:23;;;;11107:15;;:13;:15::i;:::-;11103:618;;;11142:308;11172:38;;11197:12;;-1:-1:-1;;;;;11172:38:25;;;11189:1;;-1:-1:-1;;;;;;;;;;;11172:38:25;11189:1;;11172:38;11237:69;11276:1;11280:2;11284:14;;;;;;11300:5;11237:30;:69::i;:::-;11232:172;;11341:40;;-1:-1:-1;;;11341:40:25;;;;;;;;;;;11232:172;11445:3;11430:12;:18;11142:308;;11529:12;11512:13;;:29;11508:43;;11543:8;;;11508:43;11103:618;;;11590:117;11620:40;;11645:14;;;;;-1:-1:-1;;;;;11620:40:25;;;11637:1;;-1:-1:-1;;;;;;;;;;;11620:40:25;11637:1;;11620:40;11702:3;11687:12;:18;11590:117;;11103:618;-1:-1:-1;11734:13:25;:28;;;11782:60;;11815:2;11819:12;11833:8;11782:60;:::i;9458:172::-;9515:4;9578:13;;9568:7;:23;9538:85;;;;-1:-1:-1;;9596:20:25;;;;:11;:20;;;;;:27;-1:-1:-1;;;9596:27:25;;;;9595:28;;9458:172::o;18379:159::-;18459:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18459:29:25;-1:-1:-1;;;;;18459:29:25;;;;;;;;;18503:28;;18459:24;;18503:28;;;;;;;18379:159;;;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;13484:2052:25:-;13564:35;13602:21;13615:7;13602:12;:21::i;:::-;13564:59;;13660:4;-1:-1:-1;;;;;13638:26:25;:13;:18;;;-1:-1:-1;;;;;13638:26:25;;13634:67;;13673:28;;-1:-1:-1;;;13673:28:25;;;;;;;;;;;13634:67;13712:22;8521:10:11;-1:-1:-1;;;;;13738:20:25;;;;:72;;-1:-1:-1;13774:36:25;13791:4;8521:10:11;8230:162:25;:::i;13774:36::-;13738:124;;;-1:-1:-1;8521:10:11;13826:20:25;13838:7;13826:11;:20::i;:::-;-1:-1:-1;;;;;13826:36:25;;13738:124;13712:151;;13879:17;13874:66;;13905:35;;-1:-1:-1;;;13905:35:25;;;;;;;;;;;13874:66;-1:-1:-1;;;;;13954:16:25;;13950:52;;13979:23;;-1:-1:-1;;;13979:23:25;;;;;;;;;;;13950:52;14118:35;14135:1;14139:7;14148:4;14118:8;:35::i;:::-;-1:-1:-1;;;;;14443:18:25;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14443:31:25;;;-1:-1:-1;;;;;14443:31:25;;;-1:-1:-1;;14443:31:25;;;;;;;14488:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14488:29:25;;;;;;;;;;;14566:20;;;:11;:20;;;;;;14600:18;;-1:-1:-1;;;;;;14632:49:25;;;;-1:-1:-1;;;14665:15:25;14632:49;;;;;;;;;;14951:11;;15010:24;;;;;15052:13;;14566:20;;15010:24;;15052:13;15048:377;;15259:13;;15244:11;:28;15240:171;;15296:20;;15364:28;;;;-1:-1:-1;;;;;15338:54:25;-1:-1:-1;;;15338:54:25;-1:-1:-1;;;;;;15338:54:25;;;-1:-1:-1;;;;;15296:20:25;;15338:54;;;;15240:171;14419:1016;;;15469:7;15465:2;-1:-1:-1;;;;;15450:27:25;15459:4;-1:-1:-1;;;;;15450:27:25;-1:-1:-1;;;;;;;;;;;15450:27:25;;;;;;;;;13554:1982;;13484:2052;;;:::o;15913:2355::-;15992:35;16030:21;16043:7;16030:12;:21::i;:::-;16077:18;;15992:59;;-1:-1:-1;16106:284:25;;;;16139:22;8521:10:11;-1:-1:-1;;;;;16165:20:25;;;;:76;;-1:-1:-1;16205:36:25;16222:4;8521:10:11;8230:162:25;:::i;16205:36::-;16165:132;;;-1:-1:-1;8521:10:11;16261:20:25;16273:7;16261:11;:20::i;:::-;-1:-1:-1;;;;;16261:36:25;;16165:132;16139:159;;16318:17;16313:66;;16344:35;;-1:-1:-1;;;16344:35:25;;;;;;;;;;;16313:66;16125:265;16106:284;16513:35;16530:1;16534:7;16543:4;16513:8;:35::i;:::-;-1:-1:-1;;;;;16872:18:25;;;16838:31;16872:18;;;:12;:18;;;;;;;;16904:24;;-1:-1:-1;;;;;;;;;;16904:24:25;;;;;;;;;-1:-1:-1;;;;;;16904:24:25;;;;16942:29;;;;;16927:1;16942:29;;;;;;;;-1:-1:-1;;;;;;16942:29:25;;;;;;;;;;17101:20;;;:11;:20;;;;;;17135;;-1:-1:-1;;;;17202:15:25;17169:49;;;-1:-1:-1;;;17169:49:25;-1:-1:-1;;;;;;17169:49:25;;;;;;;;;;17232:22;-1:-1:-1;;;17232:22:25;;;17520:11;;;17579:24;;;;;17621:13;;16872:18;;17579:24;;17621:13;17617:377;;17828:13;;17813:11;:28;17809:171;;17865:20;;17933:28;;;;-1:-1:-1;;;;;17907:54:25;-1:-1:-1;;;17907:54:25;-1:-1:-1;;;;;;17907:54:25;;;-1:-1:-1;;;;;17865:20:25;;17907:54;;;;17809:171;-1:-1:-1;;18019:35:25;;18046:7;;-1:-1:-1;18042:1:25;;-1:-1:-1;;;;;;18019:35:25;;;-1:-1:-1;;;;;;;;;;;18019:35:25;18042:1;;18019:35;-1:-1:-1;;18237:12:25;:14;;;;;;-1:-1:-1;;15913:2355:25:o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;;;;;;:::i;3509:76::-;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;3864:25:821;;;3689:46:77;;3852:2:821;3837:18;3689:46:77;;;;;;;3408:334;;:::o;4713:1174:25:-;4775:21;;:::i;:::-;4823:7;4921:13;;4914:4;:20;4910:913;;;4958:31;4992:17;;;:11;:17;;;;;;;;;4958:51;;;;;;;;;-1:-1:-1;;;;;4958:51:25;;;;-1:-1:-1;;;4958:51:25;;-1:-1:-1;;;;;4958:51:25;;;;;;;;-1:-1:-1;;;4958:51:25;;;;;;;;;;;;;;5031:774;;5084:14;;-1:-1:-1;;;;;5084:28:25;;5080:107;;5151:9;4713:1174;-1:-1:-1;;;4713:1174:25:o;5080:107::-;-1:-1:-1;;;5547:6:25;5595:17;;;;:11;:17;;;;;;;;;5583:29;;;;;;;;;-1:-1:-1;;;;;5583:29:25;;;;;-1:-1:-1;;;5583:29:25;;-1:-1:-1;;;;;5583:29:25;;;;;;;;-1:-1:-1;;;5583:29:25;;;;;;;;;;;;;5646:28;5642:115;;5717:9;4713:1174;-1:-1:-1;;;4713:1174:25:o;5642:115::-;5504:279;;;4936:887;4910:913;5849:31;;-1:-1:-1;;;5849:31:25;;;;;;;;;;;4591:362:54;4741:25;;4805:24;4816:13;4805:8;:24;:::i;:::-;4877:8;:22;;;;;;;;;;;;;-1:-1:-1;4910:16:54;;;:7;4877:22;4910:16;;;;4795:34;;-1:-1:-1;4795:34:54;;-1:-1:-1;4910:36:54;4929:17;4910:16;:36;:::i;:::-;;4591:362;;;;;;:::o;1273:185:56:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1398:4;1384:11;:18;;;;;;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4619:332:77:-;4736:6;4729:4;:13;4725:69;;;4758:25;;-1:-1:-1;;;4758:25:77;;;;;;;:::i;4725:69::-;4836:49;;;;;;;;-1:-1:-1;;;;;4836:49:77;;;;;;;;;;;;;-1:-1:-1;4804:29:77;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4804:81:77;;;;;;;;;;;-1:-1:-1;4804:81:77;;;;;;;4901:43;;3864:25:821;;;4836:49:77;;4804:29;;4901:43;;3837:18:821;4901:43:77;;;;;;;4619:332;;;:::o;6671:198:289:-;6754:12;6785:77;6806:6;6814:4;6785:77;;;;;;;;;;;;;;;;;:20;:77::i;1405:320::-;-1:-1:-1;;;;;1695:19:289;;:23;;;1405:320::o;19019:650:25:-;19197:72;;-1:-1:-1;;;19197:72:25;;19177:4;;-1:-1:-1;;;;;19197:36:25;;;;;:72;;8521:10:11;;19248:4:25;;19254:7;;19263:5;;19197:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19197:72:25;;;;;;;;-1:-1:-1;;19197:72:25;;;;;;;;;;;;:::i;:::-;;;19193:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19428:6;:13;19445:1;19428:18;19424:229;;19473:40;;-1:-1:-1;;;19473:40:25;;;;;;;;;;;19424:229;19613:6;19607:13;19598:6;19594:2;19590:15;19583:38;19193:470;-1:-1:-1;;;;;;19315:55:25;-1:-1:-1;;;19315:55:25;;-1:-1:-1;19019:650:25;;;;;;:::o;2905:390:54:-;2967:13;2992:25;3020:17;1785:8;:15;;1711:96;3020:17;2992:45;;3047:24;3074:8;3047:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3098:9;3093:161;3117:17;3113:1;:21;3093:161;;;3173:7;3181:1;3173:10;;;;;;;;:::i;:::-;;;;;;;3162:8;:21;3158:86;;;3210:7;:19;3218:7;3226:1;3218:10;;;;;;;;:::i;:::-;;;;;;;3210:19;;;;;;;;;;;3203:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2905:390;;;:::o;3158:86::-;3136:6;3141:1;3136:6;;:::i;:::-;;;3093:161;;;-1:-1:-1;3263:25:54;;-1:-1:-1;;;3263:25:54;;20050:2:821;3263:25:54;;;20032:21:821;20089:2;20069:18;;;20062:30;-1:-1:-1;;;20108:18:821;;;20101:45;20163:18;;3263:25:54;19848:339:821;303:703:298;359:13;576:5;585:1;576:10;572:51;;-1:-1:-1;;602:10:298;;;;;;;;;;;;-1:-1:-1;;;602:10:298;;;;;303:703::o;572:51::-;647:5;632:12;686:75;693:9;;686:75;;718:8;;;;:::i;:::-;;-1:-1:-1;740:10:298;;-1:-1:-1;748:2:298;740:10;;:::i;:::-;;;686:75;;;770:19;802:6;-1:-1:-1;;;;;792:17:298;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;792:17:298;;770:39;;819:150;826:10;;819:150;;852:11;862:1;852:11;;:::i;:::-;;-1:-1:-1;920:10:298;928:2;920:5;:10;:::i;:::-;907:24;;:2;:24;:::i;:::-;894:39;;877:6;884;877:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;877:56:298;;;;;;;;-1:-1:-1;947:11:298;956:2;947:11;;:::i;:::-;;;819:150;;7055:325:289;7196:12;7221;7235:23;7262:6;-1:-1:-1;;;;;7262:19:289;7282:4;7262:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7220:67;;;;7304:69;7331:6;7339:7;7348:10;7360:12;7304:26;:69::i;:::-;7297:76;7055:325;-1:-1:-1;;;;;;7055:325:289:o;7668:628::-;7848:12;7876:7;7872:418;;;7903:10;:17;7924:1;7903:22;7899:286;;8118:18;8129:6;8118:10;:18::i;:::-;8110:60;;;;-1:-1:-1;;;8110:60:289;;21076:2:821;8110:60:289;;;21058:21:821;21115:2;21095:18;;;21088:30;21154:31;21134:18;;;21127:59;21203:18;;8110:60:289;20874:353:821;8110:60:289;-1:-1:-1;8205:10:289;8198:17;;7872:418;8246:33;8254:10;8266:12;8977:17;;:21;8973:379;;9205:10;9199:17;9261:15;9248:10;9244:2;9240:19;9233:44;8973:379;9328:12;9321:20;;-1:-1:-1;;;9321:20:289;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:173:821:-;82:20;;-1:-1:-1;;;;;131:31:821;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:127::-;253:10;248:3;244:20;241:1;234:31;284:4;281:1;274:15;308:4;305:1;298:15;324:275;395:2;389:9;460:2;441:13;;-1:-1:-1;;437:27:821;425:40;;-1:-1:-1;;;;;480:34:821;;516:22;;;477:62;474:88;;;542:18;;:::i;:::-;578:2;571:22;324:275;;-1:-1:-1;324:275:821:o;604:531::-;647:5;700:3;693:4;685:6;681:17;677:27;667:55;;718:1;715;708:12;667:55;754:6;741:20;-1:-1:-1;;;;;776:2:821;773:26;770:52;;;802:18;;:::i;:::-;846:55;889:2;870:13;;-1:-1:-1;;866:27:821;895:4;862:38;846:55;:::i;:::-;926:2;917:7;910:19;972:3;965:4;960:2;952:6;948:15;944:26;941:35;938:55;;;989:1;986;979:12;938:55;1054:2;1047:4;1039:6;1035:17;1028:4;1019:7;1015:18;1002:55;1102:1;1077:16;;;1095:4;1073:27;1066:38;;;;1081:7;604:531;-1:-1:-1;;;604:531:821:o;1140:396::-;1218:6;1226;1279:2;1267:9;1258:7;1254:23;1250:32;1247:52;;;1295:1;1292;1285:12;1247:52;1318:29;1337:9;1318:29;:::i;:::-;1308:39;;1398:2;1387:9;1383:18;1370:32;-1:-1:-1;;;;;1417:6:821;1414:30;1411:50;;;1457:1;1454;1447:12;1411:50;1480;1522:7;1513:6;1502:9;1498:22;1480:50;:::i;:::-;1470:60;;;1140:396;;;;;:::o;1541:131::-;-1:-1:-1;;;;;;1615:32:821;;1605:43;;1595:71;;1662:1;1659;1652:12;1677:245;1735:6;1788:2;1776:9;1767:7;1763:23;1759:32;1756:52;;;1804:1;1801;1794:12;1756:52;1843:9;1830:23;1862:30;1886:5;1862:30;:::i;2119:250::-;2204:1;2214:113;2228:6;2225:1;2222:13;2214:113;;;2304:11;;;2298:18;2285:11;;;2278:39;2250:2;2243:10;2214:113;;;-1:-1:-1;;2361:1:821;2343:16;;2336:27;2119:250::o;2374:271::-;2416:3;2454:5;2448:12;2481:6;2476:3;2469:19;2497:76;2566:6;2559:4;2554:3;2550:14;2543:4;2536:5;2532:16;2497:76;:::i;:::-;2627:2;2606:15;-1:-1:-1;;2602:29:821;2593:39;;;;2634:4;2589:50;;2374:271;-1:-1:-1;;2374:271:821:o;2650:220::-;2799:2;2788:9;2781:21;2762:4;2819:45;2860:2;2849:9;2845:18;2837:6;2819:45;:::i;2875:180::-;2934:6;2987:2;2975:9;2966:7;2962:23;2958:32;2955:52;;;3003:1;3000;2993:12;2955:52;-1:-1:-1;3026:23:821;;2875:180;-1:-1:-1;2875:180:821:o;3268:254::-;3336:6;3344;3397:2;3385:9;3376:7;3372:23;3368:32;3365:52;;;3413:1;3410;3403:12;3365:52;3436:29;3455:9;3436:29;:::i;:::-;3426:39;3512:2;3497:18;;;;3484:32;;-1:-1:-1;;;3268:254:821:o;3527:186::-;3586:6;3639:2;3627:9;3618:7;3614:23;3610:32;3607:52;;;3655:1;3652;3645:12;3607:52;3678:29;3697:9;3678:29;:::i;3900:328::-;3977:6;3985;3993;4046:2;4034:9;4025:7;4021:23;4017:32;4014:52;;;4062:1;4059;4052:12;4014:52;4085:29;4104:9;4085:29;:::i;:::-;4075:39;;4133:38;4167:2;4156:9;4152:18;4133:38;:::i;:::-;4123:48;;4218:2;4207:9;4203:18;4190:32;4180:42;;3900:328;;;;;:::o;4233:248::-;4301:6;4309;4362:2;4350:9;4341:7;4337:23;4333:32;4330:52;;;4378:1;4375;4368:12;4330:52;-1:-1:-1;;4401:23:821;;;4471:2;4456:18;;;4443:32;;-1:-1:-1;4233:248:821:o;5055:946::-;5139:6;5170:2;5213;5201:9;5192:7;5188:23;5184:32;5181:52;;;5229:1;5226;5219:12;5181:52;5269:9;5256:23;-1:-1:-1;;;;;5339:2:821;5331:6;5328:14;5325:34;;;5355:1;5352;5345:12;5325:34;5393:6;5382:9;5378:22;5368:32;;5438:7;5431:4;5427:2;5423:13;5419:27;5409:55;;5460:1;5457;5450:12;5409:55;5496:2;5483:16;5518:2;5514;5511:10;5508:36;;;5524:18;;:::i;:::-;5570:2;5567:1;5563:10;5553:20;;5593:28;5617:2;5613;5609:11;5593:28;:::i;:::-;5655:15;;;5725:11;;;5721:20;;;5686:12;;;;5753:19;;;5750:39;;;5785:1;5782;5775:12;5750:39;5809:11;;;;5829:142;5845:6;5840:3;5837:15;5829:142;;;5911:17;;5899:30;;5862:12;;;;5949;;;;5829:142;;;5990:5;5055:946;-1:-1:-1;;;;;;;;5055:946:821:o;6006:278::-;6090:12;;-1:-1:-1;;;;;6086:38:821;6074:51;;6178:4;6167:16;;;6161:23;-1:-1:-1;;;;;6157:48:821;6141:14;;;6134:72;6269:4;6258:16;;;6252:23;6245:31;6238:39;6222:14;;6215:63;6006:278::o;6289:726::-;6526:2;6578:21;;;6648:13;;6551:18;;;6670:22;;;6497:4;;6526:2;6749:15;;;;6723:2;6708:18;;;6497:4;6792:197;6806:6;6803:1;6800:13;6792:197;;;6855:52;6903:3;6894:6;6888:13;6855:52;:::i;:::-;6964:15;;;;6936:4;6927:14;;;;;6828:1;6821:9;6792:197;;7020:685;7125:6;7133;7141;7149;7202:3;7190:9;7181:7;7177:23;7173:33;7170:53;;;7219:1;7216;7209:12;7170:53;7242:29;7261:9;7242:29;:::i;:::-;7232:39;;7318:2;7307:9;7303:18;7290:32;7280:42;;7373:2;7362:9;7358:18;7345:32;-1:-1:-1;;;;;7437:2:821;7429:6;7426:14;7423:34;;;7453:1;7450;7443:12;7423:34;7476:50;7518:7;7509:6;7498:9;7494:22;7476:50;:::i;:::-;7466:60;;7579:2;7568:9;7564:18;7551:32;7535:48;;7608:2;7598:8;7595:16;7592:36;;;7624:1;7621;7614:12;7592:36;;7647:52;7691:7;7680:8;7669:9;7665:24;7647:52;:::i;:::-;7637:62;;;7020:685;;;;;;;:::o;7710:632::-;7881:2;7933:21;;;8003:13;;7906:18;;;8025:22;;;7852:4;;7881:2;8104:15;;;;8078:2;8063:18;;;7852:4;8147:169;8161:6;8158:1;8155:13;8147:169;;;8222:13;;8210:26;;8291:15;;;;8256:12;;;;8183:1;8176:9;8147:169;;8347:322;8416:6;8469:2;8457:9;8448:7;8444:23;8440:32;8437:52;;;8485:1;8482;8475:12;8437:52;8525:9;8512:23;-1:-1:-1;;;;;8550:6:821;8547:30;8544:50;;;8590:1;8587;8580:12;8544:50;8613;8655:7;8646:6;8635:9;8631:22;8613:50;:::i;8674:322::-;8751:6;8759;8767;8820:2;8808:9;8799:7;8795:23;8791:32;8788:52;;;8836:1;8833;8826:12;8788:52;8859:29;8878:9;8859:29;:::i;:::-;8849:39;8935:2;8920:18;;8907:32;;-1:-1:-1;8986:2:821;8971:18;;;8958:32;;8674:322;-1:-1:-1;;;8674:322:821:o;9001:::-;9078:6;9086;9094;9147:2;9135:9;9126:7;9122:23;9118:32;9115:52;;;9163:1;9160;9153:12;9115:52;9199:9;9186:23;9176:33;;9228:38;9262:2;9251:9;9247:18;9228:38;:::i;9328:347::-;9393:6;9401;9454:2;9442:9;9433:7;9429:23;9425:32;9422:52;;;9470:1;9467;9460:12;9422:52;9493:29;9512:9;9493:29;:::i;:::-;9483:39;;9572:2;9561:9;9557:18;9544:32;9619:5;9612:13;9605:21;9598:5;9595:32;9585:60;;9641:1;9638;9631:12;9585:60;9664:5;9654:15;;;9328:347;;;;;:::o;9680:626::-;9777:6;9785;9838:2;9826:9;9817:7;9813:23;9809:32;9806:52;;;9854:1;9851;9844:12;9806:52;9894:9;9881:23;-1:-1:-1;;;;;9964:2:821;9956:6;9953:14;9950:34;;;9980:1;9977;9970:12;9950:34;10018:6;10007:9;10003:22;9993:32;;10063:7;10056:4;10052:2;10048:13;10044:27;10034:55;;10085:1;10082;10075:12;10034:55;10125:2;10112:16;10151:2;10143:6;10140:14;10137:34;;;10167:1;10164;10157:12;10137:34;10220:7;10215:2;10205:6;10202:1;10198:14;10194:2;10190:23;10186:32;10183:45;10180:65;;;10241:1;10238;10231:12;10180:65;10272:2;10264:11;;;;;10294:6;;-1:-1:-1;9680:626:821;;-1:-1:-1;;;;9680:626:821:o;10311:801::-;10471:4;10500:2;10540;10529:9;10525:18;10570:2;10559:9;10552:21;10593:6;10628;10622:13;10659:6;10651;10644:22;10697:2;10686:9;10682:18;10675:25;;10759:2;10749:6;10746:1;10742:14;10731:9;10727:30;10723:39;10709:53;;10797:2;10789:6;10785:15;10818:1;10828:255;10842:6;10839:1;10836:13;10828:255;;;10935:2;10931:7;10919:9;10911:6;10907:22;10903:36;10898:3;10891:49;10963:40;10996:6;10987;10981:13;10963:40;:::i;:::-;10953:50;-1:-1:-1;11061:12:821;;;;11026:15;;;;10864:1;10857:9;10828:255;;;-1:-1:-1;11100:6:821;;10311:801;-1:-1:-1;;;;;;;10311:801:821:o;11117:538::-;11212:6;11220;11228;11236;11289:3;11277:9;11268:7;11264:23;11260:33;11257:53;;;11306:1;11303;11296:12;11257:53;11329:29;11348:9;11329:29;:::i;:::-;11319:39;;11377:38;11411:2;11400:9;11396:18;11377:38;:::i;:::-;11367:48;;11462:2;11451:9;11447:18;11434:32;11424:42;;11517:2;11506:9;11502:18;11489:32;-1:-1:-1;;;;;11536:6:821;11533:30;11530:50;;;11576:1;11573;11566:12;11530:50;11599;11641:7;11632:6;11621:9;11617:22;11599:50;:::i;11660:269::-;11860:2;11845:18;;11872:51;11849:9;11905:6;11872:51;:::i;11934:260::-;12002:6;12010;12063:2;12051:9;12042:7;12038:23;12034:32;12031:52;;;12079:1;12076;12069:12;12031:52;12102:29;12121:9;12102:29;:::i;:::-;12092:39;;12150:38;12184:2;12173:9;12169:18;12150:38;:::i;:::-;12140:48;;11934:260;;;;;:::o;12199:347::-;12401:2;12383:21;;;12440:2;12420:18;;;12413:30;-1:-1:-1;;;12474:2:821;12459:18;;12452:53;12537:2;12522:18;;12199:347::o;12551:380::-;12630:1;12626:12;;;;12673;;;12694:61;;12748:4;12740:6;12736:17;12726:27;;12694:61;12801:2;12793:6;12790:14;12770:18;12767:38;12764:161;;12847:10;12842:3;12838:20;12835:1;12828:31;12882:4;12879:1;12872:15;12910:4;12907:1;12900:15;12764:161;;12551:380;;;:::o;12936:338::-;13138:2;13120:21;;;13177:2;13157:18;;;13150:30;-1:-1:-1;;;13211:2:821;13196:18;;13189:44;13265:2;13250:18;;12936:338::o;13621:127::-;13682:10;13677:3;13673:20;13670:1;13663:31;13713:4;13710:1;13703:15;13737:4;13734:1;13727:15;13753:127;13814:10;13809:3;13805:20;13802:1;13795:31;13845:4;13842:1;13835:15;13869:4;13866:1;13859:15;13885:168;13958:9;;;13989;;14006:15;;;14000:22;;13986:37;13976:71;;14027:18;;:::i;14058:127::-;14119:10;14114:3;14110:20;14107:1;14100:31;14150:4;14147:1;14140:15;14174:4;14171:1;14164:15;14190:120;14230:1;14256;14246:35;;14261:18;;:::i;:::-;-1:-1:-1;14295:9:821;;14190:120::o;14315:521::-;14392:4;14398:6;14458:11;14445:25;14552:2;14548:7;14537:8;14521:14;14517:29;14513:43;14493:18;14489:68;14479:96;;14571:1;14568;14561:12;14479:96;14598:33;;14650:20;;;-1:-1:-1;;;;;;14682:30:821;;14679:50;;;14725:1;14722;14715:12;14679:50;14758:4;14746:17;;-1:-1:-1;14789:14:821;14785:27;;;14775:38;;14772:58;;;14826:1;14823;14816:12;14772:58;14315:521;;;;;:::o;14841:352::-;15052:6;15044;15039:3;15026:33;15147:2;15118:15;;;;-1:-1:-1;;;;;;15114:45:821;15078:16;;15103:57;;;15184:2;15176:11;;14841:352;-1:-1:-1;14841:352:821:o;15198:496::-;15377:3;15415:6;15409:13;15431:66;15490:6;15485:3;15478:4;15470:6;15466:17;15431:66;:::i;:::-;15560:13;;15519:16;;;;15582:70;15560:13;15519:16;15629:4;15617:17;;15582:70;:::i;:::-;15668:20;;15198:496;-1:-1:-1;;;;15198:496:821:o;16169:543::-;16271:2;16266:3;16263:11;16260:446;;;16307:1;16331:5;16328:1;16321:16;16375:4;16372:1;16362:18;16445:2;16433:10;16429:19;16426:1;16422:27;16416:4;16412:38;16481:4;16469:10;16466:20;16463:47;;;-1:-1:-1;16504:4:821;16463:47;16559:2;16554:3;16550:12;16547:1;16543:20;16537:4;16533:31;16523:41;;16614:82;16632:2;16625:5;16622:13;16614:82;;;16677:17;;;16658:1;16647:13;16614:82;;;16618:3;;;16169:543;;;:::o;16888:1345::-;17014:3;17008:10;-1:-1:-1;;;;;17033:6:821;17030:30;17027:56;;;17063:18;;:::i;:::-;17092:97;17182:6;17142:38;17174:4;17168:11;17142:38;:::i;:::-;17136:4;17092:97;:::i;:::-;17244:4;;17301:2;17290:14;;17318:1;17313:663;;;;18020:1;18037:6;18034:89;;;-1:-1:-1;18089:19:821;;;18083:26;18034:89;-1:-1:-1;;16845:1:821;16841:11;;;16837:24;16833:29;16823:40;16869:1;16865:11;;;16820:57;18136:81;;17283:944;;17313:663;16116:1;16109:14;;;16153:4;16140:18;;-1:-1:-1;;17349:20:821;;;17467:236;17481:7;17478:1;17475:14;17467:236;;;17570:19;;;17564:26;17549:42;;17662:27;;;;17630:1;17618:14;;;;17497:19;;17467:236;;;17471:3;17731:6;17722:7;17719:19;17716:201;;;17792:19;;;17786:26;-1:-1:-1;;17875:1:821;17871:14;;;17887:3;17867:24;17863:37;17859:42;17844:58;17829:74;;17716:201;-1:-1:-1;;;;;17963:1:821;17947:14;;;17943:22;17930:36;;-1:-1:-1;16888:1345:821:o;18238:339::-;18440:2;18422:21;;;18479:2;18459:18;;;18452:30;-1:-1:-1;;;18513:2:821;18498:18;;18491:45;18568:2;18553:18;;18238:339::o;18582:125::-;18647:9;;;18668:10;;;18665:36;;;18681:18;;:::i;18712:383::-;18909:2;18898:9;18891:21;18872:4;18935:45;18976:2;18965:9;18961:18;18953:6;18935:45;:::i;:::-;19028:9;19020:6;19016:22;19011:2;19000:9;18996:18;18989:50;19056:33;19082:6;19074;19056:33;:::i;:::-;19048:41;18712:383;-1:-1:-1;;;;;18712:383:821:o;19100:489::-;-1:-1:-1;;;;;19369:15:821;;;19351:34;;19421:15;;19416:2;19401:18;;19394:43;19468:2;19453:18;;19446:34;;;19516:3;19511:2;19496:18;;19489:31;;;19294:4;;19537:46;;19563:19;;19555:6;19537:46;:::i;19594:249::-;19663:6;19716:2;19704:9;19695:7;19691:23;19687:32;19684:52;;;19732:1;19729;19722:12;19684:52;19764:9;19758:16;19783:30;19807:5;19783:30;:::i;20192:135::-;20231:3;20252:17;;;20249:43;;20272:18;;:::i;:::-;-1:-1:-1;20319:1:821;20308:13;;20192:135::o;20332:128::-;20399:9;;;20420:11;;;20417:37;;;20434:18;;:::i;20465:112::-;20497:1;20523;20513:35;;20528:18;;:::i;:::-;-1:-1:-1;20562:9:821;;20465:112::o;20582:287::-;20711:3;20749:6;20743:13;20765:66;20824:6;20819:3;20812:4;20804:6;20800:17;20765:66;:::i;:::-;20847:16;;;;;20582:287;-1:-1:-1;;20582:287:821:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "batchFrozen(uint256)": "83040532",
    "batchMintTo(address,uint256,string,bytes)": "754a81d9",
    "burn(uint256)": "42966c68",
    "contractURI()": "e8a3d485",
    "explicitOwnershipOf(uint256)": "c23dc68f",
    "explicitOwnershipsOf(uint256[])": "5bbb2177",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isApprovedOrOwner(address,uint256)": "430c2081",
    "mintTo(address,string)": "0075a317",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "tokensOfOwner(address)": "8462151c",
    "tokensOfOwnerIn(address,uint256,uint256)": "99a2557a",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApprovedOrOwnerOf\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"DefaultRoyalty(address,uint256)\":{\"details\":\"Emitted when royalty info is updated.\"},\"MetadataFrozen()\":{\"details\":\"This event emits when the metadata of all tokens are frozen. While not currently supported by marketplaces, this event allows future indexing if desired.\"},\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"},\"RoyaltyForToken(uint256,address,uint256)\":{\"details\":\"Emitted when royalty recipient for tokenId is set\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintTo(address,uint256,string,bytes)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_baseURI\":\"The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`\",\"_data\":\"Additional data to pass along during the minting of the NFT.\",\"_quantity\":\"The number of NFTs to mint.\",\"_to\":\"The recipient of the NFT to mint.\"}},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"constructor\":{\"params\":{\"_defaultAdmin\":\"The default admin of the contract.\",\"_name\":\"The name of the contract.\",\"_royaltyBps\":\"The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\",\"_royaltyRecipient\":\"The address to receive royalties.\",\"_symbol\":\"The symbol of the contract.\"}},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds:   - `addr` = `address(0)`   - `startTimestamp` = `0`   - `burned` = `false` If the `tokenId` is burned:   - `addr` = `<Address of owner before token was burned>`   - `startTimestamp` = `<Timestamp when token was burned>`   - `burned = `true` Otherwise:   - `addr` = `<Address of owner>`   - `startTimestamp` = `<Timestamp of start of ownership>`   - `burned = `false`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isApprovedOrOwner(address,uint256)\":{\"params\":{\"_operator\":\"The address to check.\",\"_tokenId\":\"The tokenId of the NFT to check.\"},\"returns\":{\"isApprovedOrOwnerOf\":\"Whether the given address is approved to transfer the given NFT.\"}},\"mintTo(address,string)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_to\":\"The recipient of the NFT to mint.\",\"_tokenURI\":\"The full metadata URI for the NFT minted.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(totalSupply) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K pfp collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start` < `stop`\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"batchMintTo(address,uint256,string,bytes)\":{\"notice\":\"Lets an authorized address mint multiple NFTs at once to a recipient.\"},\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"constructor\":{\"notice\":\"Initializes the contract during construction.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isApprovedOrOwner(address,uint256)\":{\"notice\":\"Returns whether a given address is the owner, or approved to transfer an NFT.\"},\"mintTo(address,string)\":{\"notice\":\"Lets an authorized address mint an NFT to a recipient.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"}},\"notice\":\"The `ERC721Base` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.  It includes the following additions to standard ERC721 logic:      - Ability to mint NFTs via the provided `mint` function.      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721Base.sol\":\"ERC721Base\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC721Base.sol\":{\"keccak256\":\"0x111c72f624b88091267c2b88f8a1f517625b449df581c0f053e38f3f3e07c5c1\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7b1d67abd2200c55e5b369d62ecc8cfdab3b5ed826c7565b23ad17e231e1ec00\",\"dweb:/ipfs/QmYTaUuT8kZHyzYe9V7nPSJtL9Lffj9SfDv5jUMqZFCM3x\"]},\"contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"contracts/eip/ERC721AVirtualApprove.sol\":{\"keccak256\":\"0x6547a787b5ac8032fddbee8d058d520ef8da5c5808b89d47b11bd5ff27d32afc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fde24fcc2b49c889651aac81bff6f1fa8786e55a6f65c1e3f052666dff71143\",\"dweb:/ipfs/QmW6YArfXiUzQsDZHoTeWsZYkrMmAVTpttnEsmYGqPzQWx\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6\",\"dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT\"]},\"contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf\",\"dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj\"]},\"contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"contracts/eip/interface/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"contracts/eip/queryable/ERC721AQueryable.sol\":{\"keccak256\":\"0x3767fb2bdfd037f933c736a0d303924a3d35ce5d452f1103d8d9c7b9b770a2b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6dcc7057525dd0286daa665788993255bc720de7a67bf2888b3f2a1f28a39081\",\"dweb:/ipfs/QmSGawcbfNDjS4QoUfCP3B56Cks34Qs1GBmDyviFzUC2W1\"]},\"contracts/eip/queryable/IERC721AQueryable.sol\":{\"keccak256\":\"0x4366cfd26dedac76df02a75c9c2a310242323f9b2d0998047f2809f8c99064a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d2bd543adb78da0ec0ebc776884e7d2de4a5f70ca9d5c428e3ca6cc91bfcc052\",\"dweb:/ipfs/QmNnoejSYCgWAv2abhQQm45twnxhih4xefv14spcfjGMCi\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365\",\"dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e\",\"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95\",\"dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e\",\"dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/lib/Address.sol\":{\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5\",\"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidQueryRange"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURI",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchMintTo"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "explicitOwnershipOf",
          "outputs": [
            {
              "internalType": "struct IERC721A.TokenOwnership",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "startTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "explicitOwnershipsOf",
          "outputs": [
            {
              "internalType": "struct IERC721A.TokenOwnership[]",
              "name": "",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "startTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedOrOwner",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isApprovedOrOwnerOf",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_tokenURI",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mintTo"
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokensOfOwner",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stop",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokensOfOwnerIn",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "batchMintTo(address,uint256,string,bytes)": {
            "details": "The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.",
            "params": {
              "_baseURI": "The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`",
              "_data": "Additional data to pass along during the minting of the NFT.",
              "_quantity": "The number of NFTs to mint.",
              "_to": "The recipient of the NFT to mint."
            }
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "constructor": {
            "params": {
              "_defaultAdmin": "The default admin of the contract.",
              "_name": "The name of the contract.",
              "_royaltyBps": "The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)",
              "_royaltyRecipient": "The address to receive royalties.",
              "_symbol": "The symbol of the contract."
            }
          },
          "explicitOwnershipOf(uint256)": {
            "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds:   - `addr` = `address(0)`   - `startTimestamp` = `0`   - `burned` = `false` If the `tokenId` is burned:   - `addr` = `<Address of owner before token was burned>`   - `startTimestamp` = `<Timestamp when token was burned>`   - `burned = `true` Otherwise:   - `addr` = `<Address of owner>`   - `startTimestamp` = `<Timestamp of start of ownership>`   - `burned = `false`"
          },
          "explicitOwnershipsOf(uint256[])": {
            "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "isApprovedOrOwner(address,uint256)": {
            "params": {
              "_operator": "The address to check.",
              "_tokenId": "The tokenId of the NFT to check."
            },
            "returns": {
              "isApprovedOrOwnerOf": "Whether the given address is approved to transfer the given NFT."
            }
          },
          "mintTo(address,string)": {
            "details": "The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.",
            "params": {
              "_to": "The recipient of the NFT to mint.",
              "_tokenURI": "The full metadata URI for the NFT minted."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "tokensOfOwner(address)": {
            "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(totalSupply) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K pfp collections should be fine)."
          },
          "tokensOfOwnerIn(address,uint256,uint256)": {
            "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start` < `stop`"
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "batchMintTo(address,uint256,string,bytes)": {
            "notice": "Lets an authorized address mint multiple NFTs at once to a recipient."
          },
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "constructor": {
            "notice": "Initializes the contract during construction."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isApprovedOrOwner(address,uint256)": {
            "notice": "Returns whether a given address is the owner, or approved to transfer an NFT."
          },
          "mintTo(address,string)": {
            "notice": "Lets an authorized address mint an NFT to a recipient."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "lib/sstore2/=lib/dynamic-contracts/lib/sstore2/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC721Base.sol": "ERC721Base"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC721Base.sol": {
        "keccak256": "0x111c72f624b88091267c2b88f8a1f517625b449df581c0f053e38f3f3e07c5c1",
        "urls": [
          "bzz-raw://7b1d67abd2200c55e5b369d62ecc8cfdab3b5ed826c7565b23ad17e231e1ec00",
          "dweb:/ipfs/QmYTaUuT8kZHyzYe9V7nPSJtL9Lffj9SfDv5jUMqZFCM3x"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "contracts/eip/ERC721AVirtualApprove.sol": {
        "keccak256": "0x6547a787b5ac8032fddbee8d058d520ef8da5c5808b89d47b11bd5ff27d32afc",
        "urls": [
          "bzz-raw://1fde24fcc2b49c889651aac81bff6f1fa8786e55a6f65c1e3f052666dff71143",
          "dweb:/ipfs/QmW6YArfXiUzQsDZHoTeWsZYkrMmAVTpttnEsmYGqPzQWx"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa",
        "urls": [
          "bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6",
          "dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC721.sol": {
        "keccak256": "0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea",
        "urls": [
          "bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf",
          "dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "contracts/eip/queryable/ERC721AQueryable.sol": {
        "keccak256": "0x3767fb2bdfd037f933c736a0d303924a3d35ce5d452f1103d8d9c7b9b770a2b2",
        "urls": [
          "bzz-raw://6dcc7057525dd0286daa665788993255bc720de7a67bf2888b3f2a1f28a39081",
          "dweb:/ipfs/QmSGawcbfNDjS4QoUfCP3B56Cks34Qs1GBmDyviFzUC2W1"
        ],
        "license": "MIT"
      },
      "contracts/eip/queryable/IERC721AQueryable.sol": {
        "keccak256": "0x4366cfd26dedac76df02a75c9c2a310242323f9b2d0998047f2809f8c99064a0",
        "urls": [
          "bzz-raw://d2bd543adb78da0ec0ebc776884e7d2de4a5f70ca9d5c428e3ca6cc91bfcc052",
          "dweb:/ipfs/QmNnoejSYCgWAv2abhQQm45twnxhih4xefv14spcfjGMCi"
        ],
        "license": "MIT"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345",
        "urls": [
          "bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365",
          "dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
        "urls": [
          "bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
          "dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501",
        "urls": [
          "bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95",
          "dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d",
        "urls": [
          "bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e",
          "dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/lib/Address.sol": {
        "keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
        "urls": [
          "bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
          "dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/Strings.sol": {
        "keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
        "urls": [
          "bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
          "dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC721Base.sol",
    "id": 4049,
    "exportedSymbols": {
      "Address": [
        64760
      ],
      "BatchMintMetadata": [
        17840
      ],
      "Context": [
        49279
      ],
      "ContractMetadata": [
        18093
      ],
      "ERC165": [
        7939
      ],
      "ERC721A": [
        12340
      ],
      "ERC721AQueryable": [
        14739
      ],
      "ERC721Base": [
        4048
      ],
      "IContractMetadata": [
        33084
      ],
      "IERC165": [
        13945
      ],
      "IERC2981": [
        14089
      ],
      "IERC721": [
        14221
      ],
      "IERC721A": [
        14292
      ],
      "IERC721AQueryable": [
        17205
      ],
      "IERC721Metadata": [
        14338
      ],
      "IERC721Receiver": [
        14356
      ],
      "IMulticall": [
        33577
      ],
      "IOwnable": [
        33834
      ],
      "IRoyalty": [
        34061
      ],
      "Multicall": [
        21206
      ],
      "Ownable": [
        21764
      ],
      "Royalty": [
        23031
      ],
      "Strings": [
        66084
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:8502:11",
    "nodes": [
      {
        "id": 3704,
        "nodeType": "PragmaDirective",
        "src": "39:23:11",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 3705,
        "nodeType": "ImportDirective",
        "src": "86:47:11",
        "nodes": [],
        "absolutePath": "contracts/eip/queryable/ERC721AQueryable.sol",
        "file": "../eip/queryable/ERC721AQueryable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4049,
        "sourceUnit": 14740,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3706,
        "nodeType": "ImportDirective",
        "src": "135:43:11",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4049,
        "sourceUnit": 18094,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3707,
        "nodeType": "ImportDirective",
        "src": "179:36:11",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4049,
        "sourceUnit": 21207,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3708,
        "nodeType": "ImportDirective",
        "src": "216:34:11",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4049,
        "sourceUnit": 21765,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3709,
        "nodeType": "ImportDirective",
        "src": "251:34:11",
        "nodes": [],
        "absolutePath": "contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4049,
        "sourceUnit": 23032,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3710,
        "nodeType": "ImportDirective",
        "src": "286:44:11",
        "nodes": [],
        "absolutePath": "contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4049,
        "sourceUnit": 17841,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3711,
        "nodeType": "ImportDirective",
        "src": "332:28:11",
        "nodes": [],
        "absolutePath": "contracts/lib/Strings.sol",
        "file": "../lib/Strings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4049,
        "sourceUnit": 66085,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4048,
        "nodeType": "ContractDefinition",
        "src": "1063:7477:11",
        "nodes": [
          {
            "id": 3727,
            "nodeType": "UsingForDirective",
            "src": "1175:26:11",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 3725,
              "name": "Strings",
              "nameLocations": [
                "1181:7:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66084,
              "src": "1181:7:11"
            },
            "typeName": {
              "id": 3726,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1193:7:11",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 3731,
            "nodeType": "VariableDeclaration",
            "src": "1383:42:11",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "fullURI",
            "nameLocation": "1418:7:11",
            "scope": 4048,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 3730,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 3728,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1391:7:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1383:26:11",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 3729,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1402:6:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "visibility": "private"
          },
          {
            "id": 3759,
            "nodeType": "FunctionDefinition",
            "src": "2057:306:11",
            "nodes": [],
            "body": {
              "id": 3758,
              "nodeType": "Block",
              "src": "2254:109:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3750,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3734,
                        "src": "2276:13:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 3749,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21757,
                      "src": "2264:11:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 3751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2264:26:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3752,
                  "nodeType": "ExpressionStatement",
                  "src": "2264:26:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3754,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3740,
                        "src": "2325:17:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3755,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3742,
                        "src": "2344:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 3753,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22962,
                      "src": "2300:24:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3756,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2300:56:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3757,
                  "nodeType": "ExpressionStatement",
                  "src": "2300:56:11"
                }
              ]
            },
            "documentation": {
              "id": 3732,
              "nodeType": "StructuredDocumentation",
              "src": "1611:441:11",
              "text": " @notice Initializes the contract during construction.\n @param _defaultAdmin     The default admin of the contract.\n @param _name             The name of the contract.\n @param _symbol           The symbol of the contract.\n @param _royaltyRecipient The address to receive royalties.\n @param _royaltyBps       The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 3745,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3736,
                    "src": "2238:5:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 3746,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3738,
                    "src": "2245:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 3747,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 3744,
                  "name": "ERC721A",
                  "nameLocations": [
                    "2230:7:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12340,
                  "src": "2230:7:11"
                },
                "nodeType": "ModifierInvocation",
                "src": "2230:23:11"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 3743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3734,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "2086:13:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3759,
                  "src": "2078:21:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3733,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2078:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3736,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2123:5:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3759,
                  "src": "2109:19:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3735,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2109:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3738,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2152:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3759,
                  "src": "2138:21:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3737,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2138:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3740,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "2177:17:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3759,
                  "src": "2169:25:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3739,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2169:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3742,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "2212:11:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3759,
                  "src": "2204:19:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 3741,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2204:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2068:161:11"
            },
            "returnParameters": {
              "id": 3748,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2254:0:11"
            },
            "scope": 4048,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 3790,
            "nodeType": "FunctionDefinition",
            "src": "2655:444:11",
            "nodes": [],
            "body": {
              "id": 3789,
              "nodeType": "Block",
              "src": "2764:335:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 3787,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 3780,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 3776,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 3772,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3770,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3762,
                            "src": "2793:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 3771,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2808:10:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "2793:25:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 3775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3773,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3762,
                            "src": "2868:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783830616335386364",
                            "id": 3774,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2883:10:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2158778573_by_1",
                              "typeString": "int_const 2158778573"
                            },
                            "value": "0x80ac58cd"
                          },
                          "src": "2868:25:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2793:100:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 3779,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 3777,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3762,
                          "src": "2943:11:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783562356531333966",
                          "id": 3778,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2958:10:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1532892063_by_1",
                            "typeString": "int_const 1532892063"
                          },
                          "value": "0x5b5e139f"
                        },
                        "src": "2943:25:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "2793:175:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 3786,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 3781,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3762,
                        "src": "3026:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3783,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14089,
                              "src": "3046:8:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$14089_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$14089_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 3782,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3041:4:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 3784,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3041:14:11",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$14089",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 3785,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3056:11:11",
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "3041:26:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "3026:41:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2793:274:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3769,
                  "id": 3788,
                  "nodeType": "Return",
                  "src": "2774:293:11"
                }
              ]
            },
            "baseFunctions": [
              11105,
              13944
            ],
            "documentation": {
              "id": 3760,
              "nodeType": "StructuredDocumentation",
              "src": "2549:101:11",
              "text": " @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\n @inheritdoc IERC165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "2664:17:11",
            "overrides": {
              "id": 3766,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 3764,
                  "name": "ERC721A",
                  "nameLocations": [
                    "2731:7:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12340,
                  "src": "2731:7:11"
                },
                {
                  "id": 3765,
                  "name": "IERC165",
                  "nameLocations": [
                    "2740:7:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13945,
                  "src": "2740:7:11"
                }
              ],
              "src": "2722:26:11"
            },
            "parameters": {
              "id": 3763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3762,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "2689:11:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3790,
                  "src": "2682:18:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 3761,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2682:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2681:20:11"
            },
            "returnParameters": {
              "id": 3769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3768,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3790,
                  "src": "2758:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3767,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2758:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2757:6:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3836,
            "nodeType": "FunctionDefinition",
            "src": "3513:405:11",
            "nodes": [],
            "body": {
              "id": 3835,
              "nodeType": "Block",
              "src": "3628:290:11",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    3802
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3802,
                      "mutability": "mutable",
                      "name": "fullUriForToken",
                      "nameLocation": "3652:15:11",
                      "nodeType": "VariableDeclaration",
                      "scope": 3835,
                      "src": "3638:29:11",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3801,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3638:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3806,
                  "initialValue": {
                    "baseExpression": {
                      "id": 3803,
                      "name": "fullURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3731,
                      "src": "3670:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 3805,
                    "indexExpression": {
                      "id": 3804,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3793,
                      "src": "3678:8:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3670:17:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3638:49:11"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 3813,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 3809,
                            "name": "fullUriForToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3802,
                            "src": "3707:15:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 3808,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3701:5:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 3807,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "3701:5:11",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 3810,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3701:22:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 3811,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3724:6:11",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3701:29:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 3812,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3733:1:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3701:33:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3817,
                  "nodeType": "IfStatement",
                  "src": "3697:86:11",
                  "trueBody": {
                    "id": 3816,
                    "nodeType": "Block",
                    "src": "3736:47:11",
                    "statements": [
                      {
                        "expression": {
                          "id": 3814,
                          "name": "fullUriForToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3802,
                          "src": "3757:15:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 3800,
                        "id": 3815,
                        "nodeType": "Return",
                        "src": "3750:22:11"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    3819
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3819,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "3807:8:11",
                      "nodeType": "VariableDeclaration",
                      "scope": 3835,
                      "src": "3793:22:11",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3818,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3793:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3823,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 3821,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3793,
                        "src": "3830:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3820,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17682,
                      "src": "3818:11:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 3822,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3818:21:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3793:46:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 3828,
                            "name": "batchUri",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3819,
                            "src": "3880:8:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 3829,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3793,
                                "src": "3890:8:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 3830,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3899:8:11",
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 65898,
                              "src": "3890:17:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 3831,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3890:19:11",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 3826,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3863:3:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 3827,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "3867:12:11",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3863:16:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 3832,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3863:47:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 3825,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3856:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 3824,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3856:6:11",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 3833,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3856:55:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 3800,
                  "id": 3834,
                  "nodeType": "Return",
                  "src": "3849:62:11"
                }
              ]
            },
            "baseFunctions": [
              11349,
              14337
            ],
            "documentation": {
              "id": 3791,
              "nodeType": "StructuredDocumentation",
              "src": "3291:217:11",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "3522:8:11",
            "overrides": {
              "id": 3797,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 3795,
                  "name": "ERC721A",
                  "nameLocations": [
                    "3578:7:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12340,
                  "src": "3578:7:11"
                },
                {
                  "id": 3796,
                  "name": "IERC721Metadata",
                  "nameLocations": [
                    "3587:15:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 14338,
                  "src": "3587:15:11"
                }
              ],
              "src": "3569:34:11"
            },
            "parameters": {
              "id": 3794,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3793,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3539:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3836,
                  "src": "3531:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3792,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3531:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3530:18:11"
            },
            "returnParameters": {
              "id": 3800,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3799,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3836,
                  "src": "3613:13:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3798,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3613:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3612:15:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3863,
            "nodeType": "FunctionDefinition",
            "src": "4454:217:11",
            "nodes": [],
            "body": {
              "id": 3862,
              "nodeType": "Block",
              "src": "4523:148:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3845,
                          "name": "_canMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4006,
                          "src": "4541:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3846,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4541:10:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
                        "id": 3847,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4553:25:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        },
                        "value": "Not authorized to mint."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        }
                      ],
                      "id": 3844,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4533:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3848,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4533:46:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3849,
                  "nodeType": "ExpressionStatement",
                  "src": "4533:46:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3851,
                          "name": "nextTokenIdToMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3916,
                          "src": "4602:17:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 3852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4602:19:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3853,
                        "name": "_tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3841,
                        "src": "4623:9:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 3850,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3979,
                      "src": "4589:12:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 3854,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4589:44:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3855,
                  "nodeType": "ExpressionStatement",
                  "src": "4589:44:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3857,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3839,
                        "src": "4653:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 3858,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4658:1:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "hexValue": "",
                        "id": 3859,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4661:2:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 3856,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11590,
                        11753
                      ],
                      "referencedDeclaration": 11753,
                      "src": "4643:9:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory)"
                      }
                    },
                    "id": 3860,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4643:21:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3861,
                  "nodeType": "ExpressionStatement",
                  "src": "4643:21:11"
                }
              ]
            },
            "documentation": {
              "id": 3837,
              "nodeType": "StructuredDocumentation",
              "src": "4105:344:11",
              "text": "  @notice          Lets an authorized address mint an NFT to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\n  @param _to       The recipient of the NFT to mint.\n  @param _tokenURI The full metadata URI for the NFT minted."
            },
            "functionSelector": "0075a317",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintTo",
            "nameLocation": "4463:6:11",
            "parameters": {
              "id": 3842,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3839,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "4478:3:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3863,
                  "src": "4470:11:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3838,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4470:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3841,
                  "mutability": "mutable",
                  "name": "_tokenURI",
                  "nameLocation": "4497:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3863,
                  "src": "4483:23:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3840,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4483:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4469:38:11"
            },
            "returnParameters": {
              "id": 3843,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4523:0:11"
            },
            "scope": 4048,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3895,
            "nodeType": "FunctionDefinition",
            "src": "5232:287:11",
            "nodes": [],
            "body": {
              "id": 3894,
              "nodeType": "Block",
              "src": "5344:175:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3876,
                          "name": "_canMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4006,
                          "src": "5362:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3877,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5362:10:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
                        "id": 3878,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5374:25:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        },
                        "value": "Not authorized to mint."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        }
                      ],
                      "id": 3875,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5354:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3879,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5354:46:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3880,
                  "nodeType": "ExpressionStatement",
                  "src": "5354:46:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3882,
                          "name": "nextTokenIdToMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3916,
                          "src": "5429:17:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 3883,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5429:19:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3884,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3868,
                        "src": "5450:9:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3885,
                        "name": "_baseURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3870,
                        "src": "5461:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 3881,
                      "name": "_batchMintMetadata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17839,
                      "src": "5410:18:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,string memory) returns (uint256,uint256)"
                      }
                    },
                    "id": 3886,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5410:60:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "id": 3887,
                  "nodeType": "ExpressionStatement",
                  "src": "5410:60:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3889,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3866,
                        "src": "5490:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3890,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3868,
                        "src": "5495:9:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3891,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3872,
                        "src": "5506:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 3888,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11590,
                        11753
                      ],
                      "referencedDeclaration": 11753,
                      "src": "5480:9:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory)"
                      }
                    },
                    "id": 3892,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5480:32:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3893,
                  "nodeType": "ExpressionStatement",
                  "src": "5480:32:11"
                }
              ]
            },
            "documentation": {
              "id": 3864,
              "nodeType": "StructuredDocumentation",
              "src": "4677:550:11",
              "text": "  @notice          Lets an authorized address mint multiple NFTs at once to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\n  @param _to       The recipient of the NFT to mint.\n  @param _quantity The number of NFTs to mint.\n  @param _baseURI  The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`\n  @param _data     Additional data to pass along during the minting of the NFT."
            },
            "functionSelector": "754a81d9",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "batchMintTo",
            "nameLocation": "5241:11:11",
            "parameters": {
              "id": 3873,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3866,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "5261:3:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "5253:11:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3865,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5253:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3868,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "5274:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "5266:17:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3867,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5266:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3870,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "5299:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "5285:22:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3869,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5285:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3872,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "5322:5:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "5309:18:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3871,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5309:5:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5252:76:11"
            },
            "returnParameters": {
              "id": 3874,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5344:0:11"
            },
            "scope": 4048,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3907,
            "nodeType": "FunctionDefinition",
            "src": "5793:87:11",
            "nodes": [],
            "body": {
              "id": 3906,
              "nodeType": "Block",
              "src": "5842:38:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3902,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3898,
                        "src": "5858:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 3903,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5868:4:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3901,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12053,
                        12235
                      ],
                      "referencedDeclaration": 12235,
                      "src": "5852:5:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 3904,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5852:21:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3905,
                  "nodeType": "ExpressionStatement",
                  "src": "5852:21:11"
                }
              ]
            },
            "documentation": {
              "id": 3896,
              "nodeType": "StructuredDocumentation",
              "src": "5525:263:11",
              "text": "  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\n  @dev            ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\n  @param _tokenId The tokenId of the NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "5802:4:11",
            "parameters": {
              "id": 3899,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3898,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5815:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3907,
                  "src": "5807:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3897,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5807:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5806:18:11"
            },
            "returnParameters": {
              "id": 3900,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5842:0:11"
            },
            "scope": 4048,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 3916,
            "nodeType": "FunctionDefinition",
            "src": "6135:104:11",
            "nodes": [],
            "body": {
              "id": 3915,
              "nodeType": "Block",
              "src": "6202:37:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 3913,
                    "name": "_currentIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10990,
                    "src": "6219:13:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 3912,
                  "id": 3914,
                  "nodeType": "Return",
                  "src": "6212:20:11"
                }
              ]
            },
            "documentation": {
              "id": 3908,
              "nodeType": "StructuredDocumentation",
              "src": "6064:66:11",
              "text": "@notice The tokenId assigned to the next new NFT to be minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "6144:17:11",
            "parameters": {
              "id": 3909,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6161:2:11"
            },
            "returnParameters": {
              "id": 3912,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3911,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3916,
                  "src": "6193:7:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3910,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6193:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6192:9:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3951,
            "nodeType": "FunctionDefinition",
            "src": "6571:343:11",
            "nodes": [],
            "body": {
              "id": 3950,
              "nodeType": "Block",
              "src": "6712:202:11",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    3927
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3927,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "6730:5:11",
                      "nodeType": "VariableDeclaration",
                      "scope": 3950,
                      "src": "6722:13:11",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3926,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6722:7:11",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3931,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 3929,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3921,
                        "src": "6746:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3928,
                      "name": "ownerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11286,
                      "src": "6738:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 3930,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6738:17:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6722:33:11"
                },
                {
                  "expression": {
                    "id": 3948,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 3932,
                      "name": "isApprovedOrOwnerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3924,
                      "src": "6765:19:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 3946,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 3940,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3935,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3933,
                                "name": "_operator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3919,
                                "src": "6788:9:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 3934,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3927,
                                "src": "6801:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "6788:18:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "id": 3937,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3927,
                                  "src": "6839:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 3938,
                                  "name": "_operator",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3919,
                                  "src": "6846:9:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 3936,
                                "name": "isApprovedForAll",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11478,
                                "src": "6822:16:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address,address) view returns (bool)"
                                }
                              },
                              "id": 3939,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6822:34:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "6788:68:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 3945,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "id": 3942,
                                  "name": "_tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3921,
                                  "src": "6884:8:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 3941,
                                "name": "getApproved",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11426,
                                "src": "6872:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 3943,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6872:21:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 3944,
                              "name": "_operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3919,
                              "src": "6897:9:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "6872:34:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6788:118:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 3947,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6787:120:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6765:142:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3949,
                  "nodeType": "ExpressionStatement",
                  "src": "6765:142:11"
                }
              ]
            },
            "documentation": {
              "id": 3917,
              "nodeType": "StructuredDocumentation",
              "src": "6245:321:11",
              "text": " @notice Returns whether a given address is the owner, or approved to transfer an NFT.\n @param _operator The address to check.\n @param _tokenId  The tokenId of the NFT to check.\n @return isApprovedOrOwnerOf Whether the given address is approved to transfer the given NFT."
            },
            "functionSelector": "430c2081",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedOrOwner",
            "nameLocation": "6580:17:11",
            "parameters": {
              "id": 3922,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3919,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "6615:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3951,
                  "src": "6607:17:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3918,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6607:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3921,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6642:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3951,
                  "src": "6634:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3920,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6634:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6597:59:11"
            },
            "returnParameters": {
              "id": 3925,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3924,
                  "mutability": "mutable",
                  "name": "isApprovedOrOwnerOf",
                  "nameLocation": "6691:19:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3951,
                  "src": "6686:24:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3923,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6686:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6685:26:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3979,
            "nodeType": "FunctionDefinition",
            "src": "7327:202:11",
            "nodes": [],
            "body": {
              "id": 3978,
              "nodeType": "Block",
              "src": "7409:120:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3968,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 3962,
                                  "name": "fullURI",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3731,
                                  "src": "7433:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                    "typeString": "mapping(uint256 => string storage ref)"
                                  }
                                },
                                "id": 3964,
                                "indexExpression": {
                                  "id": 3963,
                                  "name": "_tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3954,
                                  "src": "7441:8:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7433:17:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              ],
                              "id": 3961,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7427:5:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 3960,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "7427:5:11",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 3965,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7427:24:11",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes storage pointer"
                            }
                          },
                          "id": 3966,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7452:6:11",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7427:31:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 3967,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7462:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7427:36:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "55524920616c726561647920736574",
                        "id": 3969,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7465:17:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_27d33880a42c6c5e26aeadac7f095967881b47de4646734561d17c92845393d6",
                          "typeString": "literal_string \"URI already set\""
                        },
                        "value": "URI already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_27d33880a42c6c5e26aeadac7f095967881b47de4646734561d17c92845393d6",
                          "typeString": "literal_string \"URI already set\""
                        }
                      ],
                      "id": 3959,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7419:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3970,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7419:64:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3971,
                  "nodeType": "ExpressionStatement",
                  "src": "7419:64:11"
                },
                {
                  "expression": {
                    "id": 3976,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 3972,
                        "name": "fullURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3731,
                        "src": "7493:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 3974,
                      "indexExpression": {
                        "id": 3973,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3954,
                        "src": "7501:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7493:17:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 3975,
                      "name": "_tokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3956,
                      "src": "7513:9:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "7493:29:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 3977,
                  "nodeType": "ExpressionStatement",
                  "src": "7493:29:11"
                }
              ]
            },
            "documentation": {
              "id": 3952,
              "nodeType": "StructuredDocumentation",
              "src": "7117:205:11",
              "text": " @notice Sets the metadata URI for a given tokenId.\n @param _tokenId  The tokenId of the NFT to set the URI for.\n @param _tokenURI The URI to set for the given tokenId."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setTokenURI",
            "nameLocation": "7336:12:11",
            "parameters": {
              "id": 3957,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3954,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "7357:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3979,
                  "src": "7349:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3953,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7349:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3956,
                  "mutability": "mutable",
                  "name": "_tokenURI",
                  "nameLocation": "7381:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3979,
                  "src": "7367:23:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3955,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7367:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7348:43:11"
            },
            "returnParameters": {
              "id": 3958,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7409:0:11"
            },
            "scope": 4048,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3993,
            "nodeType": "FunctionDefinition",
            "src": "7625:121:11",
            "nodes": [],
            "body": {
              "id": 3992,
              "nodeType": "Block",
              "src": "7701:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3990,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3986,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7718:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3987,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7722:6:11",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "7718:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3988,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "7732:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3989,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7732:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7718:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3985,
                  "id": 3991,
                  "nodeType": "Return",
                  "src": "7711:28:11"
                }
              ]
            },
            "baseFunctions": [
              18092
            ],
            "documentation": {
              "id": 3980,
              "nodeType": "StructuredDocumentation",
              "src": "7535:85:11",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "7634:18:11",
            "overrides": {
              "id": 3982,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7677:8:11"
            },
            "parameters": {
              "id": 3981,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7652:2:11"
            },
            "returnParameters": {
              "id": 3985,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3984,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3993,
                  "src": "7695:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3983,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7695:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7694:6:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4006,
            "nodeType": "FunctionDefinition",
            "src": "7835:102:11",
            "nodes": [],
            "body": {
              "id": 4005,
              "nodeType": "Block",
              "src": "7892:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4003,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3999,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7909:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4000,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7913:6:11",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "7909:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4001,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "7923:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4002,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7923:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7909:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3998,
                  "id": 4004,
                  "nodeType": "Return",
                  "src": "7902:28:11"
                }
              ]
            },
            "documentation": {
              "id": 3994,
              "nodeType": "StructuredDocumentation",
              "src": "7752:78:11",
              "text": "@dev Returns whether a token can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "7844:8:11",
            "parameters": {
              "id": 3995,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7852:2:11"
            },
            "returnParameters": {
              "id": 3998,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3997,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4006,
                  "src": "7886:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3996,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7886:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7885:6:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4020,
            "nodeType": "FunctionDefinition",
            "src": "8021:115:11",
            "nodes": [],
            "body": {
              "id": 4019,
              "nodeType": "Block",
              "src": "8091:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4013,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8108:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4014,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8112:6:11",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8108:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4015,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "8122:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4016,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8122:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8108:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4012,
                  "id": 4018,
                  "nodeType": "Return",
                  "src": "8101:28:11"
                }
              ]
            },
            "baseFunctions": [
              21763
            ],
            "documentation": {
              "id": 4007,
              "nodeType": "StructuredDocumentation",
              "src": "7943:73:11",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "8030:12:11",
            "overrides": {
              "id": 4009,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8067:8:11"
            },
            "parameters": {
              "id": 4008,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8042:2:11"
            },
            "returnParameters": {
              "id": 4012,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4011,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4020,
                  "src": "8085:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4010,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8085:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8084:6:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4034,
            "nodeType": "FunctionDefinition",
            "src": "8227:121:11",
            "nodes": [],
            "body": {
              "id": 4033,
              "nodeType": "Block",
              "src": "8303:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4031,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4027,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8320:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4028,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8324:6:11",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8320:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4029,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "8334:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4030,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8334:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8320:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4026,
                  "id": 4032,
                  "nodeType": "Return",
                  "src": "8313:28:11"
                }
              ]
            },
            "baseFunctions": [
              23030
            ],
            "documentation": {
              "id": 4021,
              "nodeType": "StructuredDocumentation",
              "src": "8142:80:11",
              "text": "@dev Returns whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "8236:18:11",
            "overrides": {
              "id": 4023,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8279:8:11"
            },
            "parameters": {
              "id": 4022,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8254:2:11"
            },
            "returnParameters": {
              "id": 4026,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4025,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4034,
                  "src": "8297:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4024,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8297:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8296:6:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4047,
            "nodeType": "FunctionDefinition",
            "src": "8421:117:11",
            "nodes": [],
            "body": {
              "id": 4046,
              "nodeType": "Block",
              "src": "8504:34:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 4043,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "8521:3:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 4044,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "8525:6:11",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "8521:10:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 4042,
                  "id": 4045,
                  "nodeType": "Return",
                  "src": "8514:17:11"
                }
              ]
            },
            "baseFunctions": [
              21205,
              49269
            ],
            "documentation": {
              "id": 4035,
              "nodeType": "StructuredDocumentation",
              "src": "8354:62:11",
              "text": "@notice Returns the sender in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "8430:10:11",
            "overrides": {
              "id": 4039,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 4037,
                  "name": "Multicall",
                  "nameLocations": [
                    "8466:9:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21206,
                  "src": "8466:9:11"
                },
                {
                  "id": 4038,
                  "name": "Context",
                  "nameLocations": [
                    "8477:7:11"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 49279,
                  "src": "8477:7:11"
                }
              ],
              "src": "8457:28:11"
            },
            "parameters": {
              "id": 4036,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8440:2:11"
            },
            "returnParameters": {
              "id": 4042,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4041,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4047,
                  "src": "8495:7:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4040,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8495:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8494:9:11"
            },
            "scope": 4048,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3713,
              "name": "ERC721AQueryable",
              "nameLocations": [
                "1086:16:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 14739,
              "src": "1086:16:11"
            },
            "id": 3714,
            "nodeType": "InheritanceSpecifier",
            "src": "1086:16:11"
          },
          {
            "baseName": {
              "id": 3715,
              "name": "ContractMetadata",
              "nameLocations": [
                "1104:16:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18093,
              "src": "1104:16:11"
            },
            "id": 3716,
            "nodeType": "InheritanceSpecifier",
            "src": "1104:16:11"
          },
          {
            "baseName": {
              "id": 3717,
              "name": "Multicall",
              "nameLocations": [
                "1122:9:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21206,
              "src": "1122:9:11"
            },
            "id": 3718,
            "nodeType": "InheritanceSpecifier",
            "src": "1122:9:11"
          },
          {
            "baseName": {
              "id": 3719,
              "name": "Ownable",
              "nameLocations": [
                "1133:7:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21764,
              "src": "1133:7:11"
            },
            "id": 3720,
            "nodeType": "InheritanceSpecifier",
            "src": "1133:7:11"
          },
          {
            "baseName": {
              "id": 3721,
              "name": "Royalty",
              "nameLocations": [
                "1142:7:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23031,
              "src": "1142:7:11"
            },
            "id": 3722,
            "nodeType": "InheritanceSpecifier",
            "src": "1142:7:11"
          },
          {
            "baseName": {
              "id": 3723,
              "name": "BatchMintMetadata",
              "nameLocations": [
                "1151:17:11"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17840,
              "src": "1151:17:11"
            },
            "id": 3724,
            "nodeType": "InheritanceSpecifier",
            "src": "1151:17:11"
          }
        ],
        "canonicalName": "ERC721Base",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3712,
          "nodeType": "StructuredDocumentation",
          "src": "362:699:11",
          "text": "  The `ERC721Base` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.\n  It includes the following additions to standard ERC721 logic:\n      - Ability to mint NFTs via the provided `mint` function.\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4048,
          17840,
          23031,
          34061,
          14089,
          21764,
          33834,
          21206,
          33577,
          18093,
          33084,
          14739,
          17205,
          12340,
          14292,
          14338,
          14221,
          7939,
          13945,
          49279
        ],
        "name": "ERC721Base",
        "nameLocation": "1072:10:11",
        "scope": 4049,
        "usedErrors": [
          14233,
          14236,
          14239,
          14242,
          14245,
          14248,
          14251,
          14254,
          14257,
          14260,
          14263,
          14266,
          14269,
          17162
        ],
        "usedEvents": [
          14120,
          14129,
          14138,
          17530,
          17537,
          33083,
          33833,
          34051,
          34060
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 11
}