{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "name": "TokenURIRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "encryptDecrypt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encryptedData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "getRevealURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        }
      ],
      "name": "isEncryptedBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "943:3795:1:-:0;;;1224:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1413:13;1428:5;1435:7;1444:17;1463:11;1428:5;1435:7;1083:4:20;:12;1428:5:1;1083:4:20;:12;:::i;:::-;-1:-1:-1;1105:6:20;:16;1114:7;1105:6;:16;:::i;:::-;-1:-1:-1;;202:1:220;307:7;:22;-1:-1:-1;3154:26:3::1;3166:13:::0;3154:11:::1;:26::i;:::-;3190:56;3215:17:::0;-1:-1:-1;;;;;3190:56:3;::::1;:24;:56::i;:::-;2947:306:::0;;;;;1224:254:1;;;;;943:3795;;1421:172:70;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;4865:2:821;3549:25:77;;;4847:21:821;4904:2;4884:18;;;4877:30;-1:-1:-1;;;4923:18:821;;;4916:45;4978:18;;3549:25:77;;;;;;;3509:76;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;5153:25:821;;;3689:46:77;;5141:2:821;5126:18;3689:46:77;;;;;;;3408:334;;:::o;14:177:821:-;93:13;;-1:-1:-1;;;;;135:31:821;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:844;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:821;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:821;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;914:3;907:4;902:2;894:6;890:15;886:26;883:35;880:55;;;931:1;928;921:12;880:55;953:1;944:10;;963:133;977:2;974:1;971:9;963:133;;;1065:14;;;1061:23;;1055:30;1034:14;;;1030:23;;1023:63;988:10;;;;963:133;;;1140:1;1133:4;1128:2;1120:6;1116:15;1112:26;1105:37;1160:6;1151:15;;;;;;328:844;;;;:::o;1177:901::-;1303:6;1311;1319;1327;1335;1388:3;1376:9;1367:7;1363:23;1359:33;1356:53;;;1405:1;1402;1395:12;1356:53;1428:40;1458:9;1428:40;:::i;:::-;1512:2;1497:18;;1491:25;1418:50;;-1:-1:-1;;;;;;1565:14:821;;;1562:34;;;1592:1;1589;1582:12;1562:34;1615:61;1668:7;1659:6;1648:9;1644:22;1615:61;:::i;:::-;1605:71;;1722:2;1711:9;1707:18;1701:25;1685:41;;1751:2;1741:8;1738:16;1735:36;;;1767:1;1764;1757:12;1735:36;;1790:63;1845:7;1834:8;1823:9;1819:24;1790:63;:::i;:::-;1780:73;;;1872:49;1917:2;1906:9;1902:18;1872:49;:::i;:::-;1964:3;1949:19;;1943:26;1862:59;;-1:-1:-1;;;;;;1998:31:821;;1988:42;;1978:70;;2044:1;2041;2034:12;1978:70;2067:5;2057:15;;;1177:901;;;;;;;;:::o;2083:380::-;2162:1;2158:12;;;;2205;;;2226:61;;2280:4;2272:6;2268:17;2258:27;;2226:61;2333:2;2325:6;2322:14;2302:18;2299:38;2296:161;;2379:10;2374:3;2370:20;2367:1;2360:31;2414:4;2411:1;2404:15;2442:4;2439:1;2432:15;2296:161;;2083:380;;;:::o;2594:543::-;2696:2;2691:3;2688:11;2685:446;;;2732:1;2756:5;2753:1;2746:16;2800:4;2797:1;2787:18;2870:2;2858:10;2854:19;2851:1;2847:27;2841:4;2837:38;2906:4;2894:10;2891:20;2888:47;;;-1:-1:-1;2929:4:821;2888:47;2984:2;2979:3;2975:12;2972:1;2968:20;2962:4;2958:31;2948:41;;3039:82;3057:2;3050:5;3047:13;3039:82;;;3102:17;;;3083:1;3072:13;3039:82;;;3043:3;;;2685:446;2594:543;;;:::o;3313:1345::-;3433:10;;-1:-1:-1;;;;;3455:30:821;;3452:56;;;3488:18;;:::i;:::-;3517:97;3607:6;3567:38;3599:4;3593:11;3567:38;:::i;:::-;3561:4;3517:97;:::i;:::-;3669:4;;3726:2;3715:14;;3743:1;3738:663;;;;4445:1;4462:6;4459:89;;;-1:-1:-1;4514:19:821;;;4508:26;4459:89;-1:-1:-1;;3270:1:821;3266:11;;;3262:24;3258:29;3248:40;3294:1;3290:11;;;3245:57;4561:81;;3708:944;;3738:663;2541:1;2534:14;;;2578:4;2565:18;;-1:-1:-1;;3774:20:821;;;3892:236;3906:7;3903:1;3900:14;3892:236;;;3995:19;;;3989:26;3974:42;;4087:27;;;;4055:1;4043:14;;;;3922:19;;3892:236;;;3896:3;4156:6;4147:7;4144:19;4141:201;;;4217:19;;;4211:26;-1:-1:-1;;4300:1:821;4296:14;;;4312:3;4292:24;4288:37;4284:42;4269:58;4254:74;;4141:201;-1:-1:-1;;;;;4388:1:821;4372:14;;;4368:22;4355:36;;-1:-1:-1;3313:1345:821:o;5007:177::-;943:3795:1;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "943:3795:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;645:64:20;;;;;;;;;;-1:-1:-1;645:64:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;597:25:821;;;585:2;570:18;645:64:20;;;;;;;;7844:449:3;;;;;;;;;;-1:-1:-1;7844:449:3;;;;;:::i;:::-;;:::i;:::-;;;1184:14:821;;1177:22;1159:41;;1147:2;1132:18;7844:449:3;1019:187:821;418:18:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1894:405:1:-;;;;;;;;;;-1:-1:-1;1894:405:1;;;;;:::i;:::-;;:::i;1133:173:70:-;;;;;;;;;;-1:-1:-1;1133:173:70;;;;;:::i;:::-;;:::i;:::-;;2029:203:54;;;;;;;;;;-1:-1:-1;2029:203:54;;;;;:::i;:::-;;:::i;1421:325:77:-;;;;;;;;;;-1:-1:-1;1421:325:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;2788:32:821;;;2770:51;;2852:2;2837:18;;2830:34;;;;2743:18;1421:325:77;2596:274:821;5011:504:3;;;;;;:::i;:::-;;:::i;3066:360:20:-;;;;;;;;;;-1:-1:-1;3066:360:20;;;;;:::i;:::-;;:::i;8557:112:3:-;;;;;;;;;;-1:-1:-1;8641:21:3;;8557:112;;3937:129:57;;;;;;;;;;-1:-1:-1;3937:129:57;;;;;:::i;:::-;;:::i;5995:98:3:-;;;;;;;;;;-1:-1:-1;5995:98:3;;;;;:::i;:::-;;;;;1986:381:77;;;;;;;;;;-1:-1:-1;1986:381:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;6489:32:821;;;6471:51;;6570:6;6558:19;;;6553:2;6538:18;;6531:47;6444:18;1986:381:77;6299:285:821;1788:460:20;;;;;;;;;;-1:-1:-1;1788:460:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3065:256:77:-;;;;;;;;;;-1:-1:-1;3065:256:77;;;;;:::i;:::-;;:::i;1711:96:54:-;;;;;;;;;;-1:-1:-1;1785:8:54;:15;1711:96;;7018:534:3;;;;;;;;;;-1:-1:-1;7018:534:3;;;;;:::i;:::-;;:::i;954:43:54:-;;;;;;;;;;-1:-1:-1;954:43:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;871:86:70;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;9350:32:821;;;9332:51;;9320:2;9305:18;871:86:70;9186:203:821;1003:188:56;;;;;;;;;;-1:-1:-1;1003:188:56;;;;;:::i;:::-;;:::i;442:20:20:-;;;;;;;;;;;;;:::i;4259:258:77:-;;;;;;;;;;-1:-1:-1;4259:258:77;;;;;:::i;:::-;;:::i;1383:534:57:-;;;;;;;;;;-1:-1:-1;1383:534:57;;;;;:::i;:::-;;:::i;568:46::-;;;;;;;;;;-1:-1:-1;568:46:57;;;;;:::i;:::-;;:::i;2435:291:20:-;;;;;;;;;;-1:-1:-1;2435:291:20;;;;;:::i;:::-;;:::i;696:567:65:-;;;;;;;;;;-1:-1:-1;696:567:65;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2477:144:77:-;;;;;;;;;;-1:-1:-1;2577:16:77;;-1:-1:-1;;;;;2577:16:77;;;-1:-1:-1;;;2602:10:77;;;;2477:144;;2269:46:3;;;;;;;;;;-1:-1:-1;2269:46:3;;;;;:::i;:::-;;;;;;;;;;;;;;4132:413:1;;;;;;;;;;-1:-1:-1;4132:413:1;;;;;:::i;:::-;;:::i;3106:548::-;;;;;;;;;;-1:-1:-1;3106:548:1;;;;;:::i;:::-;;:::i;2409:1283:57:-;;;;;;;;;;-1:-1:-1;2409:1283:57;;;;;:::i;:::-;;:::i;565:34:56:-;;;;;;;;;;;;;:::i;716:68:20:-;;;;;;;;;;-1:-1:-1;716:68:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;2732:328;;;;;;;;;;-1:-1:-1;2732:328:20;;;;;:::i;:::-;;:::i;6378:346:3:-;;;;;;;;;;-1:-1:-1;6378:346:3;;;;;:::i;:::-;;:::i;7844:449::-;7947:4;-1:-1:-1;;;;;;;;;7982:25:3;;;;:100;;-1:-1:-1;;;;;;;;;;8057:25:3;;;7982:100;:176;;;-1:-1:-1;;;;;;;;;;8133:25:3;;;7982:176;:279;;;-1:-1:-1;;;;;;;8220:41:3;;-1:-1:-1;;;8220:41:3;7982:279;7963:298;7844:449;-1:-1:-1;;7844:449:3:o;418:18:20:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1894:405:1:-;1963:13;1989:15;2010:21;2022:8;2010:11;:21::i;:::-;1988:43;;;2041:22;2066:21;2078:8;2066:11;:21::i;:::-;2041:46;;2102:25;2119:7;2102:16;:25::i;:::-;2098:195;;;2174:8;2157:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;2143:46;;;;1894:405;;;:::o;2098:195::-;2251:8;2261:19;:8;:17;:19::i;:::-;2234:47;;;;;;;;;:::i;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;2029:203:54:-;2093:7;2126:17;1785:8;:15;;1711:96;2126:17;2116:6;:27;2112:81;;2159:23;;-1:-1:-1;;;2159:23:54;;17210:2:821;2159:23:54;;;17192:21:821;17249:2;17229:18;;;17222:30;-1:-1:-1;;;17268:18:821;;;17261:43;17321:18;;2159:23:54;17008:337:821;2112:81:54;2209:8;2218:6;2209:16;;;;;;;;:::i;:::-;;;;;;;;;2202:23;;2029:203;;;:::o;1421:325:77:-;1540:16;1558:21;1592:17;1611:11;1626:31;1649:7;1626:22;:31::i;:::-;1591:66;;-1:-1:-1;1591:66:77;;-1:-1:-1;1591:66:77;;;-1:-1:-1;1733:6:77;1714:15;1591:66;1714:9;:15;:::i;:::-;1713:26;;;;:::i;:::-;1697:42;;1581:165;;1421:325;;;;;:::o;5011:504:3:-;245:1:220;548:7;;:19;540:63;;;;-1:-1:-1;;;540:63:220;;18246:2:821;540:63:220;;;18228:21:821;18285:2;18265:18;;;18258:30;18324:33;18304:18;;;18297:61;18375:18;;540:63:220;18044:355:821;540:63:220;245:1;678:7;:18;8641:21:3;;5136:8:::1;:30;5128:53;;;::::0;-1:-1:-1;;;5128:53:3;;18606:2:821;5128:53:3::1;::::0;::::1;18588:21:821::0;18645:2;18625:18;;;18618:30;-1:-1:-1;;;18664:18:821;;;18657:40;18714:18;;5128:53:3::1;18404:334:821::0;5128:53:3::1;5312:54;5335:9;5346:8;5356:9;5312:22;:54::i;:::-;5488:8;5477:9;-1:-1:-1::0;;;;;5451:57:3::1;5465:10;-1:-1:-1::0;;;;;5451:57:3::1;;5498:9;5451:57;;;;597:25:821::0;;585:2;570:18;;451:177;5451:57:3::1;;;;;;;;-1:-1:-1::0;;202:1:220;851:7;:22;-1:-1:-1;5011:504:3:o;3066:360:20:-;-1:-1:-1;;;;;3278:18:20;;3286:10;3278:18;;:56;;-1:-1:-1;;;;;;3300:22:20;;;;;;:16;:22;;;;;;;;3323:10;3300:34;;;;;;;;;;3278:56;3270:87;;;;-1:-1:-1;;;3270:87:20;;;;;;;:::i;:::-;3367:52;3390:4;3396:2;3400:3;3405:7;3414:4;3367:22;:52::i;:::-;3066:360;;;;;:::o;3937:129:57:-;4002:4;4025:23;;;:13;:23;;;;;:30;;4002:4;;4025:23;:30;;;:::i;:::-;;;:34;4018:41;;3937:129;;;:::o;1986:381:77:-;2066:7;2130:29;;;:19;:29;;;;;;;;2093:66;;;;;;;;;;-1:-1:-1;;;;;2093:66:77;;;;;;;;;;;;;;;;2066:7;;2189:39;:171;;2305:25;;2339:19;;;;2189:171;;;2248:16;;-1:-1:-1;;;;;2248:16:77;;;-1:-1:-1;;;2273:10:77;;;;2189:171;2170:190;;;;;1986:381;;;:::o;1788:460:20:-;1921:16;1976:3;:10;1957:8;:15;:29;1949:57;;;;-1:-1:-1;;;1949:57:20;;;;;;;:::i;:::-;2017:30;2064:8;:15;-1:-1:-1;;;;;2050:30:20;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2050:30:20;;2017:63;;2096:9;2091:120;2115:8;:15;2111:1;:19;2091:120;;;2170:9;:22;2180:8;2189:1;2180:11;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;2170:22:20;-1:-1:-1;;;;;2170:22:20;;;;;;;;;;;;:30;2193:3;2197:1;2193:6;;;;;;;;:::i;:::-;;;;;;;2170:30;;;;;;;;;;;;2151:13;2165:1;2151:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2132:3;;2091:120;;;-1:-1:-1;2228:13:20;1788:460;-1:-1:-1;;;1788:460:20:o;3065:256:77:-;3177:20;:18;:20::i;:::-;3172:76;;3213:24;;-1:-1:-1;;;3213:24:77;;;;;;;:::i;3172:76::-;3258:56;3283:17;3302:11;3258:24;:56::i;:::-;3065:256;;:::o;7018:534:3:-;7152:10;-1:-1:-1;;;;;7181:16:3;;;;;:52;;-1:-1:-1;;;;;;7201:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;7181:52;7173:82;;;;-1:-1:-1;;;7173:82:3;;;;;;;:::i;:::-;7293:8;:15;7273:9;:16;:35;7265:63;;;;-1:-1:-1;;;7265:63:3;;19982:2:821;7265:63:3;;;19964:21:821;20021:2;20001:18;;;19994:30;-1:-1:-1;;;20040:18:821;;;20033:45;20095:18;;7265:63:3;19780:339:821;7265:63:3;7344:9;7339:157;7363:9;:16;7359:1;:20;7339:157;;;7446:8;7455:1;7446:11;;;;;;;;:::i;:::-;;;;;;;7411:9;:17;7421:6;-1:-1:-1;;;;;7411:17:3;-1:-1:-1;;;;;7411:17:3;;;;;;;;;;;;:31;7429:9;7439:1;7429:12;;;;;;;;:::i;:::-;;;;;;;7411:31;;;;;;;;;;;;:46;;7403:82;;;;-1:-1:-1;;;7403:82:3;;;;;;;:::i;:::-;7381:6;7386:1;7381:6;;:::i;:::-;;;7339:157;;;;7506:39;7517:6;7525:9;7536:8;7506:10;:39::i;:::-;7125:427;7018:534;;;:::o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;1003:188:56:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:56;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;442:20:20:-;;;;;;;:::i;4259:258:77:-;4376:20;:18;:20::i;:::-;4371:76;;4412:24;;-1:-1:-1;;;4412:24:77;;;;;;;:::i;4371:76::-;4457:53;4483:8;4493:10;4505:4;4457:25;:53::i;1383:534:57:-;1502:17;1522:23;;;:13;:23;;;;;1502:43;;1465:25;;1502:17;1522:23;1502:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:4;:11;1574:1;1559:16;1555:74;;1591:27;;-1:-1:-1;;;1591:27:57;;20808:2:821;1591:27:57;;;20790:21:821;20847:2;20827:18;;;20820:30;-1:-1:-1;;;20866:18:821;;;20859:47;20923:18;;1591:27:57;20606:341:821;1555:74:57;1640:25;1667:22;1704:4;1693:34;;;;;;;;;;;;:::i;:::-;1639:88;;;;1759:34;1774:12;1788:4;;1759:14;:34::i;:::-;1738:56;;1878:14;1840:11;1853:4;;1859:13;1823:50;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1813:61;;;;;;:79;1805:105;;;;-1:-1:-1;;;1805:105:57;;22451:2:821;1805:105:57;;;22433:21:821;22490:2;22470:18;;;22463:30;-1:-1:-1;;;22509:18:821;;;22502:43;22562:18;;1805:105:57;22249:337:821;1805:105:57;1492:425;;;1383:534;;;;;:::o;568:46::-;;;;;;;;;;;;;;;;:::i;2435:291:20:-;2545:10;-1:-1:-1;;;;;2573:17:20;;;;2565:44;;;;-1:-1:-1;;;2565:44:20;;22793:2:821;2565:44:20;;;22775:21:821;22832:2;22812:18;;;22805:30;-1:-1:-1;;;22851:18:821;;;22844:44;22905:18;;2565:44:20;22591:338:821;2565:44:20;-1:-1:-1;;;;;2619:23:20;;;;;;;:16;:23;;;;;;;;:33;;;;;;;;;;;;;:44;;-1:-1:-1;;2619:44:20;;;;;;;;;;2678:41;;1159::821;;;2678::20;;1132:18:821;2678:41:20;;;;;;;;2519:207;2435:291;;:::o;696:567:65:-;756:22;812:4;-1:-1:-1;;;;;800:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:34:65;-1:-1:-1;1415:10:65;834:14;;922:311;942:15;;;922:311;;;982:11;978:245;;;1026:78;1063:4;1087;;1092:1;1087:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1096:6;1070:33;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1026:28;:78::i;:::-;1013:7;1021:1;1013:10;;;;;;;;:::i;:::-;;;;;;:91;;;;978:245;;;1156:52;1193:4;1200;;1205:1;1200:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1156:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1156:28:65;;-1:-1:-1;;;1156:52:65:i;:::-;1143:7;1151:1;1143:10;;;;;;;;:::i;:::-;;;;;;:65;;;;978:245;959:3;;922:311;;;;1242:14;;696:567;;;;:::o;4132:413:1:-;4220:25;4265:12;:10;:12::i;:::-;4257:39;;;;-1:-1:-1;;;4257:39:1;;;;;;;:::i;:::-;4307:15;4325:25;4343:6;4325:17;:25::i;:::-;4307:43;;4374:27;4387:7;4396:4;;4374:12;:27::i;:::-;4360:41;;4412:30;4430:7;4412:30;;;;;;;;;;;;:17;:30::i;:::-;4452:33;4464:7;4473:11;4452;:33::i;:::-;4518:6;4501:37;4526:11;4501:37;;;;;;:::i;:::-;;;;;;;;4247:298;4132:413;;;;;:::o;3106:548::-;3261:15;3292:16;;3288:293;;3325:25;;3378:35;;;;3389:5;3378:35;:::i;:::-;3324:89;;;;3431:12;:19;3454:1;3431:24;;:48;;;;-1:-1:-1;3459:20:1;;;3431:48;3427:144;;;3499:57;3541:7;3517:21;;:31;;;;:::i;:::-;3550:5;;3499:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3499:17:1;;-1:-1:-1;;;3499:57:1:i;:::-;3310:271;;3288:293;3598:49;3613:7;3622:17;;3641:5;;3598:14;:49::i;:::-;3591:56;3106:548;-1:-1:-1;;;;;;3106:548:1:o;2409:1283:57:-;2602:11;;2768:4;2762:11;;2862:19;;;2883:2;2858:28;2845:42;;;2933:22;;;2762:11;2585:14;3029:657;3053:6;3049:1;:10;3029:657;;;3135:12;3177:3;;3182:1;3160:24;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3160:24:57;;;;;;;;;3150:35;;3160:24;3150:35;;;;3373:21;;;;;3367:28;3461:13;3631:23;;;;;3624:38;3061:7;;-1:-1:-1;3387:1:57;3061:7;:::i;:::-;;;3029:657;;;;2523:1169;2409:1283;;;;;:::o;565:34:56:-;;;;;;;:::i;2732:328:20:-;-1:-1:-1;;;;;2919:18:20;;2927:10;2919:18;;:56;;-1:-1:-1;;;;;;2941:22:20;;;;;;:16;:22;;;;;;;;2964:10;2941:34;;;;;;;;;;2919:56;2911:87;;;;-1:-1:-1;;;2911:87:20;;;;;;;:::i;:::-;3008:45;3026:4;3032:2;3036;3040:6;3048:4;3008:17;:45::i;6378:346:3:-;6487:10;-1:-1:-1;;;;;6516:16:3;;;;;:52;;-1:-1:-1;;;;;;6536:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;6516:52;6508:82;;;;-1:-1:-1;;;6508:82:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;6608:17:3;;;;;;:9;:17;;;;;;;;:27;;;;;;;;;:38;-1:-1:-1;6608:38:3;6600:74;;;;-1:-1:-1;;;6600:74:3;;;;;;;:::i;:::-;6685:32;6691:6;6699:8;6709:7;6685:5;:32::i;2320:471:54:-;2382:15;2399:13;2424:25;2452:17;1785:8;:15;;1711:96;2452:17;2424:45;;2479:24;2506:8;2479:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2530:9;2525:224;2549:17;2545:1;:21;2525:224;;;2605:7;2613:1;2605:10;;;;;;;;:::i;:::-;;;;;;;2594:8;:21;2590:149;;;2643:1;2635:9;;2672:7;2680:1;2672:10;;;;;;;;:::i;:::-;;;;;;;2662:20;;2701:23;;;2320:471;;;:::o;2590:149::-;2568:6;2573:1;2568:6;;:::i;:::-;;;2525:224;;;-1:-1:-1;2759:25:54;;-1:-1:-1;;;2759:25:54;;24730:2:821;2759:25:54;;;24712:21:821;24769:2;24749:18;;;24742:30;-1:-1:-1;;;24788:18:821;;;24781:45;24843:18;;2759:25:54;24528:339:821;2905:390:54;2967:13;2992:25;3020:17;1785:8;:15;;1711:96;3020:17;2992:45;;3047:24;3074:8;3047:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3098:9;3093:161;3117:17;3113:1;:21;3093:161;;;3173:7;3181:1;3173:10;;;;;;;;:::i;:::-;;;;;;;3162:8;:21;3158:86;;;3210:7;:19;3218:7;3226:1;3218:10;;;;;;;;:::i;:::-;;;;;;;3210:19;;;;;;;;;;;3203:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2905:390;;;:::o;3158:86::-;3136:6;3141:1;3136:6;;:::i;:::-;;;3093:161;;303:703:298;359:13;576:5;585:1;576:10;572:51;;-1:-1:-1;;602:10:298;;;;;;;;;;;;-1:-1:-1;;;602:10:298;;;;;303:703::o;572:51::-;647:5;632:12;686:75;693:9;;686:75;;718:8;;;;:::i;:::-;;-1:-1:-1;740:10:298;;-1:-1:-1;748:2:298;740:10;;:::i;:::-;;;686:75;;;770:19;802:6;-1:-1:-1;;;;;792:17:298;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;792:17:298;;770:39;;819:150;826:10;;819:150;;852:11;862:1;852:11;;:::i;:::-;;-1:-1:-1;920:10:298;928:2;920:5;:10;:::i;:::-;907:24;;:2;:24;:::i;:::-;894:39;;877:6;884;877:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;877:56:298;;;;;;;;-1:-1:-1;947:11:298;956:2;947:11;;:::i;:::-;;;819:150;;;992:6;303:703;-1:-1:-1;;;;303:703:298:o;10103:115:3:-;10167:4;10204:7;:5;:7::i;:::-;-1:-1:-1;;;;;10190:21:3;:10;-1:-1:-1;;;;;10190:21:3;;10183:28;;10103:115;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;9432:163:3:-;9547:41;9553:9;9564:8;9574:9;9547:41;;;;;;;;;;;;:5;:41::i;4364:967:20:-;4584:7;:14;4570:3;:10;:28;4562:56;;;;-1:-1:-1;;;4562:56:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4636:16:20;;4628:41;;;;-1:-1:-1;;;4628:41:20;;;;;;;:::i;:::-;4699:10;4720:60;4699:10;4751:4;4757:2;4761:3;4766:7;4775:4;4720:20;:60::i;:::-;4796:9;4791:385;4815:3;:10;4811:1;:14;4791:385;;;4846:10;4859:3;4863:1;4859:6;;;;;;;;:::i;:::-;;;;;;;4846:19;;4879:14;4896:7;4904:1;4896:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;4943:15:20;;4921:19;4943:15;;;:9;:15;;;;;;:19;;;;;;;;;;;4896:10;;-1:-1:-1;4984:21:20;;;;4976:50;;;;-1:-1:-1;;;4976:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;5068:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;5090:20;;;5068:42;;5138:13;;;;;;;;;;;:17;;;;;;;;:27;;5104:6;;5068:15;5138:27;;5104:6;;5138:27;:::i;:::-;;;;-1:-1:-1;;4827:3:20;;;;;-1:-1:-1;4791:385:20;;-1:-1:-1;;4791:385:20;;;5221:2;-1:-1:-1;;;;;5191:47:20;5215:4;-1:-1:-1;;;;;5191:47:20;5205:8;-1:-1:-1;;;;;5191:47:20;;5225:3;5230:7;5191:47;;;;;;;:::i;:::-;;;;;;;;5249:75;5285:8;5295:4;5301:2;5305:3;5310:7;5319:4;5249:35;:75::i;:::-;4552:779;4364:967;;;;;:::o;3408:334:77:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:77;;;;;;;:::i;3509:76::-;3595:16;:36;;-1:-1:-1;;;;;3595:36:77;;-1:-1:-1;;;;;;3641:32:77;;;;;-1:-1:-1;;;3641:32:77;;;;;;;;3689:46;;597:25:821;;;3689:46:77;;585:2:821;570:18;3689:46:77;;;;;;;3408:334;;:::o;7194:769:20:-;-1:-1:-1;;;;;7311:18:20;;7303:45;;;;-1:-1:-1;;;7303:45:20;;;;;;;:::i;:::-;7380:7;:14;7366:3;:10;:28;7358:56;;;;-1:-1:-1;;;7358:56:20;;;;;;;:::i;:::-;7425:16;7444:10;7425:29;;7465:66;7486:8;7496:4;7510:1;7514:3;7519:7;7465:66;;;;;;;;;;;;:20;:66::i;:::-;7547:9;7542:344;7566:3;:10;7562:1;:14;7542:344;;;7597:10;7610:3;7614:1;7610:6;;;;;;;;:::i;:::-;;;;;;;7597:19;;7630:14;7647:7;7655:1;7647:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;7694:15:20;;7672:19;7694:15;;;:9;:15;;;;;;:19;;;;;;;;;;;7647:10;;-1:-1:-1;7735:21:20;;;;7727:50;;;;-1:-1:-1;;;7727:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7819:15:20;;;;;;:9;:15;;;;;;;;:19;;;;;;;;;;7841:20;;7819:42;;7578:3;;7542:344;;;;7939:1;-1:-1:-1;;;;;7901:55:20;7925:4;-1:-1:-1;;;;;7901:55:20;7915:8;-1:-1:-1;;;;;7901:55:20;;7943:3;7948:7;7901:55;;;;;;;:::i;:::-;;;;;;;;7293:670;7194:769;;;:::o;1273:185:56:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1398:4;1384:11;:18;;;;;;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4619:332:77:-;4736:6;4729:4;:13;4725:69;;;4758:25;;-1:-1:-1;;;4758:25:77;;;;;;;:::i;4725:69::-;4836:49;;;;;;;;-1:-1:-1;;;;;4836:49:77;;;;;;;;;;;;;-1:-1:-1;4804:29:77;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4804:81:77;;;;;;;;;;;-1:-1:-1;4804:81:77;;;;;;;4901:43;;597:25:821;;;4836:49:77;;4804:29;;4901:43;;570:18:821;4901:43:77;451:177:821;6671:198:289;6754:12;6785:77;6806:6;6814:4;6785:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6778:84;6671:198;-1:-1:-1;;;6671:198:289:o;678:140:57:-;771:23;;;;:13;:23;;;;;:40;797:14;771:23;:40;:::i;3907:246:54:-;3998:21;;;;:11;:21;;;;;;;;3997:22;3989:47;;;;-1:-1:-1;;;3989:47:54;;31238:2:821;3989:47:54;;;31220:21:821;31277:2;31257:18;;;31250:30;-1:-1:-1;;;31296:18:821;;;31289:42;31348:18;;3989:47:54;31036:336:821;3989:47:54;4046:17;;;;:7;:17;;;;;:28;4066:8;4046:17;:28;:::i;:::-;;4089:57;4109:26;4126:8;4109:16;:26::i;:::-;4089:57;;;31551:25:821;;;31607:2;31592:18;;31585:34;;;31524:18;4089:57:54;31377:248:821;1254:592:63;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:63;;;;;;;:::i;1436:70::-;1520:7;1531:1;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:63;;31832:2:821;1548:15:63;;;31814:21:821;31871:1;31851:18;;;31844:29;-1:-1:-1;;;31889:18:821;;;31882:35;31934:18;;1548:15:63;31630:328:821;1516:58:63;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:63;;-1:-1:-1;;;1669:55:63:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:63;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;3614:744:20:-;-1:-1:-1;;;;;3795:16:20;;3787:41;;;;-1:-1:-1;;;3787:41:20;;;;;;;:::i;:::-;3858:10;3879:96;3858:10;3910:4;3916:2;3920:21;3938:2;3920:17;:21::i;:::-;3943:25;3961:6;3943:17;:25::i;:::-;3970:4;3879:20;:96::i;:::-;-1:-1:-1;;;;;4008:15:20;;3986:19;4008:15;;;:9;:15;;;;;;;;:19;;;;;;;;;4045:21;;;;4037:50;;;;-1:-1:-1;;;4037:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4121:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;4143:20;;;4121:42;;4183:13;;;;;;;;;;;:17;;;;;;;;:27;;4157:6;;4121:15;4183:27;;4157:6;;4183:27;:::i;:::-;;;;-1:-1:-1;;4226:46:20;;;31551:25:821;;;31607:2;31592:18;;31585:34;;;-1:-1:-1;;;;;4226:46:20;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4226:46:20;31524:18:821;4226:46:20;;;;;;;4283:68;4314:8;4324:4;4330:2;4334;4338:6;4346:4;4283:30;:68::i;:::-;3777:581;;3614:744;;;;;:::o;6631:557::-;-1:-1:-1;;;;;6723:18:20;;6715:45;;;;-1:-1:-1;;;6715:45:20;;;;;;;:::i;:::-;6790:10;6811:102;6790:10;6842:4;6771:16;6860:21;6878:2;6860:17;:21::i;:::-;6883:25;6901:6;6883:17;:25::i;:::-;6811:102;;;;;;;;;;;;:20;:102::i;:::-;-1:-1:-1;;;;;6946:15:20;;6924:19;6946:15;;;:9;:15;;;;;;;;:19;;;;;;;;;6983:21;;;;6975:50;;;;-1:-1:-1;;;6975:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7059:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;7081:20;;;7059:42;;7127:54;;31551:25:821;;;31592:18;;;31585:34;;;7059:15:20;;7127:54;;;-1:-1:-1;;;;;;;;;;;7127:54:20;31524:18:821;7127:54:20;;;;;;;6705:483;;6631:557;;;:::o;5460:492::-;-1:-1:-1;;;;;5569:16:20;;5561:41;;;;-1:-1:-1;;;5561:41:20;;;;;;;:::i;:::-;5632:10;5653:102;5632:10;5613:16;5696:2;5700:21;5718:2;5700:17;:21::i;5653:102::-;-1:-1:-1;;;;;5766:13:20;;;;;;:9;:13;;;;;;;;:17;;;;;;;;:27;;5787:6;;5766:13;:27;;5787:6;;5766:27;:::i;:::-;;;;-1:-1:-1;;5808:52:20;;;31551:25:821;;;31607:2;31592:18;;31585:34;;;-1:-1:-1;;;;;5808:52:20;;;;5841:1;;5808:52;;;;-1:-1:-1;;;;;;;;;;;5808:52:20;31524:18:821;5808:52:20;;;;;;;5871:74;5902:8;5920:1;5924:2;5928;5932:6;5940:4;5871:30;:74::i;10955:632:3:-;-1:-1:-1;;;;;11267:18:3;;11263:155;;11306:9;11301:107;11325:3;:10;11321:1;:14;11301:107;;;11383:7;11391:1;11383:10;;;;;;;;:::i;:::-;;;;;;;11360:11;:19;11372:3;11376:1;11372:6;;;;;;;;:::i;:::-;;;;;;;11360:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;;11337:3:3;;11301:107;;;;11263:155;-1:-1:-1;;;;;11432:16:3;;11428:153;;11469:9;11464:107;11488:3;:10;11484:1;:14;11464:107;;;11546:7;11554:1;11546:10;;;;;;;;:::i;:::-;;;;;;;11523:11;:19;11535:3;11539:1;11535:6;;;;;;;;:::i;:::-;;;;;;;11523:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;;11500:3:3;;11464:107;;8862:734:20;-1:-1:-1;;;;;9094:14:20;;;:18;9090:500;;9132:79;;-1:-1:-1;;;9132:79:20;;-1:-1:-1;;;;;9132:43:20;;;;;:79;;9176:8;;9186:4;;9192:3;;9197:7;;9206:4;;9132:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9132:79:20;;;;;;;;-1:-1:-1;;9132:79:20;;;;;;;;;;;;:::i;:::-;;;9128:452;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;9492:6;9485:14;;-1:-1:-1;;;9485:14:20;;;;;;;;:::i;9128:452::-;;;9539:26;;-1:-1:-1;;;9539:26:20;;34894:2:821;9539:26:20;;;34876:21:821;34933:2;34913:18;;;34906:30;-1:-1:-1;;;34952:18:821;;;34945:46;35008:18;;9539:26:20;34692:340:821;9128:452:20;-1:-1:-1;;;;;;9290:60:20;;-1:-1:-1;;;9290:60:20;9286:132;;9374:25;;-1:-1:-1;;;9374:25:20;;;;;;;:::i;7055:325:289:-;7196:12;7221;7235:23;7262:6;-1:-1:-1;;;;;7262:19:289;7282:4;7262:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7220:67;;;;7304:69;7331:6;7339:7;7348:10;7360:12;7304:26;:69::i;3363:459:54:-;3430:7;3449:25;3477:17;1785:8;:15;;1711:96;3477:17;3449:45;;3504:24;3531:8;3504:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3555:9;3550:231;3574:17;3570:1;:21;3550:231;;;3628:7;3636:1;3628:10;;;;;;;;:::i;:::-;;;;;;;3616:8;:22;3612:159;;3662:5;;3658:73;;3698:7;3706:5;3710:1;3706;:5;:::i;:::-;3698:14;;;;;;;;:::i;:::-;;;;;;;3691:21;;;;;3363:459;;;:::o;3658:73::-;-1:-1:-1;3755:1:54;;3363:459;-1:-1:-1;;;;3363:459:54:o;3612:159::-;3593:3;;3550:231;;;-1:-1:-1;3790:25:54;;-1:-1:-1;;;3790:25:54;;35875:2:821;3790:25:54;;;35857:21:821;35914:2;35894:18;;;35887:30;-1:-1:-1;;;35933:18:821;;;35926:45;35988:18;;3790:25:54;35673:339:821;4591:362:54;4741:25;;4805:24;4816:13;4805:8;:24;:::i;:::-;4877:8;:22;;;;;;;;;;;;;-1:-1:-1;4910:16:54;;;:7;4877:22;4910:16;;;;4795:34;;-1:-1:-1;4795:34:54;;-1:-1:-1;4910:36:54;4929:17;4910:16;:36;:::i;:::-;;4591:362;;;;;;:::o;9602:193:20:-;9721:16;;;9735:1;9721:16;;;;;;;;;9668;;9696:22;;9721:16;;;;;;;;;;;;-1:-1:-1;9721:16:20;9696:41;;9758:7;9747:5;9753:1;9747:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;9783:5;9602:193;-1:-1:-1;;9602:193:20:o;8189:667::-;-1:-1:-1;;;;;8396:14:20;;;:18;8392:458;;8434:72;;-1:-1:-1;;;8434:72:20;;-1:-1:-1;;;;;8434:38:20;;;;;:72;;8473:8;;8483:4;;8489:2;;8493:6;;8501:4;;8434:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8434:72:20;;;;;;;;-1:-1:-1;;8434:72:20;;;;;;;;;;;;:::i;:::-;;;8430:410;;;;:::i;:::-;-1:-1:-1;;;;;;8555:55:20;;-1:-1:-1;;;8555:55:20;8551:127;;8634:25;;-1:-1:-1;;;8634:25:20;;;;;;;:::i;7668:628:289:-;7848:12;7876:7;7872:418;;;7903:10;:17;7924:1;7903:22;7899:286;;-1:-1:-1;;;;;1695:19:289;;;8110:60;;;;-1:-1:-1;;;8110:60:289;;36785:2:821;8110:60:289;;;36767:21:821;36824:2;36804:18;;;36797:30;36863:31;36843:18;;;36836:59;36912:18;;8110:60:289;36583:353:821;8110:60:289;-1:-1:-1;8205:10:289;8198:17;;7872:418;8246:33;8254:10;8266:12;8977:17;;:21;8973:379;;9205:10;9199:17;9261:15;9248:10;9244:2;9240:19;9233:44;14:173:821;82:20;;-1:-1:-1;;;;;131:31:821;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:821:o;633:131::-;-1:-1:-1;;;;;;707:32:821;;697:43;;687:71;;754:1;751;744:12;769:245;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;1211:250::-;1296:1;1306:113;1320:6;1317:1;1314:13;1306:113;;;1396:11;;;1390:18;1377:11;;;1370:39;1342:2;1335:10;1306:113;;;-1:-1:-1;;1453:1:821;1435:16;;1428:27;1211:250::o;1466:271::-;1508:3;1546:5;1540:12;1573:6;1568:3;1561:19;1589:76;1658:6;1651:4;1646:3;1642:14;1635:4;1628:5;1624:16;1589:76;:::i;:::-;1719:2;1698:15;-1:-1:-1;;1694:29:821;1685:39;;;;1726:4;1681:50;;1466:271;-1:-1:-1;;1466:271:821:o;1742:220::-;1891:2;1880:9;1873:21;1854:4;1911:45;1952:2;1941:9;1937:18;1929:6;1911:45;:::i;1967:180::-;2026:6;2079:2;2067:9;2058:7;2054:23;2050:32;2047:52;;;2095:1;2092;2085:12;2047:52;-1:-1:-1;2118:23:821;;1967:180;-1:-1:-1;1967:180:821:o;2152:186::-;2211:6;2264:2;2252:9;2243:7;2239:23;2235:32;2232:52;;;2280:1;2277;2270:12;2232:52;2303:29;2322:9;2303:29;:::i;2343:248::-;2411:6;2419;2472:2;2460:9;2451:7;2447:23;2443:32;2440:52;;;2488:1;2485;2478:12;2440:52;-1:-1:-1;;2511:23:821;;;2581:2;2566:18;;;2553:32;;-1:-1:-1;2343:248:821:o;2875:322::-;2952:6;2960;2968;3021:2;3009:9;3000:7;2996:23;2992:32;2989:52;;;3037:1;3034;3027:12;2989:52;3060:29;3079:9;3060:29;:::i;:::-;3050:39;3136:2;3121:18;;3108:32;;-1:-1:-1;3187:2:821;3172:18;;;3159:32;;2875:322;-1:-1:-1;;;2875:322:821:o;3202:127::-;3263:10;3258:3;3254:20;3251:1;3244:31;3294:4;3291:1;3284:15;3318:4;3315:1;3308:15;3334:249;3444:2;3425:13;;-1:-1:-1;;3421:27:821;3409:40;;-1:-1:-1;;;;;3464:34:821;;3500:22;;;3461:62;3458:88;;;3526:18;;:::i;:::-;3562:2;3555:22;-1:-1:-1;;3334:249:821:o;3588:183::-;3648:4;-1:-1:-1;;;;;3673:6:821;3670:30;3667:56;;;3703:18;;:::i;:::-;-1:-1:-1;3748:1:821;3744:14;3760:4;3740:25;;3588:183::o;3776:730::-;3830:5;3883:3;3876:4;3868:6;3864:17;3860:27;3850:55;;3901:1;3898;3891:12;3850:55;3937:6;3924:20;3963:4;3986:43;4026:2;3986:43;:::i;:::-;4058:2;4052:9;4070:31;4098:2;4090:6;4070:31;:::i;:::-;4121:6;4110:17;;4151:2;4143:6;4136:18;4182:4;4174:6;4170:17;4163:24;;4239:4;4233:2;4230:1;4226:10;4218:6;4214:23;4210:34;4196:48;;4267:3;4259:6;4256:15;4253:35;;;4284:1;4281;4274:12;4253:35;4320:4;4312:6;4308:17;4334:142;4350:6;4345:3;4342:15;4334:142;;;4416:17;;4404:30;;4454:12;;;;4367;;4334:142;;;-1:-1:-1;4494:6:821;3776:730;-1:-1:-1;;;;;;3776:730:821:o;4511:186::-;4559:4;-1:-1:-1;;;;;4584:6:821;4581:30;4578:56;;;4614:18;;:::i;:::-;-1:-1:-1;4680:2:821;4659:15;-1:-1:-1;;4655:29:821;4686:4;4651:40;;4511:186::o;4702:419::-;4766:5;4796:35;4824:6;4796:35;:::i;:::-;4860:2;4854:9;4872:31;4900:2;4892:6;4872:31;:::i;:::-;4921:6;4912:15;;4951:6;4943;4936:22;4991:3;4982:6;4977:3;4973:16;4970:25;4967:45;;;5008:1;5005;4998:12;4967:45;5058:6;5053:3;5046:4;5038:6;5034:17;5021:44;5113:1;5106:4;5097:6;5089;5085:19;5081:30;5074:41;;;4702:419;;;;;:::o;5126:220::-;5168:5;5221:3;5214:4;5206:6;5202:17;5198:27;5188:55;;5239:1;5236;5229:12;5188:55;5261:79;5336:3;5327:6;5314:20;5307:4;5299:6;5295:17;5261:79;:::i;5351:943::-;5505:6;5513;5521;5529;5537;5590:3;5578:9;5569:7;5565:23;5561:33;5558:53;;;5607:1;5604;5597:12;5558:53;5630:29;5649:9;5630:29;:::i;:::-;5620:39;;5678:38;5712:2;5701:9;5697:18;5678:38;:::i;:::-;5668:48;;5767:2;5756:9;5752:18;5739:32;-1:-1:-1;;;;;5831:2:821;5823:6;5820:14;5817:34;;;5847:1;5844;5837:12;5817:34;5870:61;5923:7;5914:6;5903:9;5899:22;5870:61;:::i;:::-;5860:71;;5984:2;5973:9;5969:18;5956:32;5940:48;;6013:2;6003:8;6000:16;5997:36;;;6029:1;6026;6019:12;5997:36;6052:63;6107:7;6096:8;6085:9;6081:24;6052:63;:::i;:::-;6042:73;;6168:3;6157:9;6153:19;6140:33;6124:49;;6198:2;6188:8;6185:16;6182:36;;;6214:1;6211;6204:12;6182:36;;6237:51;6280:7;6269:8;6258:9;6254:24;6237:51;:::i;:::-;6227:61;;;5351:943;;;;;;;;:::o;6589:1208::-;6707:6;6715;6768:2;6756:9;6747:7;6743:23;6739:32;6736:52;;;6784:1;6781;6774:12;6736:52;6824:9;6811:23;-1:-1:-1;;;;;6894:2:821;6886:6;6883:14;6880:34;;;6910:1;6907;6900:12;6880:34;6948:6;6937:9;6933:22;6923:32;;6993:7;6986:4;6982:2;6978:13;6974:27;6964:55;;7015:1;7012;7005:12;6964:55;7051:2;7038:16;7073:4;7096:43;7136:2;7096:43;:::i;:::-;7168:2;7162:9;7180:31;7208:2;7200:6;7180:31;:::i;:::-;7246:18;;;7334:1;7330:10;;;;7322:19;;7318:28;;;7280:15;;;;-1:-1:-1;7358:19:821;;;7355:39;;;7390:1;7387;7380:12;7355:39;7414:11;;;;7434:148;7450:6;7445:3;7442:15;7434:148;;;7516:23;7535:3;7516:23;:::i;:::-;7504:36;;7467:12;;;;7560;;;;7434:148;;;7601:6;-1:-1:-1;;7645:18:821;;7632:32;;-1:-1:-1;;7676:16:821;;;7673:36;;;7705:1;7702;7695:12;7673:36;;7728:63;7783:7;7772:8;7761:9;7757:24;7728:63;:::i;:::-;7718:73;;;6589:1208;;;;;:::o;7802:439::-;7855:3;7893:5;7887:12;7920:6;7915:3;7908:19;7946:4;7975;7970:3;7966:14;7959:21;;8014:4;8007:5;8003:16;8037:1;8047:169;8061:6;8058:1;8055:13;8047:169;;;8122:13;;8110:26;;8156:12;;;;8191:15;;;;8083:1;8076:9;8047:169;;;-1:-1:-1;8232:3:821;;7802:439;-1:-1:-1;;;;;7802:439:821:o;8246:261::-;8425:2;8414:9;8407:21;8388:4;8445:56;8497:2;8486:9;8482:18;8474:6;8445:56;:::i;8512:669::-;8639:6;8647;8655;8708:2;8696:9;8687:7;8683:23;8679:32;8676:52;;;8724:1;8721;8714:12;8676:52;8747:29;8766:9;8747:29;:::i;:::-;8737:39;;8827:2;8816:9;8812:18;8799:32;-1:-1:-1;;;;;8891:2:821;8883:6;8880:14;8877:34;;;8907:1;8904;8897:12;8877:34;8930:61;8983:7;8974:6;8963:9;8959:22;8930:61;:::i;:::-;8920:71;;9044:2;9033:9;9029:18;9016:32;9000:48;;9073:2;9063:8;9060:16;9057:36;;;9089:1;9086;9079:12;9057:36;;9112:63;9167:7;9156:8;9145:9;9141:24;9112:63;:::i;:::-;9102:73;;;8512:669;;;;;:::o;9394:450::-;9463:6;9516:2;9504:9;9495:7;9491:23;9487:32;9484:52;;;9532:1;9529;9522:12;9484:52;9572:9;9559:23;-1:-1:-1;;;;;9597:6:821;9594:30;9591:50;;;9637:1;9634;9627:12;9591:50;9660:22;;9713:4;9705:13;;9701:27;-1:-1:-1;9691:55:821;;9742:1;9739;9732:12;9691:55;9765:73;9830:7;9825:2;9812:16;9807:2;9803;9799:11;9765:73;:::i;9849:322::-;9926:6;9934;9942;9995:2;9983:9;9974:7;9970:23;9966:32;9963:52;;;10011:1;10008;10001:12;9963:52;10047:9;10034:23;10024:33;;10076:38;10110:2;10099:9;10095:18;10076:38;:::i;:::-;10066:48;;10161:2;10150:9;10146:18;10133:32;10123:42;;9849:322;;;;;:::o;10176:347::-;10227:8;10237:6;10291:3;10284:4;10276:6;10272:17;10268:27;10258:55;;10309:1;10306;10299:12;10258:55;-1:-1:-1;10332:20:821;;-1:-1:-1;;;;;10364:30:821;;10361:50;;;10407:1;10404;10397:12;10361:50;10444:4;10436:6;10432:17;10420:29;;10496:3;10489:4;10480:6;10472;10468:19;10464:30;10461:39;10458:59;;;10513:1;10510;10503:12;10458:59;10176:347;;;;;:::o;10528:477::-;10607:6;10615;10623;10676:2;10664:9;10655:7;10651:23;10647:32;10644:52;;;10692:1;10689;10682:12;10644:52;10728:9;10715:23;10705:33;;10789:2;10778:9;10774:18;10761:32;-1:-1:-1;;;;;10808:6:821;10805:30;10802:50;;;10848:1;10845;10838:12;10802:50;10887:58;10937:7;10928:6;10917:9;10913:22;10887:58;:::i;:::-;10528:477;;10964:8;;-1:-1:-1;10861:84:821;;-1:-1:-1;;;;10528:477:821:o;11233:347::-;11298:6;11306;11359:2;11347:9;11338:7;11334:23;11330:32;11327:52;;;11375:1;11372;11365:12;11327:52;11398:29;11417:9;11398:29;:::i;:::-;11388:39;;11477:2;11466:9;11462:18;11449:32;11524:5;11517:13;11510:21;11503:5;11500:32;11490:60;;11546:1;11543;11536:12;11490:60;11569:5;11559:15;;;11233:347;;;;;:::o;11585:626::-;11682:6;11690;11743:2;11731:9;11722:7;11718:23;11714:32;11711:52;;;11759:1;11756;11749:12;11711:52;11799:9;11786:23;-1:-1:-1;;;;;11869:2:821;11861:6;11858:14;11855:34;;;11885:1;11882;11875:12;11855:34;11923:6;11912:9;11908:22;11898:32;;11968:7;11961:4;11957:2;11953:13;11949:27;11939:55;;11990:1;11987;11980:12;11939:55;12030:2;12017:16;12056:2;12048:6;12045:14;12042:34;;;12072:1;12069;12062:12;12042:34;12125:7;12120:2;12110:6;12107:1;12103:14;12099:2;12095:23;12091:32;12088:45;12085:65;;;12146:1;12143;12136:12;12085:65;12177:2;12169:11;;;;;12199:6;;-1:-1:-1;11585:626:821;;-1:-1:-1;;;;11585:626:821:o;12216:801::-;12376:4;12405:2;12445;12434:9;12430:18;12475:2;12464:9;12457:21;12498:6;12533;12527:13;12564:6;12556;12549:22;12602:2;12591:9;12587:18;12580:25;;12664:2;12654:6;12651:1;12647:14;12636:9;12632:30;12628:39;12614:53;;12702:2;12694:6;12690:15;12723:1;12733:255;12747:6;12744:1;12741:13;12733:255;;;12840:2;12836:7;12824:9;12816:6;12812:22;12808:36;12803:3;12796:49;12868:40;12901:6;12892;12886:13;12868:40;:::i;:::-;12858:50;-1:-1:-1;12966:12:821;;;;12931:15;;;;12769:1;12762:9;12733:255;;;-1:-1:-1;13005:6:821;;12216:801;-1:-1:-1;;;;;;;12216:801:821:o;13022:786::-;13122:6;13130;13138;13146;13154;13207:2;13195:9;13186:7;13182:23;13178:32;13175:52;;;13223:1;13220;13213:12;13175:52;13259:9;13246:23;13236:33;;13320:2;13309:9;13305:18;13292:32;-1:-1:-1;;;;;13384:2:821;13376:6;13373:14;13370:34;;;13400:1;13397;13390:12;13370:34;13439:58;13489:7;13480:6;13469:9;13465:22;13439:58;:::i;:::-;13516:8;;-1:-1:-1;13413:84:821;-1:-1:-1;13604:2:821;13589:18;;13576:32;;-1:-1:-1;13620:16:821;;;13617:36;;;13649:1;13646;13639:12;13617:36;;13688:60;13740:7;13729:8;13718:9;13714:24;13688:60;:::i;:::-;13022:786;;;;-1:-1:-1;13022:786:821;;-1:-1:-1;13767:8:821;;13662:86;13022:786;-1:-1:-1;;;13022:786:821:o;13813:628::-;13901:6;13909;13917;13970:2;13958:9;13949:7;13945:23;13941:32;13938:52;;;13986:1;13983;13976:12;13938:52;14026:9;14013:23;-1:-1:-1;;;;;14096:2:821;14088:6;14085:14;14082:34;;;14112:1;14109;14102:12;14082:34;14135:49;14176:7;14167:6;14156:9;14152:22;14135:49;:::i;:::-;14125:59;;14237:2;14226:9;14222:18;14209:32;14193:48;;14266:2;14256:8;14253:16;14250:36;;;14282:1;14279;14272:12;14250:36;;14321:60;14373:7;14362:8;14351:9;14347:24;14321:60;:::i;14446:260::-;14514:6;14522;14575:2;14563:9;14554:7;14550:23;14546:32;14543:52;;;14591:1;14588;14581:12;14543:52;14614:29;14633:9;14614:29;:::i;:::-;14604:39;;14662:38;14696:2;14685:9;14681:18;14662:38;:::i;:::-;14652:48;;14446:260;;;;;:::o;14711:606::-;14815:6;14823;14831;14839;14847;14900:3;14888:9;14879:7;14875:23;14871:33;14868:53;;;14917:1;14914;14907:12;14868:53;14940:29;14959:9;14940:29;:::i;:::-;14930:39;;14988:38;15022:2;15011:9;15007:18;14988:38;:::i;:::-;14978:48;;15073:2;15062:9;15058:18;15045:32;15035:42;;15124:2;15113:9;15109:18;15096:32;15086:42;;15179:3;15168:9;15164:19;15151:33;-1:-1:-1;;;;;15199:6:821;15196:30;15193:50;;;15239:1;15236;15229:12;15193:50;15262:49;15303:7;15294:6;15283:9;15279:22;15262:49;:::i;15322:380::-;15401:1;15397:12;;;;15444;;;15465:61;;15519:4;15511:6;15507:17;15497:27;;15465:61;15572:2;15564:6;15561:14;15541:18;15538:38;15535:161;;15618:10;15613:3;15609:20;15606:1;15599:31;15653:4;15650:1;15643:15;15681:4;15678:1;15671:15;15535:161;;15322:380;;;:::o;15707:452::-;15939:3;15977:6;15971:13;15993:66;16052:6;16047:3;16040:4;16032:6;16028:17;15993:66;:::i;:::-;-1:-1:-1;;;16081:16:821;;16106:18;;;-1:-1:-1;16151:1:821;16140:13;;15707:452;-1:-1:-1;15707:452:821:o;16164:496::-;16343:3;16381:6;16375:13;16397:66;16456:6;16451:3;16444:4;16436:6;16432:17;16397:66;:::i;:::-;16526:13;;16485:16;;;;16548:70;16526:13;16485:16;16595:4;16583:17;;16548:70;:::i;:::-;16634:20;;16164:496;-1:-1:-1;;;;16164:496:821:o;16665:338::-;16867:2;16849:21;;;16906:2;16886:18;;;16879:30;-1:-1:-1;;;16940:2:821;16925:18;;16918:44;16994:2;16979:18;;16665:338::o;17350:127::-;17411:10;17406:3;17402:20;17399:1;17392:31;17442:4;17439:1;17432:15;17466:4;17463:1;17456:15;17482:127;17543:10;17538:3;17534:20;17531:1;17524:31;17574:4;17571:1;17564:15;17598:4;17595:1;17588:15;17614:168;17687:9;;;17718;;17735:15;;;17729:22;;17715:37;17705:71;;17756:18;;:::i;17787:127::-;17848:10;17843:3;17839:20;17836:1;17829:31;17879:4;17876:1;17869:15;17903:4;17900:1;17893:15;17919:120;17959:1;17985;17975:35;;17990:18;;:::i;:::-;-1:-1:-1;18024:9:821;;17919:120::o;18743:342::-;18945:2;18927:21;;;18984:2;18964:18;;;18957:30;-1:-1:-1;;;19018:2:821;19003:18;;18996:48;19076:2;19061:18;;18743:342::o;19090:339::-;19292:2;19274:21;;;19331:2;19311:18;;;19304:30;-1:-1:-1;;;19365:2:821;19350:18;;19343:45;19420:2;19405:18;;19090:339::o;19434:341::-;19636:2;19618:21;;;19675:2;19655:18;;;19648:30;-1:-1:-1;;;19709:2:821;19694:18;;19687:47;19766:2;19751:18;;19434:341::o;20124:347::-;20326:2;20308:21;;;20365:2;20345:18;;;20338:30;-1:-1:-1;;;20399:2:821;20384:18;;20377:53;20462:2;20447:18;;20124:347::o;20476:125::-;20541:9;;;20562:10;;;20559:36;;;20575:18;;:::i;20952:771::-;21040:6;21048;21101:2;21089:9;21080:7;21076:23;21072:32;21069:52;;;21117:1;21114;21107:12;21069:52;21150:9;21144:16;-1:-1:-1;;;;;21175:6:821;21172:30;21169:50;;;21215:1;21212;21205:12;21169:50;21238:22;;21291:4;21283:13;;21279:27;-1:-1:-1;21269:55:821;;21320:1;21317;21310:12;21269:55;21349:2;21343:9;21371:31;21399:2;21371:31;:::i;:::-;21431:2;21425:9;21443:31;21471:2;21463:6;21443:31;:::i;:::-;21498:2;21490:6;21483:18;21540:7;21533:4;21528:2;21524;21520:11;21516:22;21513:35;21510:55;;;21561:1;21558;21551:12;21510:55;21574:72;21643:2;21636:4;21628:6;21624:17;21617:4;21613:2;21609:13;21574:72;:::i;:::-;21711:4;21696:20;;;;21690:27;21665:6;;21690:27;;-1:-1:-1;;;;;;20952:771:821:o;21728:516::-;21943:3;21981:6;21975:13;21997:66;22056:6;22051:3;22044:4;22036:6;22032:17;21997:66;:::i;:::-;22085:16;;22138:6;22130;22085:16;22110:35;22164:18;;;22191;;;-1:-1:-1;22233:4:821;22225:13;;21728:516;-1:-1:-1;;;21728:516:821:o;22934:521::-;23011:4;23017:6;23077:11;23064:25;23171:2;23167:7;23156:8;23140:14;23136:29;23132:43;23112:18;23108:68;23098:96;;23190:1;23187;23180:12;23098:96;23217:33;;23269:20;;;-1:-1:-1;;;;;;23301:30:821;;23298:50;;;23344:1;23341;23334:12;23298:50;23377:4;23365:17;;-1:-1:-1;23408:14:821;23404:27;;;23394:38;;23391:58;;;23445:1;23442;23435:12;23460:352;23671:6;23663;23658:3;23645:33;23766:2;23737:15;;;;-1:-1:-1;;;;;;23733:45:821;23697:16;;23722:57;;;23803:2;23795:11;;23460:352;-1:-1:-1;23460:352:821:o;23817:388::-;23894:6;23902;23955:2;23943:9;23934:7;23930:23;23926:32;23923:52;;;23971:1;23968;23961:12;23923:52;24011:9;23998:23;-1:-1:-1;;;;;24036:6:821;24033:30;24030:50;;;24076:1;24073;24066:12;24030:50;24099:49;24140:7;24131:6;24120:9;24116:22;24099:49;:::i;:::-;24089:59;24195:2;24180:18;;;;24167:32;;-1:-1:-1;;;;23817:388:821:o;24210:313::-;24421:6;24413;24408:3;24395:33;24447:16;;;24472:18;;;24514:2;24506:11;;24210:313;-1:-1:-1;24210:313:821:o;24872:135::-;24911:3;24932:17;;;24929:43;;24952:18;;:::i;:::-;-1:-1:-1;24999:1:821;24988:13;;24872:135::o;25012:128::-;25079:9;;;25100:11;;;25097:37;;;25114:18;;:::i;25145:112::-;25177:1;25203;25193:35;;25208:18;;:::i;:::-;-1:-1:-1;25242:9:821;;25145:112::o;25262:336::-;25464:2;25446:21;;;25503:2;25483:18;;;25476:30;-1:-1:-1;;;25537:2:821;25522:18;;25515:42;25589:2;25574:18;;25262:336::o;25603:340::-;25805:2;25787:21;;;25844:2;25824:18;;;25817:30;-1:-1:-1;;;25878:2:821;25863:18;;25856:46;25934:2;25919:18;;25603:340::o;25948:465::-;26205:2;26194:9;26187:21;26168:4;26231:56;26283:2;26272:9;26268:18;26260:6;26231:56;:::i;:::-;26335:9;26327:6;26323:22;26318:2;26307:9;26303:18;26296:50;26363:44;26400:6;26392;26363:44;:::i;:::-;26355:52;25948:465;-1:-1:-1;;;;;25948:465:821:o;26418:339::-;26620:2;26602:21;;;26659:2;26639:18;;;26632:30;-1:-1:-1;;;26693:2:821;26678:18;;26671:45;26748:2;26733:18;;26418:339::o;26762:338::-;26964:2;26946:21;;;27003:2;26983:18;;;26976:30;-1:-1:-1;;;27037:2:821;27022:18;;27015:44;27091:2;27076:18;;26762:338::o;27231:543::-;27333:2;27328:3;27325:11;27322:446;;;27369:1;27393:5;27390:1;27383:16;27437:4;27434:1;27424:18;27507:2;27495:10;27491:19;27488:1;27484:27;27478:4;27474:38;27543:4;27531:10;27528:20;27525:47;;;-1:-1:-1;27566:4:821;27525:47;27621:2;27616:3;27612:12;27609:1;27605:20;27599:4;27595:31;27585:41;;27676:82;27694:2;27687:5;27684:13;27676:82;;;27739:17;;;27720:1;27709:13;27676:82;;27950:1345;28076:3;28070:10;-1:-1:-1;;;;;28095:6:821;28092:30;28089:56;;;28125:18;;:::i;:::-;28154:97;28244:6;28204:38;28236:4;28230:11;28204:38;:::i;:::-;28198:4;28154:97;:::i;:::-;28306:4;;28363:2;28352:14;;28380:1;28375:663;;;;29082:1;29099:6;29096:89;;;-1:-1:-1;29151:19:821;;;29145:26;29096:89;-1:-1:-1;;27907:1:821;27903:11;;;27899:24;27895:29;27885:40;27931:1;27927:11;;;27882:57;29198:81;;28345:944;;28375:663;27178:1;27171:14;;;27215:4;27202:18;;-1:-1:-1;;28411:20:821;;;28529:236;28543:7;28540:1;28537:14;28529:236;;;28632:19;;;28626:26;28611:42;;28724:27;;;;28692:1;28680:14;;;;28559:19;;28529:236;;;28533:3;28793:6;28784:7;28781:19;28778:201;;;28854:19;;;28848:26;-1:-1:-1;;28937:1:821;28933:14;;;28949:3;28929:24;28925:37;28921:42;28906:58;28891:74;;28778:201;-1:-1:-1;;;;;29025:1:821;29009:14;;;29005:22;28992:36;;-1:-1:-1;27950:1345:821:o;29300:383::-;29497:2;29486:9;29479:21;29460:4;29523:45;29564:2;29553:9;29549:18;29541:6;29523:45;:::i;:::-;29616:9;29608:6;29604:22;29599:2;29588:9;29584:18;29577:50;29644:33;29670:6;29662;29644:33;:::i;31963:267::-;32052:6;32047:3;32040:19;32104:6;32097:5;32090:4;32085:3;32081:14;32068:43;-1:-1:-1;32156:1:821;32131:16;;;32149:4;32127:27;;;32120:38;;;;32212:2;32191:15;;;-1:-1:-1;;32187:29:821;32178:39;;;32174:50;;31963:267::o;32235:506::-;32478:6;32467:9;32460:25;32521:2;32516;32505:9;32501:18;32494:30;32441:4;32547:62;32605:2;32594:9;32590:18;32582:6;32574;32547:62;:::i;:::-;32657:9;32649:6;32645:22;32640:2;32629:9;32625:18;32618:50;32685;32728:6;32720;32712;32685:50;:::i;:::-;32677:58;32235:506;-1:-1:-1;;;;;;;;32235:506:821:o;32746:827::-;-1:-1:-1;;;;;33143:15:821;;;33125:34;;33195:15;;33190:2;33175:18;;33168:43;33105:3;33242:2;33227:18;;33220:31;;;33068:4;;33274:57;;33311:19;;33303:6;33274:57;:::i;:::-;33379:9;33371:6;33367:22;33362:2;33351:9;33347:18;33340:50;33413:44;33450:6;33442;33413:44;:::i;:::-;33399:58;;33506:9;33498:6;33494:22;33488:3;33477:9;33473:19;33466:51;33534:33;33560:6;33552;33534:33;:::i;33578:249::-;33647:6;33700:2;33688:9;33679:7;33675:23;33671:32;33668:52;;;33716:1;33713;33706:12;33668:52;33748:9;33742:16;33767:30;33791:5;33767:30;:::i;33832:179::-;33867:3;33909:1;33891:16;33888:23;33885:120;;;33955:1;33952;33949;33934:23;-1:-1:-1;33992:1:821;33986:8;33981:3;33977:18;33885:120;33832:179;:::o;34016:671::-;34055:3;34097:4;34079:16;34076:26;34073:39;;;34016:671;:::o;34073:39::-;34139:2;34133:9;-1:-1:-1;;34204:16:821;34200:25;;34197:1;34133:9;34176:50;34255:4;34249:11;34279:16;-1:-1:-1;;;;;34385:2:821;34378:4;34370:6;34366:17;34363:25;34358:2;34350:6;34347:14;34344:45;34341:58;;;34392:5;;;;;34016:671;:::o;34341:58::-;34429:6;34423:4;34419:17;34408:28;;34465:3;34459:10;34492:2;34484:6;34481:14;34478:27;;;34498:5;;;;;;34016:671;:::o;34478:27::-;34582:2;34563:16;34557:4;34553:27;34549:36;34542:4;34533:6;34528:3;34524:16;34520:27;34517:69;34514:82;;;34589:5;;;;;;34016:671;:::o;34514:82::-;34605:57;34656:4;34647:6;34639;34635:19;34631:30;34625:4;34605:57;:::i;:::-;-1:-1:-1;34678:3:821;;34016:671;-1:-1:-1;;;;;34016:671:821:o;35037:339::-;35239:2;35221:21;;;35278:2;35258:18;;;35251:30;-1:-1:-1;;;35312:2:821;35297:18;;35290:45;35367:2;35352:18;;35037:339::o;35381:287::-;35510:3;35548:6;35542:13;35564:66;35623:6;35618:3;35611:4;35603:6;35599:17;35564:66;:::i;:::-;35646:16;;;;;35381:287;-1:-1:-1;;35381:287:821:o;36017:561::-;-1:-1:-1;;;;;36314:15:821;;;36296:34;;36366:15;;36361:2;36346:18;;36339:43;36413:2;36398:18;;36391:34;;;36456:2;36441:18;;36434:34;;;36276:3;36499;36484:19;;36477:32;;;36239:4;;36526:46;;36552:19;;36544:6;36526:46;:::i;:::-;36518:54;36017:561;-1:-1:-1;;;;;;;36017:561:821:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "batchFrozen(uint256)": "83040532",
    "burn(address,uint256,uint256)": "f5298aca",
    "burnBatch(address,uint256[],uint256[])": "6b20c454",
    "claim(address,uint256,uint256)": "2bc43fd9",
    "contractURI()": "e8a3d485",
    "encryptDecrypt(bytes,bytes)": "e7150322",
    "encryptedData(uint256)": "a05112fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRevealURI(uint256,bytes)": "9fc4d68f",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isEncryptedBatch(uint256)": "492e224b",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "reveal(uint256,bytes)": "ce805642",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "totalSupply(uint256)": "bd85b039",
    "uri(uint256)": "0e89341c",
    "verifyClaim(address,uint256,uint256)": "4bbb1abf"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"TokenURIRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encryptDecrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"getRevealURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"isEncryptedBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\"},\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"DefaultRoyalty(address,uint256)\":{\"details\":\"Emitted when royalty info is updated.\"},\"MetadataFrozen()\":{\"details\":\"This event emits when the metadata of all tokens are frozen. While not currently supported by marketplaces, this event allows future indexing if desired.\"},\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"},\"RoyaltyForToken(uint256,address,uint256)\":{\"details\":\"Emitted when royalty recipient for tokenId is set\"},\"TokenURIRevealed(uint256,string)\":{\"details\":\"Emitted when tokens are revealed.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed\"},\"TokensLazyMinted(uint256,uint256,string,bytes)\":{\"details\":\"Emitted when tokens are lazy minted.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard). The `_operator` argument MUST be msg.sender. The `_from` argument MUST be the address of the holder whose balance is decreased. The `_to` argument MUST be the address of the recipient whose balance is increased. The `_ids` argument MUST be the list of tokens being transferred. The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by. When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard). The `_operator` argument MUST be msg.sender. The `_from` argument MUST be the address of the holder whose balance is decreased. The `_to` argument MUST be the address of the recipient whose balance is increased. The `_id` argument MUST be the token type being transferred. The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by. When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\"},\"URI(string,uint256)\":{\"details\":\"MUST emit when the URI is updated for a token ID. URIs are defined in RFC 3986. The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\"}},\"kind\":\"dev\",\"methods\":{\"burn(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the NFT to burn.\",\"_owner\":\"The owner of the NFT to burn.\",\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"burnBatch(address,uint256[],uint256[])\":{\"params\":{\"_amounts\":\"The amounts of the NFTs to burn.\",\"_owner\":\"The owner of the NFTs to burn.\",\"_tokenIds\":\"The tokenIds of the NFTs to burn.\"}},\"claim(address,uint256,uint256)\":{\"details\":\"The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of tokens to mint.\",\"_receiver\":\"The recipient of the tokens to mint.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}},\"encryptDecrypt(bytes,bytes)\":{\"details\":\"Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\",\"params\":{\"data\":\"Bytes of data to encrypt/decrypt.\",\"key\":\"Secure key used by caller for encryption/decryption.\"},\"returns\":{\"result\":\" Output after encryption/decryption of given data.\"}},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRevealURI(uint256,bytes)\":{\"details\":\"Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.\",\"params\":{\"_batchId\":\"ID of the batch for which URI is being revealed.\",\"_key\":\"Secure key used by caller/admin for encryption of baseURI.\"},\"returns\":{\"revealedURI\":\"Decrypted base URI.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isEncryptedBatch(uint256)\":{\"details\":\"Returns `true` if `_batchId`'s base URI is encrypted.\",\"params\":{\"_batchId\":\"ID of a batch of NFTs.\"}},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"reveal(uint256,bytes)\":{\"params\":{\"_index\":\"The ID for the batch of delayed-reveal NFTs to reveal.\",\"_key\":\"The key with which the base URI for the relevant batch of NFTs was encrypted.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"uri(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"verifyClaim(address,uint256,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens.\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenId.\"},\"burnBatch(address,uint256[],uint256[])\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenIds.\"},\"claim(address,uint256,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"encryptDecrypt(bytes,bytes)\":{\"notice\":\"Encrypt/decrypt data on chain.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRevealURI(uint256,bytes)\":{\"notice\":\"Returns revealed URI for a batch of NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner.\"},\"isEncryptedBatch(uint256)\":{\"notice\":\"Returns whether the relvant batch of NFTs is subject to a delayed reveal.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"reveal(uint256,bytes)\":{\"notice\":\"Lets an authorized address reveal a batch of delayed reveal NFTs.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"totalSupply(uint256)\":{\"notice\":\"Returns the total supply of NFTs of a given tokenId\"},\"uri(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"},\"verifyClaim(address,uint256,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"notice\":\"BASE:      ERC1155LazyMint      EXTENSION: DelayedReveal  The `ERC1155DelayedReveal` contract uses the `DelayedReveal` extension.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed  NFTs, after the fact.  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC1155DelayedReveal.sol\":\"ERC1155DelayedReveal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC1155DelayedReveal.sol\":{\"keccak256\":\"0xb5359473d43ce1f91211721492366ca65cb6753d8f75d70ac61d78b3e6b78fe4\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://debaae289c4c8527185d9a5371b6e4b2ade1551b39508e596640840194020b82\",\"dweb:/ipfs/QmNMuguAwPyj685vBnwLR6MtNAzCGStBsXnde9YFTRW4WB\"]},\"contracts/base/ERC1155LazyMint.sol\":{\"keccak256\":\"0xdf81210defe226ea6a3bd3e986ca75ffd8d58010ba7bc3ed9f66657312ff69af\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0b0edac74c1b7b949bf2ef4093b465d1b7e7261bd4ae9ac0e6a055386bed7eae\",\"dweb:/ipfs/Qmf4S5enGdMGEgBGZ8FXpDmj82R7xixAD4LwGntJMSyBsJ\"]},\"contracts/eip/ERC1155.sol\":{\"keccak256\":\"0xbac4d98722f937b876908b0baf24ff2854e65da244412db4622064d87c63a752\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://66af1bbb9833ad15656d41faafaf835fb98dec1a87554b143a3bb0e0eabe2fb3\",\"dweb:/ipfs/QmQUSxBYCT5VDvx4V5b4DX8gZyGgqSC42TKwYcd6CBZ2jf\"]},\"contracts/eip/interface/IERC1155.sol\":{\"keccak256\":\"0x19b9bee642c1b8e21c412a90fd08784dad7f567651edbe72bebf70d16551a2f4\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9c3f49fddb363032b69842d35cfc2aa72c8a36f3db2bed1e9bad3fc486b96df5\",\"dweb:/ipfs/QmQ5tn1fboZBmXWDXRfBMGJqYS9FtaQC8NYHaCiJapaJLF\"]},\"contracts/eip/interface/IERC1155Metadata.sol\":{\"keccak256\":\"0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43\",\"dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU\"]},\"contracts/eip/interface/IERC1155Receiver.sol\":{\"keccak256\":\"0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5\",\"dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6\",\"dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365\",\"dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DelayedReveal.sol\":{\"keccak256\":\"0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3\",\"dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e\",\"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95\",\"dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox\"]},\"contracts/extension/interface/IClaimableERC1155.sol\":{\"keccak256\":\"0x3fdfdad356fdd98e5dd1ec1f65d921c696b44bd9505f92a8440ad2430cfbb48c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bbc4177861066675e9e13caeead661f9003553c22edf1e4d5ed43062f497b52b\",\"dweb:/ipfs/QmPWERVCFoaCKkBnSNetX1YDhF7VtDVK6yEVYruubZRE1Q\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDelayedReveal.sol\":{\"keccak256\":\"0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138\",\"dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e\",\"dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd\"]},\"contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/lib/Address.sol\":{\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5\",\"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn\"]},\"contracts/lib/Strings.sol\":{\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb\",\"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokenURIRevealed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "_ids",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "_values",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferBatch",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferSingle",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_value",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "URI",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "_tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnBatch"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "key",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "encryptDecrypt",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "result",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "encryptedData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRevealURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isEncryptedBatch",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reveal",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeBatchTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "uri",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "burn(address,uint256,uint256)": {
            "params": {
              "_amount": "The amount of the NFT to burn.",
              "_owner": "The owner of the NFT to burn.",
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "burnBatch(address,uint256[],uint256[])": {
            "params": {
              "_amounts": "The amounts of the NFTs to burn.",
              "_owner": "The owner of the NFTs to burn.",
              "_tokenIds": "The tokenIds of the NFTs to burn."
            }
          },
          "claim(address,uint256,uint256)": {
            "details": "The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of tokens to mint.",
              "_receiver": "The recipient of the tokens to mint.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          },
          "encryptDecrypt(bytes,bytes)": {
            "details": "Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain",
            "params": {
              "data": "Bytes of data to encrypt/decrypt.",
              "key": "Secure key used by caller for encryption/decryption."
            },
            "returns": {
              "result": " Output after encryption/decryption of given data."
            }
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRevealURI(uint256,bytes)": {
            "details": "Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.",
            "params": {
              "_batchId": "ID of the batch for which URI is being revealed.",
              "_key": "Secure key used by caller/admin for encryption of baseURI."
            },
            "returns": {
              "revealedURI": "Decrypted base URI."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isEncryptedBatch(uint256)": {
            "details": "Returns `true` if `_batchId`'s base URI is encrypted.",
            "params": {
              "_batchId": "ID of a batch of NFTs."
            }
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "The encrypted base URI + provenance hash for the batch of NFTs being lazy minted."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "reveal(uint256,bytes)": {
            "params": {
              "_index": "The ID for the batch of delayed-reveal NFTs to reveal.",
              "_key": "The key with which the base URI for the relevant batch of NFTs was encrypted."
            }
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "uri(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "verifyClaim(address,uint256,uint256)": {
            "details": "Checks a request to claim NFTs against a custom condition.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "balanceOf(address,uint256)": {
            "notice": "Get the balance of an account's Tokens."
          },
          "burn(address,uint256,uint256)": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenId."
          },
          "burnBatch(address,uint256[],uint256[])": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenIds."
          },
          "claim(address,uint256,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "encryptDecrypt(bytes,bytes)": {
            "notice": "Encrypt/decrypt data on chain."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRevealURI(uint256,bytes)": {
            "notice": "Returns revealed URI for a batch of NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isApprovedForAll(address,address)": {
            "notice": "Queries the approval status of an operator for a given owner."
          },
          "isEncryptedBatch(uint256)": {
            "notice": "Returns whether the relvant batch of NFTs is subject to a delayed reveal."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "reveal(uint256,bytes)": {
            "notice": "Lets an authorized address reveal a batch of delayed reveal NFTs."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "totalSupply(uint256)": {
            "notice": "Returns the total supply of NFTs of a given tokenId"
          },
          "uri(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          },
          "verifyClaim(address,uint256,uint256)": {
            "notice": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "lib/sstore2/=lib/dynamic-contracts/lib/sstore2/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC1155DelayedReveal.sol": "ERC1155DelayedReveal"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC1155DelayedReveal.sol": {
        "keccak256": "0xb5359473d43ce1f91211721492366ca65cb6753d8f75d70ac61d78b3e6b78fe4",
        "urls": [
          "bzz-raw://debaae289c4c8527185d9a5371b6e4b2ade1551b39508e596640840194020b82",
          "dweb:/ipfs/QmNMuguAwPyj685vBnwLR6MtNAzCGStBsXnde9YFTRW4WB"
        ],
        "license": "Apache-2.0"
      },
      "contracts/base/ERC1155LazyMint.sol": {
        "keccak256": "0xdf81210defe226ea6a3bd3e986ca75ffd8d58010ba7bc3ed9f66657312ff69af",
        "urls": [
          "bzz-raw://0b0edac74c1b7b949bf2ef4093b465d1b7e7261bd4ae9ac0e6a055386bed7eae",
          "dweb:/ipfs/Qmf4S5enGdMGEgBGZ8FXpDmj82R7xixAD4LwGntJMSyBsJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC1155.sol": {
        "keccak256": "0xbac4d98722f937b876908b0baf24ff2854e65da244412db4622064d87c63a752",
        "urls": [
          "bzz-raw://66af1bbb9833ad15656d41faafaf835fb98dec1a87554b143a3bb0e0eabe2fb3",
          "dweb:/ipfs/QmQUSxBYCT5VDvx4V5b4DX8gZyGgqSC42TKwYcd6CBZ2jf"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC1155.sol": {
        "keccak256": "0x19b9bee642c1b8e21c412a90fd08784dad7f567651edbe72bebf70d16551a2f4",
        "urls": [
          "bzz-raw://9c3f49fddb363032b69842d35cfc2aa72c8a36f3db2bed1e9bad3fc486b96df5",
          "dweb:/ipfs/QmQ5tn1fboZBmXWDXRfBMGJqYS9FtaQC8NYHaCiJapaJLF"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Metadata.sol": {
        "keccak256": "0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e",
        "urls": [
          "bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43",
          "dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Receiver.sol": {
        "keccak256": "0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00",
        "urls": [
          "bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5",
          "dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa",
        "urls": [
          "bzz-raw://08d1accd523ed037c07d097fa2121597b00f02f0a0a5a5669a24a0924e4c01f6",
          "dweb:/ipfs/Qmem3H95uDQuACtgLC14PRWezwmvrwdjBKB4iY7Kz9LGiT"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0xa01614be56c98e216f76e432b1423881dd4cdac939a6c2dca0fd7884dbb60345",
        "urls": [
          "bzz-raw://9c1269b616818556a5bf10c6fcfe39035aca82efb9214c2ad456e9679c66d365",
          "dweb:/ipfs/QmZwPXBFAqNAwY1Zi3hiGhs3iKLbhtVAQhhmxjmu4pGLXc"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DelayedReveal.sol": {
        "keccak256": "0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242",
        "urls": [
          "bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3",
          "dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
        "urls": [
          "bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
          "dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0x7a457b73e71b0b4480755114393b08378dc882c81fda918273d9b71213d92501",
        "urls": [
          "bzz-raw://4853b4dc9ce8de80377c578e8a71e31f15c5d2b3def58b271f95fa87b613ef95",
          "dweb:/ipfs/QmPuuq7PLqLRWV4hNbN9dMqT2sGowyXZr6FPyBLGJ6Zhox"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC1155.sol": {
        "keccak256": "0x3fdfdad356fdd98e5dd1ec1f65d921c696b44bd9505f92a8440ad2430cfbb48c",
        "urls": [
          "bzz-raw://bbc4177861066675e9e13caeead661f9003553c22edf1e4d5ed43062f497b52b",
          "dweb:/ipfs/QmPWERVCFoaCKkBnSNetX1YDhF7VtDVK6yEVYruubZRE1Q"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDelayedReveal.sol": {
        "keccak256": "0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123",
        "urls": [
          "bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138",
          "dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d",
        "urls": [
          "bzz-raw://ad01c637bda34a7c8e75d9e0b7412f5817bfc547754eb49e990406294de9531e",
          "dweb:/ipfs/QmRBqte5ir3T9Rew3YXn5v6otp7LMq48H4MxRhuQ4nyqqd"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/lib/Address.sol": {
        "keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
        "urls": [
          "bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
          "dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/Strings.sol": {
        "keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
        "urls": [
          "bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
          "dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC1155DelayedReveal.sol",
    "id": 803,
    "exportedSymbols": {
      "Address": [
        64760
      ],
      "BatchMintMetadata": [
        17840
      ],
      "ContractMetadata": [
        18093
      ],
      "DelayedReveal": [
        18252
      ],
      "ERC1155": [
        7899
      ],
      "ERC1155DelayedReveal": [
        802
      ],
      "ERC1155LazyMint": [
        1997
      ],
      "IClaimableERC1155": [
        33014
      ],
      "IContractMetadata": [
        33084
      ],
      "IDelayedReveal": [
        33115
      ],
      "IERC165": [
        13945
      ],
      "IERC2981": [
        14089
      ],
      "ILazyMint": [
        33463
      ],
      "IMulticall": [
        33577
      ],
      "IOwnable": [
        33834
      ],
      "IRoyalty": [
        34061
      ],
      "LazyMint": [
        20828
      ],
      "Multicall": [
        21206
      ],
      "Ownable": [
        21764
      ],
      "ReentrancyGuard": [
        47279
      ],
      "Royalty": [
        23031
      ],
      "Strings": [
        66084
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4700:1",
    "nodes": [
      {
        "id": 605,
        "nodeType": "PragmaDirective",
        "src": "39:23:1",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 606,
        "nodeType": "ImportDirective",
        "src": "86:31:1",
        "nodes": [],
        "absolutePath": "contracts/base/ERC1155LazyMint.sol",
        "file": "./ERC1155LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 803,
        "sourceUnit": 1998,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 607,
        "nodeType": "ImportDirective",
        "src": "118:40:1",
        "nodes": [],
        "absolutePath": "contracts/extension/DelayedReveal.sol",
        "file": "../extension/DelayedReveal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 803,
        "sourceUnit": 18253,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 802,
        "nodeType": "ContractDefinition",
        "src": "943:3795:1",
        "nodes": [
          {
            "id": 615,
            "nodeType": "UsingForDirective",
            "src": "1013:26:1",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 613,
              "name": "Strings",
              "nameLocations": [
                "1019:7:1"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66084,
              "src": "1019:7:1"
            },
            "typeName": {
              "id": 614,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1031:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 636,
            "nodeType": "FunctionDefinition",
            "src": "1224:254:1",
            "nodes": [],
            "body": {
              "id": 635,
              "nodeType": "Block",
              "src": "1476:2:1",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 628,
                    "name": "_defaultAdmin",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 617,
                    "src": "1413:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 629,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 619,
                    "src": "1428:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 630,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 621,
                    "src": "1435:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 631,
                    "name": "_royaltyRecipient",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 623,
                    "src": "1444:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 632,
                    "name": "_royaltyBps",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 625,
                    "src": "1463:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  }
                ],
                "id": 633,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 627,
                  "name": "ERC1155LazyMint",
                  "nameLocations": [
                    "1397:15:1"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1997,
                  "src": "1397:15:1"
                },
                "nodeType": "ModifierInvocation",
                "src": "1397:78:1"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 617,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1253:13:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1245:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 616,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1245:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 619,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1290:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1276:19:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 618,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1276:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 621,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1319:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1305:21:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 620,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1305:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 623,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "1344:17:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1336:25:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 622,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1336:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 625,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "1379:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1371:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 624,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1371:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1235:161:1"
            },
            "returnParameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1476:0:1"
            },
            "scope": 802,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 684,
            "nodeType": "FunctionDefinition",
            "src": "1894:405:1",
            "nodes": [],
            "body": {
              "id": 683,
              "nodeType": "Block",
              "src": "1978:321:1",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    646,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 646,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "1997:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 683,
                      "src": "1989:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 645,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1989:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 650,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 648,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 639,
                        "src": "2022:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 647,
                      "name": "_getBatchId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17631,
                      "src": "2010:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256,uint256)"
                      }
                    },
                    "id": 649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2010:21:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1988:43:1"
                },
                {
                  "assignments": [
                    652
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 652,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "2055:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 683,
                      "src": "2041:22:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 651,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2041:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 656,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 654,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 639,
                        "src": "2078:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 653,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17682,
                      "src": "2066:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 655,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2066:21:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2041:46:1"
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 658,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 646,
                        "src": "2119:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 657,
                      "name": "isEncryptedBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18251,
                      "src": "2102:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 659,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2102:25:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 681,
                    "nodeType": "Block",
                    "src": "2206:87:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 674,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 652,
                                  "src": "2251:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 675,
                                      "name": "_tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 639,
                                      "src": "2261:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 676,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2270:8:1",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 65898,
                                    "src": "2261:17:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 677,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2261:19:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 672,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2234:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 673,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2238:12:1",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2234:16:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 678,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2234:47:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 671,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2227:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 670,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2227:6:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 679,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2227:55:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 644,
                        "id": 680,
                        "nodeType": "Return",
                        "src": "2220:62:1"
                      }
                    ]
                  },
                  "id": 682,
                  "nodeType": "IfStatement",
                  "src": "2098:195:1",
                  "trueBody": {
                    "id": 669,
                    "nodeType": "Block",
                    "src": "2129:71:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 664,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 652,
                                  "src": "2174:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 665,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2184:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  }
                                ],
                                "expression": {
                                  "id": 662,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2157:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 663,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2161:12:1",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2157:16:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 666,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2157:31:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 661,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2150:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 660,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2150:6:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 667,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2150:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 644,
                        "id": 668,
                        "nodeType": "Return",
                        "src": "2143:46:1"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              1615
            ],
            "documentation": {
              "id": 637,
              "nodeType": "StructuredDocumentation",
              "src": "1672:217:1",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "0e89341c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nameLocation": "1903:3:1",
            "overrides": {
              "id": 641,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1945:8:1"
            },
            "parameters": {
              "id": 640,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 639,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1915:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 684,
                  "src": "1907:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 638,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1907:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1906:18:1"
            },
            "returnParameters": {
              "id": 644,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 643,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 684,
                  "src": "1963:13:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 642,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1963:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1962:15:1"
            },
            "scope": 802,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 742,
            "nodeType": "FunctionDefinition",
            "src": "3106:548:1",
            "nodes": [],
            "body": {
              "id": 741,
              "nodeType": "Block",
              "src": "3278:376:1",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 697,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "3292:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "id": 698,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3298:6:1",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3292:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3307:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3292:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 733,
                  "nodeType": "IfStatement",
                  "src": "3288:293:1",
                  "trueBody": {
                    "id": 732,
                    "nodeType": "Block",
                    "src": "3310:271:1",
                    "statements": [
                      {
                        "assignments": [
                          702,
                          704
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 702,
                            "mutability": "mutable",
                            "name": "encryptedURI",
                            "nameLocation": "3338:12:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "3325:25:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 701,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3325:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 704,
                            "mutability": "mutable",
                            "name": "provenanceHash",
                            "nameLocation": "3360:14:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "3352:22:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 703,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3352:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 714,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 707,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "3389:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "components": [
                                {
                                  "id": 709,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3397:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 708,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3397:5:1",
                                    "typeDescriptions": {}
                                  }
                                },
                                {
                                  "id": 711,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3404:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 710,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3404:7:1",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "id": 712,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3396:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            ],
                            "expression": {
                              "id": 705,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "3378:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 706,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3382:6:1",
                            "memberName": "decode",
                            "nodeType": "MemberAccess",
                            "src": "3378:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 713,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3378:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes32_$",
                            "typeString": "tuple(bytes memory,bytes32)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3324:89:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 718,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 715,
                                "name": "encryptedURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 702,
                                "src": "3431:12:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 716,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3444:6:1",
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "3431:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 717,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3454:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3431:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 721,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 719,
                              "name": "provenanceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 704,
                              "src": "3459:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "",
                              "id": 720,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3477:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            },
                            "src": "3459:20:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3431:48:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 731,
                        "nodeType": "IfStatement",
                        "src": "3427:144:1",
                        "trueBody": {
                          "id": 730,
                          "nodeType": "Block",
                          "src": "3481:90:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 726,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 724,
                                      "name": "nextTokenIdToLazyMint",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 20762,
                                      "src": "3517:21:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "id": 725,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 687,
                                      "src": "3541:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "3517:31:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 727,
                                    "name": "_data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 691,
                                    "src": "3550:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "id": 723,
                                  "name": "_setEncryptedData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 18119,
                                  "src": "3499:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                                    "typeString": "function (uint256,bytes memory)"
                                  }
                                },
                                "id": 728,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3499:57:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 729,
                              "nodeType": "ExpressionStatement",
                              "src": "3499:57:1"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 736,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 687,
                        "src": "3613:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 737,
                        "name": "_baseURIForTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 689,
                        "src": "3622:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 738,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "3641:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "id": 734,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3598:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC1155DelayedReveal_$802_$",
                          "typeString": "type(contract super ERC1155DelayedReveal)"
                        }
                      },
                      "id": 735,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3604:8:1",
                      "memberName": "lazyMint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 20821,
                      "src": "3598:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function (uint256,string calldata,bytes calldata) returns (uint256)"
                      }
                    },
                    "id": 739,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3598:49:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 696,
                  "id": 740,
                  "nodeType": "Return",
                  "src": "3591:56:1"
                }
              ]
            },
            "baseFunctions": [
              20821
            ],
            "documentation": {
              "id": 685,
              "nodeType": "StructuredDocumentation",
              "src": "2487:614:1",
              "text": "  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\n  @param _amount           The number of NFTs to lazy mint.\n  @param _baseURIForTokens The placeholder base URI for the 'n' number of NFTs being lazy minted, where the\n                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\n  @param _data             The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\n  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together."
            },
            "functionSelector": "d37c353b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "3115:8:1",
            "overrides": {
              "id": 693,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3243:8:1"
            },
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 687,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "3141:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3133:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 686,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3133:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 689,
                  "mutability": "mutable",
                  "name": "_baseURIForTokens",
                  "nameLocation": "3174:17:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3158:33:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 688,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3158:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 691,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "3216:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3201:20:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 690,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3201:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3123:104:1"
            },
            "returnParameters": {
              "id": 696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 695,
                  "mutability": "mutable",
                  "name": "batchId",
                  "nameLocation": "3269:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3261:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 694,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3261:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3260:17:1"
            },
            "scope": 802,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 788,
            "nodeType": "FunctionDefinition",
            "src": "4132:413:1",
            "nodes": [],
            "body": {
              "id": 787,
              "nodeType": "Block",
              "src": "4247:298:1",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 754,
                          "name": "_canReveal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 801,
                          "src": "4265:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4265:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a6564",
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4279:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        },
                        "value": "Not authorized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        }
                      ],
                      "id": 753,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4257:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 757,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4257:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 758,
                  "nodeType": "ExpressionStatement",
                  "src": "4257:39:1"
                },
                {
                  "assignments": [
                    760
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 760,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "4315:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 787,
                      "src": "4307:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 759,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4307:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 764,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 762,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 745,
                        "src": "4343:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 761,
                      "name": "getBatchIdAtIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17570,
                      "src": "4325:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 763,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4325:25:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4307:43:1"
                },
                {
                  "expression": {
                    "id": 770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 765,
                      "name": "revealedURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 751,
                      "src": "4360:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 767,
                          "name": "batchId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 760,
                          "src": "4387:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 768,
                          "name": "_key",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 747,
                          "src": "4396:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        ],
                        "id": 766,
                        "name": "getRevealURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18185,
                        "src": "4374:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_string_memory_ptr_$",
                          "typeString": "function (uint256,bytes calldata) view returns (string memory)"
                        }
                      },
                      "id": 769,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4374:27:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "4360:41:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 771,
                  "nodeType": "ExpressionStatement",
                  "src": "4360:41:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 773,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 760,
                        "src": "4430:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 774,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4439:2:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 772,
                      "name": "_setEncryptedData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18119,
                      "src": "4412:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bytes memory)"
                      }
                    },
                    "id": 775,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4412:30:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 776,
                  "nodeType": "ExpressionStatement",
                  "src": "4412:30:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 778,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 760,
                        "src": "4464:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 779,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 751,
                        "src": "4473:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 777,
                      "name": "_setBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17769,
                      "src": "4452:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4452:33:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 781,
                  "nodeType": "ExpressionStatement",
                  "src": "4452:33:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 783,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 745,
                        "src": "4518:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 784,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 751,
                        "src": "4526:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 782,
                      "name": "TokenURIRevealed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33094,
                      "src": "4501:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 785,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4501:37:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 786,
                  "nodeType": "EmitStatement",
                  "src": "4496:42:1"
                }
              ]
            },
            "baseFunctions": [
              33104
            ],
            "documentation": {
              "id": 743,
              "nodeType": "StructuredDocumentation",
              "src": "3844:283:1",
              "text": "  @notice       Lets an authorized address reveal a batch of delayed reveal NFTs.\n  @param _index The ID for the batch of delayed-reveal NFTs to reveal.\n  @param _key   The key with which the base URI for the relevant batch of NFTs was encrypted."
            },
            "functionSelector": "ce805642",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "reveal",
            "nameLocation": "4141:6:1",
            "overrides": {
              "id": 749,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4202:8:1"
            },
            "parameters": {
              "id": 748,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 745,
                  "mutability": "mutable",
                  "name": "_index",
                  "nameLocation": "4156:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 788,
                  "src": "4148:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 744,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4148:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 747,
                  "mutability": "mutable",
                  "name": "_key",
                  "nameLocation": "4179:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 788,
                  "src": "4164:19:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 746,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4164:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4147:37:1"
            },
            "returnParameters": {
              "id": 752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 751,
                  "mutability": "mutable",
                  "name": "revealedURI",
                  "nameLocation": "4234:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 788,
                  "src": "4220:25:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 750,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4220:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4219:27:1"
            },
            "scope": 802,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 801,
            "nodeType": "FunctionDefinition",
            "src": "4632:104:1",
            "nodes": [],
            "body": {
              "id": 800,
              "nodeType": "Block",
              "src": "4691:45:1",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 798,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 794,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4708:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 795,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4712:6:1",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4708:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 796,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21716,
                        "src": "4722:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 797,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4722:7:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4708:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 793,
                  "id": 799,
                  "nodeType": "Return",
                  "src": "4701:28:1"
                }
              ]
            },
            "documentation": {
              "id": 789,
              "nodeType": "StructuredDocumentation",
              "src": "4551:76:1",
              "text": "@dev Checks whether NFTs can be revealed in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canReveal",
            "nameLocation": "4641:10:1",
            "parameters": {
              "id": 790,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4651:2:1"
            },
            "returnParameters": {
              "id": 793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 792,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 801,
                  "src": "4685:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 791,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4685:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4684:6:1"
            },
            "scope": 802,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 609,
              "name": "ERC1155LazyMint",
              "nameLocations": [
                "976:15:1"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1997,
              "src": "976:15:1"
            },
            "id": 610,
            "nodeType": "InheritanceSpecifier",
            "src": "976:15:1"
          },
          {
            "baseName": {
              "id": 611,
              "name": "DelayedReveal",
              "nameLocations": [
                "993:13:1"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18252,
              "src": "993:13:1"
            },
            "id": 612,
            "nodeType": "InheritanceSpecifier",
            "src": "993:13:1"
          }
        ],
        "canonicalName": "ERC1155DelayedReveal",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 608,
          "nodeType": "StructuredDocumentation",
          "src": "160:781:1",
          "text": "      BASE:      ERC1155LazyMint\n      EXTENSION: DelayedReveal\n  The `ERC1155DelayedReveal` contract uses the `DelayedReveal` extension.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs.\n  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed\n  NFTs, after the fact.\n  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          802,
          18252,
          33115,
          1997,
          47279,
          33014,
          20828,
          17840,
          33463,
          21206,
          33577,
          23031,
          34061,
          14089,
          13945,
          21764,
          33834,
          18093,
          33084,
          7899,
          13880,
          13858
        ],
        "name": "ERC1155DelayedReveal",
        "nameLocation": "952:20:1",
        "scope": 803,
        "usedErrors": [],
        "usedEvents": [
          13755,
          13770,
          13779,
          13786,
          17530,
          17537,
          32993,
          33083,
          33094,
          33450,
          33833,
          34051,
          34060
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 1
}